/*
 *  zpktdrv.h
 */
#ifndef _ZPKTDRV_H_INCLUDED
#define _ZPKTDRV_H_INCLUDED

/* Misc. definitions */

#define ETHERNET_MIN            60      /* Smallest ethernet packet size */
#define ETHERNET_MAX            1514    /* Largest ethernet packet size */
#define MAX_TYPE_LENGTH         8       /* Maximum length of interface type */

/* Packet driver errors */

#define PKTDRV_BAD_FUNCTION     1
#define PKTDRV_BAD_TYPE         2
#define PKTDRV_BAD_CLASS        3
#define PKTDRV_BAD_HANDLE       4
#define PKTDRV_BAD_INTERFACE    5
#define PKTDRV_BAD_MODE         6
#define PKTDRV_BAD_ADDRESS      7
#define PKTDRV_NO_MULTICAST     8
#define PKTDRV_NO_SPACE         9
#define PKTDRV_IN_USE           10
#define PKTDRV_CANT_SEND        11
#define PKTDRV_CANT_SET         12

/* Packet driver classes */

#define BLUEBOOK                1
#define PRONET10                2
#define IEEE8025                3
#define OMNINET                 4
#define APPLETALK               5
#define SLIP                    6
#define STARLAN                 7
#define ARCNET                  8
#define AX25                    9
#define KISS                    10
#define IEEE8023                11
#define FDDI                    12
#define IX25                    13
#define LANSTAR                 14
#define SLFP                    15
#define P2PP                    16
#define IEEE8025R               17
#define P2PPL                   18

/* Packet driver receive modes */

#define MATCH_INTERFACE_ADDRESS 0
#define MATCH_BROADCAST         1
#define MATCH_SOME_MULTICAST    2
#define MATCH_ALL_MULTICAST     3
#define MATCH_ALL_PACKETS       4

/* Supported packet driver interface types (in network order) */

#define ETHERNET_IP             0x0008
#define ETHERNET_ARP            0x0608
#define ETHERNET_RARP           0x3508
#define ETHERNET_LENGTH         2
#define CAPTURE_TYPE            0xffff
#define CAPTURE_LENGTH          0

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
#pragma pack(__push,1);

#if defined(__ZDOSDRV__)

/* Packet driver parameters */

typedef struct {
    int             Length;             /* Size of parameter structure */
    char            Major;              /* Major revision number */
    char            Minor;              /* Minor revision number */
    unsigned char   MaxMulticast;       /* Max number of multicast addresses */
    unsigned char   MaxSessions;        /* Max number of sessions (handles) */
    unsigned char   MaxDevices;         /* Number of devices supported */
    unsigned char   NumDevices;         /* Number of devices installed */
    unsigned short  MTU;                /* MTU size (excludes link header) */
    unsigned char   LinkType;           /* Link layer type */
    unsigned char   LinkLength;         /* Link layer address length */
    unsigned char   LinkSize;           /* Link layer header length */
    char            Alignment;          /* For aligment */
} PKTDRV_PARAM;

/* Packet driver statistics */

typedef struct {
    unsigned int    RxPackets;          /* Number of received packets */
    unsigned int    TxPackets;          /* Number of sent packets */
    unsigned int    RxCount;            /* Total number of bytes received */
    unsigned int    TxCount;            /* Total number of bytes sent */
    unsigned int    RxErrors;           /* Number of receive errors */
    unsigned int    TxErrors;           /* Number of transmit errors */
    unsigned int    DroppedPackets;     /* Number of dropped packets */
} PKTDRV_STATS;

/* Packet driver information */

typedef struct {
    int             Version;            /* Driver version number */
    char            *PointerToName;     /* Pointer to driver name */
    int             InterfaceClass;     /* Driver interface class */
} PKTDRV_INFO;

/* Packet driver receive callback */

#define PKTDRV_RECEIVE_CALLBACK int ( *Receiver ) ( unsigned Parameter, int Length, void *Buffer )

/* Network protocol interface functions */

int DosPktDrvInformation( PKTDRV_INFO *info, int handle, int interfacenumber );
int DosPktDrvOpenSession( int InterfaceClass, unsigned ReceiveParameter,
                          int InterfaceNumber, int InterfaceTypeLength,
                          char *InterfaceType, PKTDRV_RECEIVE_CALLBACK );
int DosPktDrvCloseSession( int InterfaceNumber, int Handle );
int DosPktDrvSendPacket( int Length, void *Buffer, int InterfaceNumber );
int DosPktDrvGetAddress( int Length, void *Buffer, int InterfaceNumber );
int DosPktDrvSetAddress( int Length, void *Buffer, int InterfaceNumber );
int DosPktDrvGetReceiveMode( int InterfaceNumber );
int DosPktDrvSetReceiveMode( int mode, int InterfaceNumber );
int DosPktDrvGetMulticastList( int InterfaceNumber, void *Buffer );
int DosPktDrvSetMulticastList( int NumberOfEntries, void *Buffer, int InterfaceNumber );
int DosPktDrvGetParameters( int InterfaceNumber, PKTDRV_PARAM **Buffer );
int DosPktDrvGetStatistics( int InterfaceNumber, PKTDRV_STATS *Buffer );

/* Packet driver interface functions */

int DosPktDrvInstallInterface( void );
int DosPktDrvRemoveInterface( int InterfaceNumber );
int DosPktDrvNumberOfInterfaces( void );

/* Packet driver function prototypes */

int PktDrvInformation( PKTDRV_INFO *info, int handle, int interfacenumber );
int PktDrvOpenSession( int InterfaceClass, unsigned ReceiveParameter,
                          int InterfaceNumber, int InterfaceTypeLength,
                          char *InterfaceType, PKTDRV_RECEIVE_CALLBACK );
int PktDrvCloseSession( int InterfaceNumber, int Handle );
int PktDrvSendPacket( int Length, void *Buffer, int InterfaceNumber );
int PktDrvGetAddress( int Length, void *Buffer, int InterfaceNumber );
int PktDrvSetAddress( int Length, void *Buffer, int InterfaceNumber );
int PktDrvGetReceiveMode( int InterfaceNumber );
int PktDrvSetReceiveMode( int mode, int InterfaceNumber );
int PktDrvGetMulticastList( int InterfaceNumber, void *Buffer );
int PktDrvSetMulticastList( int NumberOfEntries, void *Buffer, int InterfaceNumber );
int PktDrvGetParameters( int InterfaceNumber, PKTDRV_PARAM **Buffer );
int PktDrvGetStatistics( int InterfaceNumber, PKTDRV_STATS *Buffer );

#else

int DosPktDrvOpenCapture( int InterfaceNumber );
int DosPktDrvCloseCapture( int Handle );
int DosPktDrvWaitPacket( int Handle, void *Buffer );

#endif

#pragma pack(__pop);
#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif
