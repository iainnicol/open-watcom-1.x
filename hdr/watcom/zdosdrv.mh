/*
 *  zdosdrv.h
 *
:include crwat.sp
 */
#ifndef _ZDOSDRV_H_INCLUDED
#define _ZDOSDRV_H_INCLUDED
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
#pragma pack(__push,1);

/* Device driver status codes */

#define DEVICE_SUCCESS              0x0000
#define DEVICE_BUSY                 0x0200
#define DEVICE_WRITE_PROTECTED      0x8000
#define DEVICE_UNKNOWN_UNIT         0x8001
#define DEVICE_NOT_READY            0x8002
#define DEVICE_UNKNOWN_COMMAND      0x8003
#define DEVICE_DATA_ERROR           0x8004
#define DEVICE_BAD_REQUEST_LENGTH   0x8005
#define DEVICE_SEEK_ERROR           0x8006
#define DEVICE_UNKNOWN_MEDIA_TYPE   0x8007
#define DEVICE_SECTOR_NOT_FOUND     0x8008
#define DEVICE_OUT_OF_PAPER         0x8009
#define DEVICE_WRITE_FAULT          0x800a
#define DEVICE_READ_FAULT           0x800b
#define DEVICE_GENERAL_FAILURE      0x800c

/* Device driver media status */

#define MEDIA_CHANGED               0xff
#define MEDIA_UNCHANGED             0x01
#define MEDIA_UNSURE                0x00

/* Device driver attributes */

#define ATTRIBUTE_STDIN             0x000001    /* Standard input device */
#define ATTRIBUTE_STDOUT            0x000002    /* Standard output device */
#define ATTRIBUTE_SECTOR32          0x000002    /* Support 32-bit sector addresses */
#define ATTRIBUTE_NULL              0x000004    /* Standard NULL device */
#define ATTRIBUTE_CLOCK             0x000008    /* Standard CLOCK device */
#define ATTRIBUTE_FAST_IO           0x000010    /* Supports INT 29h fast I/O */
#define ATTRIBUTE_GET_SET           0x000040    /* Supports get/set logical device and generic IOCTL */
#define ATTRIBUTE_QUERY             0x000080    /* Supports IOCTL queries */
#define ATTRIBUTE_OPEN              0x000800    /* Supports open/close/removable media calls */
#define ATTRIBUTE_TO_BUSY           0x002000    /* Supports output until busy */
#define ATTRIBUTE_IOCTL             0x004000    /* Supports IOCTL read/write */
#define ATTRIBUTE_CHAR              0x008000    /* Character mode device */
#define ATTRIBUTE_FAT12             0x010000    /* Supports FAT12 */
#define ATTRIBUTE_FAT16             0x020000    /* Supports FAT16 */
#define ATTRIBUTE_FAT32             0x040000    /* Supports FAT32 */
#define ATTRIBUTE_FIXED_DRIVE       0x400000    /* Non removable block device */
#define ATTRIBUTE_REMOTE_DRIVE      0x800000    /* Remote block device */

/* Misc. system interface structures */

typedef struct {
    unsigned int    Reserved[3];                /* For internal use */
    void            ( *OutBYTE )( int, int );   /* Pointer to handler for 8-bit trapped I/O output */
    void            ( *OutWORD )( int, int );   /* Pointer to handler for 16-bit trapped I/O output */
    void            ( *OutDWORD )( int, int );  /* Pointer to handler for 32-bit trapped I/O output */
    int             ( *InBYTE )( int );         /* Pointer to handler for 8-bit trapped I/O input */
    int             ( *InWORD )( int );         /* Pointer to handler for 16-bit trapped I/O input */
    int             ( *InDWORD )( int );        /* Pointer to handler for 32-bit trapped I/O input */
} IOTRAP;

typedef struct {
    unsigned int    EDI, ESI, EBP, EntryESP, EBX, EDX, ECX, EAX;
    int             TaskES, TaskDS;             /* Task ES and DS or 0 if V86 task */
    unsigned short  ErrorCode;                  /* Error code */
    unsigned short  Exception;                  /* Exception number */
    unsigned int    EIP, CS, EFLAGS;            /* Faulting task EIP, CS and EFLAGS */
    unsigned int    ESP, SS;                    /* Only if user task */
    unsigned int    ES, DS, FS, GS;             /* Only if V86 task */
} EXCEPTION;

typedef struct {
    void            *Linear;                    /* Linear address of buffer */
    unsigned int    Physical;                   /* Physical address of buffer */
    int             Size;                       /* Size of buffer in bytes */
} DMABUF;

#ifndef _ZDOS_H_INCLUDED
typedef struct {
    unsigned char   SPC;                        /* Sectors Per Cluster */
    unsigned char   NFAT;                       /* Number of FATs */
    unsigned char   MD;                         /* Media Descriptor */
    unsigned char   FSID;                       /* File System ID */
    unsigned int    BPS;                        /* Bytes Per Sector */
    unsigned int    RS;                         /* Reserved Sectors */
    unsigned int    MDE;                        /* Max Directory Entries */
    unsigned int    SPF;                        /* Sectors Per Fat */
    unsigned int    SPT;                        /* Sectors Per Track */
    unsigned int    NH;                         /* Number of Heads */
    unsigned int    HS;                         /* Hidden Sectors */
    unsigned int    TS;                         /* Total Sectors */
} BPB;
#endif

typedef struct {
    unsigned int    Reserved[2];                /* Reserved by ZDOS */
} DEVLOCK;

typedef struct {
    unsigned int    Reserved[4];                /* Reserved by ZDOS */
} CPULOCK;

/* Device driver header and request blocks */

typedef struct _DEVICE {
    struct _DEVICE  *Next;                      /* Pointer to next device driver */
    unsigned int    Attributes;                 /* Device driver attributes */
    unsigned int    Interrupt;                  /* Pointer to interrupt routine */
    char            Name[8];                    /* Device name */
} DEVICE;

/* Generic request header for commands 5,6,7,10,11,13,14,15,23 and 24. */

typedef struct {
    unsigned char   Length;                     /* Request block length */
    unsigned char   Unit;                       /* Unit number if block I/O */
    unsigned char   Command;                    /* Device driver command */
    unsigned char   Result;                     /* Returned BYTE */
    unsigned int    Status;                     /* Device driver return status */
} IO_REQUEST;

/* Request header definition for INITIALIZE command (0) */

typedef struct {
    unsigned char   Length;                     /* Request block length */
    unsigned char   Unit;                       /* Unit number if block I/O */
    unsigned char   Command;                    /* Device driver command */
    unsigned char   Units;                      /* Number of units supported by device driver */
    unsigned int    Status;                     /* Device driver return status */
    unsigned int    Break;                      /* Device driver break address */
    BPB             **BPBs;                     /* Pointer to an array of BPB pointers for supported units */
} IO_INIT;

/* Request header definition for MEDIA_CHECK command (1) */

typedef struct {
    unsigned char   Length;                     /* Request block length */
    unsigned char   Unit;                       /* Unit number if block I/O */
    unsigned char   Command;                    /* Device driver command */
    unsigned char   Media;                      /* Media status */
    unsigned int    Status;                     /* Device driver return status */
    char            *Volume;                    /* Pointer to volume label */
} IO_MEDIA;

/* Request header definition for BUILD_BPB command (2) */

typedef struct {
    unsigned char   Length;                     /* Request block length */
    unsigned char   Unit;                       /* Unit number if block I/O */
    unsigned char   Command;                    /* Device driver command */
    unsigned char   Reserved;                   /* Reserved */
    unsigned int    Status;                     /* Device driver return status */
    BPB             *PointerToBPB;              /* Pointer to BPB */
} IO_BUILD;

/* Generic request header definition for commands 3,4,8,9,12 and 16. */

typedef struct {
    unsigned char   Length;                     /* Request block length */
    unsigned char   Unit;                       /* Unit number if block I/O */
    unsigned char   Command;                    /* Device driver command */
    unsigned char   Reserved;                   /* Reserved */
    unsigned int    Status;                     /* Device driver return status */
    void            *Buffer;                    /* Pointer to buffer */
    unsigned int    Count;                      /* Transfer count */
    unsigned int    Sector;                     /* Start sector if block transfer */
} IO_TRANSFER;

/* Generic request header definition for commands 19 and 25. */

typedef struct {
    unsigned char   Length;                     /* Request block length */
    unsigned char   Unit;                       /* Unit number if block I/O */
    unsigned char   Command;                    /* Device driver command */
    unsigned char   Reserved;                   /* Reserved */
    unsigned int    Status;                     /* Device driver return status */
    void            *Buffer;                    /* Pointer to buffer */
    unsigned char   Major;                      /* Major function number */
    unsigned char   Minor;                      /* Minor function number */
    unsigned char   Filler[2];                  /* For alignment */
} IO_IOCTL;

/* File system driver header */

typedef struct _FSD {
    struct _FSD     *Next;                      /* Pointer to next file system driver */
    unsigned int    Dispatcher;                 /* Pointer to dispatcher routine */
    char            Name[8];                    /* File system name */
} FSD;

/* Hardware driver header */

typedef struct _HWD {
    struct _HWD     *Next;                      /* Pointer to next hardware driver */
    char            Name[8];                    /* Hardware driver name */
} HWD;

/* Memory management functions */

int             DosAllocateHeapBlock( int size, void **block );
int             DosAllocateHeapBlocks( int size, void **block, int count );
int             DosFreeHeapBlock( void *block );
int             DosReallocateHeapBlock( void *oldblk, int newsize,
                                        void **newblk );
int             DosAllocatePages( int pages, void **block );
int             DosFreePages( void *block );
int             DosReallocatePages( void *block, int pages );
int             DosValidateUserBlock( void *block, unsigned size );
int             DosAllocatePciBlock( int numpages, unsigned *physical,
                                     void **linear );
int             DosFreePciBlock( void *linear );
int             DosLinearToPhysical( void *linear, unsigned *physical );
int             DosCopyBytes( void *dst, void *src, int length );
int             DosCopyWords( void *dst, void *src, int length );

/* Parameter overrides for the copy functions above */

#pragma aux     DosCopyBytes parm [EDI][ESI][ECX];
#pragma aux     DosCopyWords parm [EDI][ESI][ECX];

/* Misc. system functions */

int             DosHookIsaPorts( unsigned ioend, unsigned iobase,
                                 IOTRAP *iotrap );
int             DosUnhookIsaPorts( unsigned iobase );
int             DosHookPciPorts( IOTRAP *iotrap, unsigned iobase );
int             DosUnhookIsaPorts( unsigned iobase );
void            ( __cdecl *DosGetKernelVector ( int i ) )( struct context_t );
void            DosSetKernelVector( int i,
                                    void (__cdecl *h)(struct context_t) );
void            ( *DosGetUserVector( int i ) )( EXCEPTION * );
void            DosSetUserVector( int i, void ( *handler )( EXCEPTION * ) );
unsigned        DosGetIvtVector( int intnum );
void            DosSetIvtVector( int intnum, unsigned vector );
int             DosAllocateV86FarTrap( void ( *handler )( EXCEPTION * ),
                                       unsigned *callback );
int             DosAllocateV86IntTrap( void ( *handler )( EXCEPTION * ),
                                       unsigned *callback );
int             DosFreeV86Trap( int handle );
int             DosAllocateUserTrap( void ( *handler )( EXCEPTION * ),
                                     unsigned *callback );
int             DosFreeUserTrap( int handle );
void            ( *DosHookPageFaultTrap( void ( *handler )( void ) ) )( void );

/* Misc. driver support functions */

int             DosAllocateDmaBuffer( int pages );
int             DosFreeDmaBuffer( int handle );
int             DosLockDmaBuffer( int handle, DMABUF *dmabuf );
int             DosOpenDmaChannel( int channel, DMABUF **dmabuf, int size );
int             DosCloseDmaChannel( int channel );
int             DosStartDmaTransfer( int channel, int type, int mode,
                                     int count, void *buffer );
int             DosFinishDmaTransfer( int channel );
int             DosAllocateDeviceBlock( unsigned physical, int pages,
                                        void **block );
int             DosFreeDeviceBlock( void *block );
int             DosAllocateIrq( int irq, void ( *handler )( void ) );
int             DosFreeIrq( int irq );
int             DosShareIrq( int irq, void ( *handler )( void ),
                             void ( **oldhandler )( void ) );
int             DosEndOfInterrupt( int irq );
int             DosLockDevice( DEVLOCK *devicelock );
void            DosUnlockDevice( DEVLOCK *devicelock );
int             DosLockCpu( CPULOCK *cpulock );
int             DosUnlockCpu( CPULOCK *cpulock );
void            DosConsoleMessage( const char *message );
void __cdecl    DosConsolePrint( const char *message, ... );

/* File system management functions */

int             DosRegisterFileSystem( FSD *header, char *name );
int             DosQueryFileSystemID( char *name );
int             DosQueryFileSystemName( int id, char **name );

#pragma pack(__pop);

#ifdef __cplusplus
};
#endif /* __cplusplus */
#endif
