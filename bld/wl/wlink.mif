# the linker master make file
#
# This depends on the following projects:
# orl, plusplus, dwarf, watcom, trmem and stkdepth

proj_name = wlink
!include cproj.mif
!include wres.mif

!ifndef patch_level
patch_level=0
!endif

# first, set up the list of object files

template = &
autogrp.$(ext) &
carve.$(ext) &
comdef.$(ext) &
cmdall.$(ext) &
cmddos.$(ext) &
cmdelf.$(ext) &
cmdline.$(ext) &
cmdnov.$(ext) &
cmdos2.$(ext) &
cmdphar.$(ext) &
cmdtable.$(ext) &
cmdutils.$(ext) &
cmdqnx.$(ext) &
dbgall.$(ext) &
dbgcv.$(ext) &
dbgdwarf.$(ext) &
dbginfo.$(ext) &
debug.$(ext) &
distrib.$(ext) &
global.$(ext) &
hash.$(ext) &
impexp.$(ext) &
libr.$(ext) &
libsupp.$(ext) &
linkutil.$(ext) &
loaddos.$(ext) &
loadelf.$(ext) &
loadelf2.$(ext) &
loadfile.$(ext) &
loadflat.$(ext) &
loadnov.$(ext) &
loados2.$(ext) &
loadpe.$(ext) &
loadphar.$(ext) &
loadqnx.$(ext) &
mapio.$(ext) &
mixcache.$(ext) &
msg.$(ext) &
objio.$(ext) &
obj2supp.$(ext) &
objcalc.$(ext) &
objfree.$(ext) &
objnode.$(ext) &
objomf.$(ext) &
objorl.$(ext) &
objpass1.$(ext) &
objpass2.$(ext) &
objstrip.$(ext) &
omfreloc.$(ext) &
overlays.$(ext) &
ovlsupp.$(ext) &
permdata.$(ext) &
procfile.$(ext) &
reloc.$(ext) &
ring.$(ext) &
ring2.$(ext) &
salloc.$(ext) &
spillio.$(ext) &
strtab.$(ext) &
symmem.$(ext) &
symtab.$(ext) &
symtrace.$(ext) &
toc.$(ext) &
wlink.$(ext) &
wlnkmsg.$(ext) &
demangle.$(ext) &
exerespe.$(ext) &
sharedio.$(ext) &
rcstr.$(ext)

ext = obj
c_objs = $+$(template)$-

stub_objs = dlldrvr.obj stubidedrv.obj idemsgfm.obj drvmsgpr.obj

!ifeq host_CPU 386
!    define obj_dir o
!    define dwarf_lib $(dwarf_dir)\dw\$(obj_dir)\dwf.lib
!    ifdef wlink_rtdll
!       ifeq wlink_rtdll 1
!           define obj_dir o.dll
!           define dwarf_lib $(dwarf_dir)\dw\$(obj_dir)\dwfdll.lib
!       endif
!    endif
!else
!   define obj_dir axp
!   define dwarf_lib $(dwarf_dir)\dw\$(obj_dir)\dw.lib
!endif

libs += &
$(wres_lib) &
$(dwarf_lib) &
$(orl_dir)\$(obj_dir)\orl.lib

!ifeq host_OS dos
extra_objs = linkio.obj virtmem.obj
!else
!ifeq host_OS qnx
extra_objs = posixio.obj virtmem.obj
!else
extra_objs = ntio.obj virtpage.obj
!endif
!endif

!ifeq sys_dll 1
extra_objs += dllentry.obj idemsgpr.obj idedrv.obj
!endif

!ifeq wlink_trmem 1
!ifeq host_CPU 386
extra_objs += dmem.obj trmem.obj
!else
extra_objs += amem.obj trmem.obj
!endif
!else
extra_objs += mem.obj
!endif

# now get all of the c flags set properly

!ifneq release_wlink 1
cflags_axp = -hc
!endif

cflags_386 =                    # get rid of the -zc
cflags_all = -w4 -we -zq -zp4
wcl_util_opts = -ox -zq

extra_c_flags_ntio = /i=$(wres_dir)\h
extra_c_flags_posixio = /i=$(wres_dir)\h
extra_c_flags_linkio = /i=$(wres_dir)\h
extra_c_flags_objorl = /i=$(orl_dir)\h
extra_c_flags_dbgdwarf = /i=$(dwarf_dir)\dw\h
extra_c_flags_loadpe = /i=..\h;$(wrc_dir)\h;$(wres_dir)\h /dINSIDE_WLINK
extra_c_flags_loados2 = /i=$(wres_dir)\h

exe_cflags = $+$(cflags)$-

!ifeq sys_dll 1
cflags_all += -bd
!endif

# now get all of the linker flags set properly

ldebug_386 = debug dwarf  # file $(stkdepth_dir)\stkd386.lib

extra_l_flags =  op map=wl,verbose,static,noredefs libpath $(watcom_dir)\lib
extra_l_flags += l { $(libs) }

#!ifdef on_build_machine
#extra_l_flags += op quiet
#!endif

!ifdef wlink_extralnk
extra_l_flags += $(wlink_extralnk)
!endif

#!ifdef nec
#lflags_dos_386 = sys dos4g
#!else
#lflags_dos_386 = sys causeway
#!endif
extra_l_flags_qnx = op res=wlink.u, st=24k, off=32k

!ifeq sys_dll 1
extra_l_flags_nt = op modname='wlink.dll' reference __DLLstart_
extra_l_flags_nt += op offset=0x69c00000
extra_l_flags_os2 = op modname='wlink'
lflags_os2_386 = sys os2v2 dll initinstance terminstance
lflags_nt_386 = sys nt_dll initinstance terminstance
lflags_nt_axp = sys ntaxp_dll initinstance terminstance
exe_lflags_nt_axp       = sys ntaxp
exe_lflags_nt_386       = sys nt
exe_lflags_os2_386      = sys os2v2
extend = dll
!else
extend = exe
!endif

# and finally, the miscellaneous macro definitions

inc_dirs = ..\h;$(watcom_dir)\h;$(lang_root)\h;$(inc_dirs_sys_$(host_os))

!ifndef execomp
execomp = $(cc) -i$(inc_dirs)
!endif

compile = $(cc) $(cflags) $[@ -i$(inc_dirs)

!ifeq host_OS qnx
extra_rc_flags = /d_QNX
!endif

.extensions:
.extensions: .exe .obj .c .mif

.mif : $(mif_path)

.c: ..\c

!include defrule.mif

lnk = tmp.lnk

exe = $(bin_prefix)wl.$(extend)
stubexe = $(bin_prefix)wlstub.exe

$(exe) : global.chk $(c_objs) $(extra_objs) $(libs) wlink.res
    @%make wlink.res
    @%create $(lnk)
    @%append $(lnk) $(lflags)
    @%append $(lnk) name $^@
    @%append $(lnk) file { $(c_objs) $(extra_objs) }
    $(linker) @$(lnk)
!ifeq host_OS dos
!ifdef nec
!else
    #x32fix $(exe)
!endif
!endif
!ifeq sys_dll 1
!ifdef add_version_info
    %make version.rc
    @set include=$(inc_path)
    $(rc) -q -bt=$(host_OS) version.rc $^@
!endif
    %make $(stubexe)
!endif
    wstrip /q /a /r $@ . wlink.res

slnk = stub.lnk

$(stubexe) : $(stub_objs)
    if exist wlink.lib del wlink.lib
    $(librarian) wlink.lib $(exe)
    @%create $(slnk)
    @%append $(slnk) $(mode_lflags) $(exe_lflags_$(host_OS)_$(host_CPU))
    @%append $(slnk) file { $(stub_objs) }
    @%append $(slnk) name $^@
    @%append $(slnk) lib wlink.lib op map=wlstub,noredefs
!ifdef on_build_machine
    @%append $(slnk) op quiet
!endif
    $(linker) @$(slnk)

version.rc : ..\h\wlver.rc
    $(bld_cl) $(fe_misc_dir)\c\genverrc.c $(wcl_util_opts) -d_VERSION=$(bld_ver)
    genverrc ..\h\wlver.rc version.rc $$ wlink.dll $(patch_level)
    del genverrc.*

trmem.obj : $(trmem_dir)\trmem.c
        $(compile) /i=$(trmem_dir)

dmem.obj : mem.c
        $(compile) /dTRACKER /fo=dmem.obj /of+ /i=$(trmem_dir)

amem.obj : mem.c
        $(compile) /dTRACKER /fo=amem.obj /i=$(trmem_dir)

cmdutils.obj : cmdutils.c ..\h\link.h
        $(compile)

mapio.obj : mapio.c ..\h\msg.h
        $(compile)

msg.obj : msg.c ..\h\msg.h ..\h\wlnkmsg.h
        $(compile) /i=$(lib_misc_dir)\h

dllentry.obj : dllentry.c $(watcom_dir)\h\idedll.h
        $(compile) /i=$(lang_root)\h\$(host_OS)

stubidedrv.obj : $(watcom_dir)\c\idedrv.c $(watcom_dir)\h\idedll.h
        $(execomp) $(exe_cflags) $[@ -dSTATIC_LINKAGE -fo=stubidedrv.obj

idedrv.obj : $(watcom_dir)\c\idedrv.c $(watcom_dir)\h\idedll.h
        $(compile) -dCHAIN_CALLBACK

idemsgfm.obj : $(watcom_dir)\c\idemsgfm.c $(watcom_dir)\h\idedll.h
        $(execomp) $(exe_cflags) $[@

drvmsgpr.obj : $(watcom_dir)\c\idemsgpr.c $(watcom_dir)\h\idedll.h
        $(execomp) $(exe_cflags) $[@ /fo=drvmsgpr.obj

idemsgpr.obj : $(watcom_dir)\c\idemsgpr.c $(watcom_dir)\h\idedll.h
        $(compile)

dlldrvr.obj : dlldrvr.c  $(watcom_dir)\h\idedll.h
        $(execomp) $(exe_cflags) $[@

wlnkmsg.obj : wlnkmsg.c ..\h\wlnkmsg.h
        $(compile)

global.obj : global.c ..\h\globals.h ..\h\specials.h
        $(compile)

cmdline.obj : cmdline.c ..\h\whoami.h
        $(compile)

ring2.obj : ring.c
        $(compile) /dPARAM2 /fo=ring2.obj

demangle.obj : $(lib_misc_dir)\c\demangle.c
        $(compile) /i=$(lib_misc_dir)\h

exerespe.obj : $(wrc_dir)\c\exerespe.c
        $(cc) $(cflags) $[@ -i$(wrc_dir)\h;$(wres_dir)\h;$(watcom_dir)\h /dINSIDE_WLINK -i$(inc_dirs)
#        $(compile) -i$(wrc_dir)\h;$(wres_dir)\h;$(watcom_dir)\h /dINSIDE_WLINK

sharedio.obj : $(wrc_dir)\c\sharedio.c
        $(cc) $(cflags) $[@ -i$(wrc_dir)\h;$(wres_dir)\h;$(watcom_dir)\h /dINSIDE_WLINK -i$(inc_dirs)
#        $(compile) -i$(wrc_dir)\h;$(wres_dir)\h;$(watcom_dir)\h /dINSIDE_WLINK

rcstr.obj : $(wrc_dir)\c\rcstr.c
        $(compile) -i$(wrc_dir)\h;$(wres_dir)\h;$(watcom_dir)\h -fi=..\h\wlrcmem.h /dINSIDE_WLINK

wlink.res : ..\h\wlink.rc ..\h\lnkerror.rc ..\h\wlnkmsg.h ..\h\lnkerror.msg ..\h\wlink.msg ..\h\rcmsg.h
        $(rc) /zk /r /bt=windows $(extra_rc_flags) /fo=$^@ ..\h\wlink.rc /i=$(watcom_dir)\h

..\h\rcmsg.h : $(wrc_dir)\h\rc.msg
        copy $(wrc_dir)\h\rc.msg ..\h\rc.msg
        vi -q -i -s $(sdk_dir)\misc\msgtoh.vi -p"tmp.h" ..\h\rc.msg
        vi -q -i -s ..\h\rcrebase.vi tmp.h
        copy tmp.h ..\h\rcmsg.h
        del tmp.h

clean: .SYMBOLIC .EXPLICIT
        @if exist *.?bj del *.?bj
        @%make killnonobj

killnonobj: .SYMBOLIC .EXPLICIT
        @if exist *.lnk del *.lnk
        @if exist *.exe del *.exe
        @if exist *.dll del *.dll
        @if exist *.lib del *.lib
        @if exist *.res del *.res
        @if exist *.err del *.err
        @if exist *.map del *.map
        @if exist *.lst del *.lst
        @if exist *.tmp del *.tmp
        @if exist *.ilk del *.ilk
        @if exist *.sym del *.sym
        @if exist grok*.* del grok*.*
        @if exist ..\h\rcmsg.h del ..\h\rcmsg.h

global.chk : ..\compile.gbl
    @%make clean
    wtouch -f $[@ $^@
