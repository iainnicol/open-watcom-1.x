proj_name = cvpack

inc_dirs = $(watcom_dir)\h;$(dev_dir)\$(proj_name)\hpp

extra_c_flags = -xs
extra_l_flags = name $(exe_file) op map #option eliminate

!include cproj.mif

.BEFORE
    set include=$(inc_path)

!include deftarg.mif
!include defrule.mif

exe_file = $(proj_name).exe

h_dir = $(dev_dir)\$(proj_name)\hpp\
cpp_dir = $(dev_dir)\$(proj_name)\cpp\
makefile = $(dev_dir)\$(proj_name)\master.mif

object_files =  cvpack.obj retrieve.obj cverror.obj packtype.obj
object_files += subsect.obj cssymbol.obj makeexe.obj symdis.obj
object_files += typemap.obj typearray.obj typerecord.obj common.obj

common_include = $(h_dir)common.hpp $(h_dir)cverror.hpp $(makefile)

object_list = cvpack.obj,retrieve.obj,cverror.obj,packtype.obj,subsect.obj
object_list += ,cssymbol.obj,makeexe.obj,symdis.obj,typemap.obj
object_list += ,typearray.obj,typerecord.obj,common.obj

.EXTENSIONS:
.EXTENSIONS: .exe .obj .asm .cpp .hpp

#lflags = sys $(host_OS) debug dwarf option symfile=$(proj_name).sym name $(exe_file)
$(exe_file) : $(object_files) $(makefile)
    $(linker) $(lflags) FILE $(object_list)

.cpp : $(cpp_dir)
.hpp : $(h_dir)
.cpp.obj : .AUTODEPEND
    $(cpp) $(cflags) $(extra_c_flags_$[&) $[@
