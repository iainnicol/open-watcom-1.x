!ifeq cpu ppc
as_cpu          = AS_PPC
as_prog_suffix  = ppc
!else   # alpha
as_cpu          = AS_ALPHA
as_prog_suffix  = axp
!endif

proj_name = was$(as_prog_suffix)
name = $(proj_name)

.extensions: .rc .y .re .gh .msg

.c: $(as_dir)/$(cpu)/c;$(as_dir)/c;$(trmem_dir);$(cpp_dir)
.h: $(as_dir)/$(cpu)/h;$(as_dir)/h;$(trmem_dir);$(cpp_dir)
.y: $(as_dir)/$(cpu)/y;$(as_dir)/y
.re: $(as_dir)/$(cpu)/y;$(as_dir)/y
.rc: $(as_dir)/h
.gh: .
.msg: $(as_dir)/h

!include cproj.mif
!include defrule.mif

!include wres.mif

obj             = .obj
exe             = .exe

yacc_flags      = -b -d
#yacc_flags     = -d -q
#yacc_flags     = -b -d -f -u
#yacc_flags     = -b "y" -l -v
yacc_src        = as.y
yacc_in         = as_in.y
yacc_out_c      = asytab
yacc_out_h      = asytab.h

lex_flags       =
lex_src         = scan.re
lex_in          = scan_in.re
lex_out_c       = aslexyy
lex_out_h       =

splice_opts     = -k$(as_cpu)
!ifndef inline_as
splice_opts     += -k_STANDALONE_
!endif

exe_deps_osi = $(bld_bin)\os2ldr.exe

libs = $(owl_dir)/o.$(host_cpu)/owl.lib $(wres_lib)

extra_defines           = -d$(as_cpu)
!ifndef inline_as
extra_defines           += -d_STANDALONE_
!endif

extra_c_flags           = $(extra_defines)

as_trmem_flag_386       = -of+

!ifeq release 0
as_trmem                = -dTRMEM $(as_trmem_flag_$(host_cpu))
as_yydebug              = -dYYDEBUG=1
!endif

extra_c_flags_asitest   = $(as_trmem)
extra_c_flags_asmem     = -fh=asmem.pch $(as_trmem)
extra_c_flags_trmemcvr  = -fh=trmemcvr.pch $(as_trmem)
extra_c_flags_trmem     = -fh=trmem.pch $(as_trmem)
extra_c_flags_asytab    = -fh=asytab.pch $(as_yydebug)
extra_c_flags_aslexyy   = -fh=aslexyy.pch
extra_c_flags_preproc   = -fh=preproc.pch
extra_c_flags_ppexpr    = -fh=ppexpr.pch
extra_c_flags_ppmacro   = -fh=ppmacro.pch
extra_c_flags_ppmem     = -fh=ppmem.pch

extra_c_flags_asexpr    = -fh
extra_c_flags_asopernd  = -fh
extra_c_flags_asutils   = -fh
extra_c_flags_alphafmt  = -fh
extra_c_flags_alphains  = -fh
extra_c_flags_asregs    = -fh
extra_c_flags_assymbol  = -fh
extra_c_flags_asdrectv  = -fh
extra_c_flags_asdirop   = -fh
extra_c_flags_asnumlab  = -fh
extra_c_flags_asmsg     = -fh
extra_c_flags_asmsgj    =
extra_c_flags_ashash    = -fh
extra_c_flags_asinline  = -fh
extra_c_flags_asiobj    = -fh
extra_c_flags_main      = -fh
extra_c_flags_obj       = -fh
extra_c_flags_sections  = -fh
extra_c_flags_options   = -fh
extra_c_flags_ppcfmt    = -fh
extra_c_flags_ppcins    = -fh

extra_l_flags           = option map
!ifndef inline_as
extra_l_flags           += library { $(libs) }
!endif

inc_dirs = $(as_dir)/$(cpu)/h;$(as_dir)/h;$(owl_dir)/h;$(cpp_dir);$(watcom_dir)/h;$(trmem_dir)

.before:
        @set include=$(inc_path)

as_comm_objs    = $(yacc_out_c)$(obj) &
                  $(lex_out_c)$(obj) &
                  asexpr$(obj) &
                  asopernd$(obj) &
                  asmem$(obj) &
                  asutils$(obj) &
                  $(cpu)fmt$(obj) &
                  $(cpu)ins$(obj) &
                  asregs$(obj) &
                  assymbol$(obj) &
                  asdrectv$(obj) &
                  asdirop$(obj) &
                  asnumlab$(obj) &
                  asmsg$(obj) &
                  ashash$(obj)

as_stand_objs   = main$(obj) &
                  obj$(obj) &
                  sections$(obj) &
                  options$(obj) &
                  preproc$(obj) &
                  ppexpr$(obj) &
                  ppmacro$(obj) &
                  ppmem$(obj) &
                  trmemcvr$(obj)
!ifeq release 0
as_stand_objs   += trmem$(obj)
!endif

as_inline_objs  = asinline$(obj) &
                  asiobj$(obj)

as_objs         = $(as_comm_objs) $(as_stand_objs)

asi_objs        = $(as_comm_objs) $(as_inline_objs)

asi_test_objs   = asitest$(obj) trmemcvr$(obj)
!ifeq release 0
asi_test_objs   += trmem$(obj)
!endif

asi_lib     = $(as_dir)/$(cpu)/inline/o.$(host_cpu)/asinline.lib
asi_lib_j   = $(as_dir)/$(cpu)/inline/o.$(host_cpu)/asinlinj.lib
!ifdef test_inline_as
asi_test_name = asinline

$(asi_test_name)$(exe) : $(asi_test_objs) $(asi_lib)
        $(linker) $(lflags) name $@ file { $(asi_test_objs) } lib $(asi_lib)

$(asi_lib) :
        cd $(as_dir)\$(cpu)\inline\o.$(host_cpu)
        wmake -h
        cd $(as_dir)\$(cpu)\inline\o.$(host_cpu)\test
!endif

!ifdef asi_build_lib
all_lib : $(asi_lib) $(asi_lib_j) .symbolic

$(asi_lib) : $(asi_objs)
        @rm -f $^&.lbc
        @for %i in ($<) do @%append $^&.lbc -+%i
        $(librarian) -b $^@ @$^&.lbc

$(asi_lib_j) : $(asi_lib) asmsgj$(obj)
        cp $[@ $^@
        $(librarian) -b $^@ -asmsg.obj
        $(librarian) -b $^@ +asmsgj.obj
!endif

$(name)$(exe) : msg.gh $(as_objs) $(libs) $(exe_deps_$(host_os)) $(name).res
        $(linker) $(lflags) name $@ file { $(as_objs) } op symfile
!ifeq host_os osi
        $(bld_bin)\w32bind $(name).rex $(name)$(exe) $(bld_bin)\os2ldr.exe
        erase $(name).rex
!endif
        wstrip -q -a -r $^@ . $(name).res

!ifndef inline_as
$(name).res : as.rc msg.gh
        $(rc_aui) $(extra_defines) -i"$(as_dir)/h" $[@ -fo=$^@
!else
$(asi_objs) : msg.gh
!endif

msg.gh : ./mkstrid.exe
        $[@ $^@

./mkstrid.exe : mkstrid.c as.msg
        $(bld_cl) $(wcl_util_opts) $(extra_defines) $[@

$(yacc_in) : $(yacc_src) $(as_dir)/y/yydriver.c
        wsplice $(splice_opts) $[@ $^@

$(yacc_out_c).c $(yacc_out_h) : $(yacc_in)
        $(yacc) $(yacc_flags) $[@ $(as_dir)/y/yydriver.c > $(nulldevice)
        $(vi) -s $(as_dir)/mif/asyy.vi -p"$(yacc_out_c).c" ytab.c
        $(vi) -s $(as_dir)/mif/asyy.vi -p"$(yacc_out_c).h" ytab.h
        # $(yacc) $(yacc_flags) $[@

$(lex_in) : $(lex_src)
        wsplice $(splice_opts) $[@ $^.

.ERASE
$(lex_out_c).c $(lex_out_h) : $(lex_in)
        $(re2c) $(lex_flags) $[@ > $^.

clean: .symbolic .explicit
        rm -f *.obj $(name)$(exe)
!ifdef test_inline_as
        rm -f $(asi_test_name)$(exe)
!endif
        rm -f *.err del *.err *.map *.pch *.lib *.lbc ytab.* *.res *.sym *.tmp
        rm -f $(lex_in) $(lex_out_c).c $(yacc_in) $(yacc_out_c).c $(yacc_out_h)
        rm -f msg.gh mkstrid.exe
