!ifeq cpu ppc
as_cpu          = AS_PPC
as_prog_suffix  = ppc
!else   # alpha
as_cpu          = AS_ALPHA
as_prog_suffix  = axp
!endif

proj_name = was$(as_prog_suffix)
name = $(proj_name)

.extensions:
.extensions: .qnx .exe .exp .obj .asm .rc .c .y .re .h .gh .msg
.extensions: .mif

.c: $(as_dir)\$(cpu)\c;$(as_dir)\c;$(trmem_dir);$(cpp_dir)
.h: $(as_dir)\$(cpu)\h;$(as_dir)\h;$(trmem_dir);$(cpp_dir)
.y: $(as_dir)\$(cpu)\y;$(as_dir)\y
.re: $(as_dir)\$(cpu)\y;$(as_dir)\y
.rc: $(as_dir)\h
.gh: .
.msg: $(as_dir)\h
.mif: $(mif_path)

!include cproj.mif
!include defrule.mif

!include wres.mif

obj             = .obj
exe             = .exe

yacc_flags      = -b -d
#yacc_flags     = -d -q
#yacc_flags     = -b -d -f -u
#yacc_flags     = -b "y" -l -v
yacc_src        = as.y
yacc_in         = as_in.y
yacc_out_c      = asytab
yacc_out_h      = asytab.h

lex_flags       =
lex_src         = scan.re
lex_in          = scan_in.re
lex_out_c       = aslexyy
lex_out_h       =

splice_opts     = -k$(as_cpu)
!ifndef inline_as
splice_opts     += -k_STANDALONE_
!endif

exe_deps_osi = $(bld_bin)\os2ldr.exe

libs = $(owl_dir)\o.$(host_CPU)\owl.lib $(wres_lib)

extra_defines           = -d$(as_cpu)
!ifndef inline_as
extra_defines           += -d_STANDALONE_
!endif
!ifeq release 1
extra_defines           += -dNDEBUG
!endif

extra_c_flags           = -fhq $(extra_defines)

as_trmem_flag_386       = -of+

!ifeq release 0
as_trmem                = -dTRMEM $(as_trmem_flag_$(host_CPU))
as_yydebug              = -dYYDEBUG=1
!endif

extra_c_flags_asitest   = $(as_trmem)
extra_c_flags_asmem     = -fhq=asmem.pch $(as_trmem)
extra_c_flags_trmemcvr  = -fhq=trmemcvr.pch $(as_trmem)
extra_c_flags_trmem     = -fhq=trmem.pch $(as_trmem)
extra_c_flags_asytab    = -fhq=asytab.pch $(as_yydebug)
extra_c_flags_aslexyy   = -fhq=aslexyy.pch
extra_c_flags_preproc   = -fhq=preproc.pch
extra_c_flags_ppexpr    = -fhq=ppexpr.pch
extra_c_flags_ppmacro   = -fhq=ppmacro.pch
extra_c_flags_ppmem     = -fhq=ppmem.pch

extra_l_flags           = option map,quiet
!ifndef inline_as
extra_l_flags           += library { $(libs) }
!endif

inc_dirs = $(as_dir)\$(cpu)\h;$(as_dir)\h;$(owl_dir)\h;$(cpp_dir);$(watcom_dir)\h;$(trmem_dir)

.before:
        @set include=$(inc_path)

as_comm_objs    = $(yacc_out_c)$(obj) &
                  $(lex_out_c)$(obj) &
                  asexpr$(obj) &
                  asopernd$(obj) &
                  asmem$(obj) &
                  asutils$(obj) &
                  $(cpu)fmt$(obj) &
                  $(cpu)ins$(obj) &
                  asregs$(obj) &
                  assymbol$(obj) &
                  asdrectv$(obj) &
                  asdirop$(obj) &
                  asnumlab$(obj) &
                  asmsg$(obj) &
                  ashash$(obj)

as_stand_objs   = main$(obj) &
                  obj$(obj) &
                  sections$(obj) &
                  options$(obj) &
                  preproc$(obj) &
                  ppexpr$(obj) &
                  ppmacro$(obj) &
                  ppmem$(obj) &
                  trmemcvr$(obj)
!ifndef on_build_machine
as_stand_objs   += trmem$(obj)
!endif

as_inline_objs  = asinline$(obj) &
                  asiobj$(obj)

as_objs         = $(as_comm_objs) $(as_stand_objs)

asi_objs        = $(as_comm_objs) $(as_inline_objs)

asi_test_objs   = asitest$(obj) trmemcvr$(obj)
!ifndef on_build_machine
asi_test_objs   += trmem$(obj)
!endif

asi_lib     = $(as_dir)\$(cpu)\inline\o.$(host_CPU)\asinline.lib
asi_lib_j   = $(as_dir)\$(cpu)\inline\o.$(host_CPU)\asinlinj.lib
!ifdef test_inline_as
asi_test_name = asinline

$(asi_test_name)$(exe) : $(asi_test_objs) $(asi_lib)
        $(linker) $(lflags) name $@ file { $(asi_test_objs) } lib $(asi_lib)

$(asi_lib) :
        cd $(as_dir)\$(cpu)\inline\o.$(host_CPU)
        wmake -h
        cd $(as_dir)\$(cpu)\inline\o.$(host_CPU)\test
!endif

!ifdef asi_build_lib
all_lib : $(asi_lib) $(asi_lib_j) .symbolic

$(asi_lib) : $(asi_objs)
        @if exist $^&.clb @erase $^&.clb
        @for %i in ($<) do @%append $^&.clb -+%i
        $(librarian) -b -q $^. @$^&.clb

$(asi_lib_j) : $(asi_lib) asmsgj$(obj)
        copy $(asi_lib) $(asi_lib_j)
        $(librarian) -b -q $(asi_lib_j) -asmsg.obj
        $(librarian) -b -q $(asi_lib_j) +asmsgj.obj

asmsgj$(obj): asmsg.c
        @set include=$(inc_path)
        $(cc) $(cflags) $(extra_c_flags_$[&) $[@ /fo=$^. /dJAPANESE_MSG
!endif

$(name)$(exe) : $(as_objs) $(libs) $(exe_deps_$(host_OS)) $(name).res
        $(linker) $(lflags) name $@ file { $(as_objs) } op symfile
!ifeq host_OS osi
        $(bld_bin)\w32bind $(name).rex $(name)$(exe) $(bld_bin)\os2ldr.exe
        erase $(name).rex
!endif
        wstrip /q /a /r $^@ . $(name).res

!ifndef inline_as
$(as_objs) : msg.gh

$(name).res : as.rc msg.gh
        $(rc) /q /bt=windows /r $(extra_defines) $[@ /i$(as_dir)\h /fo=$^@
!else

$(asi_objs) : msg.gh

!endif

msg.gh : mkstrid.c as.msg
        $(bld_cl) $[@ $(cflags)
        mkstrid $^@

$(yacc_in) : $(yacc_src) $(as_dir)\y\yydriver.c
        $(bld_bin)\wsplice $(splice_opts) $[@ $^.

$(yacc_out_c).c $(yacc_out_h) : $(yacc_in)
        $(yacc) $(yacc_flags) $[@ $(as_dir)\y\yydriver.c
        vi -d -i -q -s$(as_dir)\mif\asyy.vi -p"$(yacc_out_c).c" ytab.c
        vi -d -i -q -s$(as_dir)\mif\asyy.vi -p"$(yacc_out_c).h" ytab.h
        # $(yacc) $(yacc_flags) $[@

$(lex_in) : $(lex_src)
        $(bld_bin)\wsplice $(splice_opts) $[@ $^.

.ERASE
$(lex_out_c).c $(lex_out_h) : $(lex_in)
        $(re2c) $(lex_flags) $[@ > $^.

clean: .symbolic .explicit
        @if exist *.obj del *.obj
        @if exist $(name)$(exe) del $(name)$(exe)
!ifdef test_inline_as
        @if exist $(asi_test_name)$(exe) del $(asi_test_name)$(exe)
!endif
        @if exist *.err del *.err
        @if exist *.map del *.map
        @if exist *.pch del *.pch
        @if exist *.lib del *.lib
        @if exist *.clb del *.clb
        @if exist ytab.* del ytab.*
        @if exist $(lex_in) del $(lex_in)
        @if exist $(lex_out_c).c del $(lex_out_c).c
        @if exist $(yacc_in) del $(yacc_in)
        @if exist $(yacc_out_c).c del $(yacc_out_c).c
        @if exist $(yacc_out_h) del $(yacc_out_h)
        @if exist *.res del *.res
        @if exist *.sym del *.sym
        @if exist *.tmp del *.tmp
        @if exist msg.gh del msg.gh
        @if exist mkstrid$(exe) del mkstrid$(exe)
