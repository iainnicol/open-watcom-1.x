/***************************************************************************
 * FILE: math.h/cmath (Math functions)
 *
:include crwat.sp
 *
 * Description: This header is part of the C/C++ standard library. It
 *              describes the math functions provided by those standards.
 ***************************************************************************/
:segment CNAME
#ifndef _CMATH_INCLUDED
#define _CMATH_INCLUDED

#ifndef __cplusplus
#error the header cmath requires C++
#endif
:elsesegment
#ifndef _MATH_H_INCLUDED
#define _MATH_H_INCLUDED
:endsegment

:include readonly.sp
::
:: The following somewhat long segment only appears in math.h
:segment !CNAME
#ifdef __cplusplus
#include <cmath>

// C99 functions in math.h
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::ceil;
using std::cos;
using std::cosh;
using std::exp;
using std::fabs;
using std::floor;
using std::fmod;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sin;
using std::sinh;
using std::sqrt;
using std::tan;
using std::tanh;

:include ext.sp
// C99 functions in math.h that are currently considered extensions.
using std::acosh;
using std::asinh;
using std::atanh;
using std::hypot;
using std::log2;
#endif

#else /* __cplusplus not defined */
:: End of segment that is only in math.h
:endsegment

:: Only need extern "C" in cmath
:segment CNAME
:include cpluspro.sp
:endsegment

#ifndef _COMDEF_H_INCLUDED
 #include <_comdef.h>
#endif

:include pshpackl.sp

#if defined(__FUNCTION_DATA_ACCESS)
 #define _HugeValue (*__get_HugeValue_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
  #define _HugeValue _HugeValue_br
#endif
_WCRTLINK extern const double _WCDATA _HugeValue;
#define HUGE_VAL _HugeValue

:segment CNAME
namespace std {
:endsegment
_WMRTLINK extern double ceil( double __x );
_WMRTLINK extern double floor( double __x );
_WMRTLINK extern double frexp( double __value, int *__exp );
_WMRTLINK extern double ldexp( double __x, int __exp );
_WMRTLINK extern double modf( double __value, double *__iptr );

_WMIRTLINK extern double acos( double __x );
_WMIRTLINK extern double asin( double __x );
_WMIRTLINK extern double atan( double __x );
_WMIRTLINK extern double atan2( double __y, double __x );
_WMIRTLINK extern double cos( double __x );
_WMIRTLINK extern double cosh( double __x );
_WMIRTLINK extern double exp( double __x );
_WMIRTLINK extern double fabs( double __x );
_WMIRTLINK extern double fmod( double __x, double __y );
_WMIRTLINK extern double log( double __x );
_WMIRTLINK extern double log10( double __x );
_WMIRTLINK extern double pow( double __x, double __y );
_WMIRTLINK extern double sin( double __x );
_WMIRTLINK extern double sinh( double __x );
_WMIRTLINK extern double sqrt( double __x );
_WMIRTLINK extern double tan( double __x );
_WMIRTLINK extern double tanh( double __x );
:segment CNAME
}
:endsegment

/* non-ANSI */
:include ext.sp

struct _complex {
        double  x;
        double  y;
};
#ifndef __cplusplus
struct complex {
        double  x;
        double  y;
};
#endif

:segment CNAME
namespace std {
:endsegment
_WMRTLINK extern double acosh( double __x );
_WMRTLINK extern double asinh( double __x );
_WMRTLINK extern double atanh( double __x );
_WMRTLINK extern double hypot( double __x, double __y );
_WMRTLINK extern double log2( double __x );
:segment CNAME
}
:endsegment

_WMRTLINK extern double cabs( struct _complex );
_WMRTLINK extern double j0( double __x );
_WMRTLINK extern double j1( double __x );
_WMRTLINK extern double jn( int __n, double __x );
_WMRTLINK extern double y0( double __x );
_WMRTLINK extern double y1( double __x );
_WMRTLINK extern double yn( int __n, double __x );

/* The following struct is used to record errors detected in the math library.
 * matherr is called with a pointer to this struct for possible error recovery.
 */

struct _exception {
        int     type;           /* type of error, see below */
        char    *name;          /* name of math function */
        double  arg1;           /* value of first argument to function */
        double  arg2;           /* second argument (if indicated) */
        double  retval;         /* default return value */
};
#ifndef __cplusplus
struct  exception {
        int     type;           /* type of error, see below */
        char    *name;          /* name of math function */
        double  arg1;           /* value of first argument to function */
        double  arg2;           /* second argument (if indicated) */
        double  retval;         /* default return value */
};
#endif

#define DOMAIN          1       /* argument domain error */
#define SING            2       /* argument singularity  */
#define OVERFLOW        3       /* overflow range error  */
#define UNDERFLOW       4       /* underflow range error */
#define TLOSS           5       /* total loss of significance */
#define PLOSS           6       /* partial loss of significance */

_WMRTLINK extern int    matherr( struct _exception * );
_WMRTLINK extern double _matherr( struct _exception * );
:: The 'auto' keyword was added to work around W604/W594 in the C++ compiler
#ifdef __cplusplus
_WMRTLINK void _set_matherr( auto int (*rtn)( struct _exception * ) );
#else
_WMRTLINK void _set_matherr( int (*rtn)( struct _exception * ) );
#endif
:segment !SNAP & !SNAPDRV

_WCRTLINK extern int _dieeetomsbin( double *__x, double *__y );
_WCRTLINK extern int _dmsbintoieee( double *__x, double *__y );
_WCRTLINK extern int _fieeetomsbin( float *__x, float *__y );
_WCRTLINK extern int _fmsbintoieee( float *__x, float *__y );
:endsegment

#endif /* EXTENSIONS */

:: At the time of this writing, #pragma intrinsic can't deal with
:: functions in a namespace. Thus the intrinsic declarations of the
:: math functions are not part of cmath. See bugzilla bug #379.
:segment !CNAME
#if !defined( __NO_MATH_OPS ) && defined(_M_IX86)
/*
    Defining the __NO_MATH_OPS macro will stop the compiler from recogizing
    the following functions as intrinsic operators.
*/
 #pragma intrinsic(log,cos,sin,tan,sqrt,fabs,pow,atan2,fmod)
 #pragma intrinsic(acos,asin,atan,cosh,exp,log10,sinh,tanh)
#endif
:endsegment

:include poppack.sp
:segment CNAME
:include cplusepi.sp
:endsegment

:: This #endif closes the #ifdef __cplusplus in math.h
:segment !CNAME
#endif
:endsegment

#endif
