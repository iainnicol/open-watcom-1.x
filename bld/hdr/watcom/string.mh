/*
 *  string.h    String functions
 *
:include crwat.sp
 */
#ifndef _STRING_H_INCLUDED
#define _STRING_H_INCLUDED
:include readonly.sp
:include cpluspro.sp

#ifndef _COMDEF_H_INCLUDED
 #include <_comdef.h>
#endif

:include wchar_t.sp

:include wctypet.sp

:include sizet.sp

:include null.sp

:include nlserror.sp

_WCIRTLINK extern void *memchr( const void *__s, int __c, size_t __n );
_WCIRTLINK extern int memcmp( const void *__s1, const void *__s2, size_t __n );
_WCIRTLINK extern void *memcpy( void *__s1, const void *__s2, size_t __n );
_WCRTLINK extern void *memmove( void *__s1, const void *__s2, size_t __n );
#if defined(M_I86)
_WCIRTLINK
#else
_WCRTLINK
#endif
extern void *memset( void *__s, int __c, size_t __n );
_WCIRTLINK extern char *strcat( char *__s1, const char *__s2 );
_WCIRTLINK extern char *strchr( const char *__s, int __c );
#if defined(M_I86)
_WCIRTLINK
#else
_WCRTLINK
#endif
extern int strcmp( const char *__s1, const char *__s2 );
_WCRTLINK extern int strcoll( const char *__s1, const char *__s2 );
_WCRTLINK extern int _stricoll( const char *__s1, const char *__s2 );
_WCRTLINK extern int _strncoll( const char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern int _strnicoll( const char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern size_t strxfrm( char *__s1, const char *__s2, size_t __n );
_WCIRTLINK extern char *strcpy( char *__s1, const char *__s2 );
_WCRTLINK extern size_t strcspn( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strerror( int __errnum );
_WCIRTLINK extern size_t strlen( const char *__s );
_WCRTLINK extern char *strncat( char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern int strncmp( const char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern char *strncpy( char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern char *strpbrk( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strrchr( const char *__s, int __c );
_WCRTLINK extern size_t strspn( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strspnp( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strstr( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strtok( char *__s1, const char *__s2 );

:include ext.sp

/* WATCOM's Additional Functions (non-ANSI, non-POSIX) */

#if !(defined(_fmemccpy) && _fmemccpy == _memccpy)
_WCRTLINK extern void _WCFAR *_fmemccpy( void _WCFAR *__s1, const void _WCFAR *__s2, int __c, size_t __n );
#endif
#if !(defined(_fmemchr) && _fmemchr == memchr)
_WCIRTLINK extern void _WCFAR *_fmemchr( const void _WCFAR *__s, int __c, size_t __n );
#endif
#if !(defined(_fmemcpy) && _fmemcpy == memcpy)
_WCIRTLINK extern void _WCFAR *_fmemcpy( void _WCFAR *__s1, const void _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fmemmove) && _fmemmove == memmove)
_WCRTLINK extern void _WCFAR *_fmemmove( void _WCFAR *__s1, const void _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fmemset) && _fmemset == memset)
_WCIRTLINK extern void _WCFAR *_fmemset( void _WCFAR *__s, int __c, size_t __n );
#endif
#if !(defined(_fmemcmp) && _fmemcmp == memcmp)
_WCIRTLINK extern int _fmemcmp( const void _WCFAR *__s1, const void _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fmemicmp) && _fmemicmp == _memicmp)
_WCRTLINK extern int _fmemicmp( const void _WCFAR *__s1, const void _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fstrcat) && _fstrcat == strcat)
_WCIRTLINK extern char _WCFAR *_fstrcat( char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrchr) && _fstrchr == strchr)
_WCRTLINK extern char _WCFAR *_fstrchr( const char _WCFAR *__s, int __c );
#endif
#if !(defined(_fstrcmp) && _fstrcmp == strcmp)
_WCIRTLINK extern int _fstrcmp( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrcpy) && _fstrcpy == strcpy)
_WCIRTLINK extern char _WCFAR *_fstrcpy( char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrcspn) && _fstrcspn == strcspn)
_WCRTLINK extern size_t _fstrcspn( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrdup) && _fstrdup == strdup)
_WCRTLINK extern char _WCFAR *_fstrdup( const char _WCFAR *__string );
#endif
#if !(defined(_fstricmp) && _fstricmp == _stricmp)
_WCRTLINK extern int _fstricmp( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrncat) && _fstrncat == strncat)
_WCRTLINK extern char _WCFAR *_fstrncat( char _WCFAR *__s1, const char _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fstrlen) && _fstrlen == strlen)
_WCIRTLINK extern size_t _fstrlen( const char _WCFAR *__s );
#endif
#if !(defined(_fstrlwr) && _fstrlwr == _strlwr)
_WCRTLINK extern char _WCFAR *_fstrlwr( char _WCFAR *__string );
#endif
#if !(defined(_fstrncmp) && _fstrncmp == strncmp)
_WCRTLINK extern int _fstrncmp( const char _WCFAR *__s1, const char _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fstrncpy) && _fstrncpy == strncpy)
_WCRTLINK extern char _WCFAR *_fstrncpy( char _WCFAR *__s1, const char _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fstrnicmp) && _fstrnicmp == _strnicmp)
_WCRTLINK extern int _fstrnicmp( const char _WCFAR *__s1, const char _WCFAR *__s2, size_t __n );
#endif
#if !(defined(_fstrnset) && _fstrnset == _strnset)
_WCRTLINK extern char _WCFAR *_fstrnset( char _WCFAR *__string, int __c, size_t __len );
#endif
#if !(defined(_fstrpbrk) && _fstrpbrk == strpbrk)
_WCRTLINK extern char _WCFAR *_fstrpbrk( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrrchr) && _fstrrchr == strrchr)
_WCRTLINK extern char _WCFAR *_fstrrchr( const char _WCFAR *__s, int __c );
#endif
#if !(defined(_fstrrev) && _fstrrev == _strrev)
_WCRTLINK extern char _WCFAR *_fstrrev( char _WCFAR *__string );
#endif
#if !(defined(_fstrset) && _fstrset == _strset)
_WCRTLINK extern char _WCFAR *_fstrset( char _WCFAR *__string, int __c );
#endif
#if !(defined(_fstrspn) && _fstrspn == strspn)
_WCRTLINK extern size_t _fstrspn( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrspnp) && _fstrspnp == _strspnp)
_WCRTLINK extern char _WCFAR *_fstrspnp( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrstr) && _fstrstr == strstr)
_WCRTLINK extern char _WCFAR *_fstrstr( const char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrtok) && _fstrtok == strtok)
_WCRTLINK extern char _WCFAR *_fstrtok( char _WCFAR *__s1, const char _WCFAR *__s2 );
#endif
#if !(defined(_fstrupr) && _fstrupr == _strupr)
_WCRTLINK extern char _WCFAR *_fstrupr( char _WCFAR *__string );
#endif
_WCIRTLINK extern void movedata( unsigned __srcseg, unsigned __srcoff, unsigned __tgtseg, unsigned __tgtoff, unsigned __len );
_WCRTLINK extern int bcmp( const void *__s1, const void *__s2, size_t __n );
_WCRTLINK extern void bcopy( const void *__s1, void *__s2, size_t __n );
_WCRTLINK extern void bzero( void *__s, size_t __n );
_WCRTLINK extern void *memccpy( void *__s1, const void *__s2, int __c, size_t __n );
_WCRTLINK extern int memicmp( const void *__s1, const void *__s2, size_t __n );
_WCRTLINK extern int _memicmp( const void *__s1, const void *__s2, size_t __n );
_WCRTLINK extern int strcmpi( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strdup( const char *__string );
_WCRTLINK extern char *_strdup( const char *__string );
_WCRTLINK extern char *_strerror( const char *__s );
_WCRTLINK extern int stricmp( const char *__s1, const char *__s2 );
_WCRTLINK extern int _stricmp( const char *__s1, const char *__s2 );
_WCRTLINK extern char *strlwr( char *__string );
_WCRTLINK extern char *_strlwr( char *__string );
_WCRTLINK extern int strnicmp( const char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern int _strnicmp( const char *__s1, const char *__s2, size_t __n );
_WCRTLINK extern char *strnset( char *__string, int __c, size_t __len );
_WCRTLINK extern char *_strnset( char *__string, int __c, size_t __len );
_WCRTLINK extern char *strrev( char *__string );
_WCRTLINK extern char *_strrev( char *__string );
_WCRTLINK extern char *strset( char *__string, int __c );
_WCRTLINK extern char *_strset( char *__string, int __c );
_WCRTLINK extern char *strupr( char *__string );
_WCRTLINK extern char *_strupr( char *__string );
#if defined(__NT__)
_WCRTLINK extern char *_doserror( int __oserrnum );
#endif

_WCRTLINK extern size_t wcslen( const wchar_t * );
_WCRTLINK extern wchar_t *_wcsnset( wchar_t *, int, size_t );
::_WCRTLINK extern wchar_t *wcsnset( wchar_t *, int, size_t );
_WCRTLINK extern size_t wcsspn( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t *_wcsspnp( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern size_t wcscspn( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t *wcsncat( wchar_t *, const wchar_t *, size_t );
_WCRTLINK extern int wcsncmp( const wchar_t *, const wchar_t *, size_t );
_WCRTLINK extern wchar_t *wcsncpy( wchar_t *, const wchar_t *, size_t );
_WCRTLINK extern int _wcsnicmp( const wchar_t *, const wchar_t *, size_t );
::_WCRTLINK extern int wcsnicmp( const wchar_t *, const wchar_t *, size_t );
_WCRTLINK extern wchar_t *wcschr( const wchar_t *, wint_t );
_WCRTLINK extern wchar_t *_wcsdup( const wchar_t * );
::_WCRTLINK extern wchar_t *wcsdup( const wchar_t * );
_WCRTLINK extern wchar_t *wcscat( wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t *_wcslwr( wchar_t * );
::_WCRTLINK extern wchar_t *wcslwr( wchar_t * );
_WCRTLINK extern wchar_t *_wcsupr( wchar_t * );
::_WCRTLINK extern wchar_t *wcsupr( wchar_t * );
_WCRTLINK extern wchar_t *wcscpy( wchar_t *, const wchar_t * );
_WCRTLINK extern int wcscmp( const wchar_t *, const wchar_t * );
_WCRTLINK extern int _wcsicmp( const wchar_t *, const wchar_t * );
::_WCRTLINK extern int wcsicmp( const wchar_t *, const wchar_t * );
_WCRTLINK extern int wcscoll( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern int _wcsicoll( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern int _wcsncoll( const wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern int _wcsnicoll( const wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern size_t wcsxfrm( wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern wchar_t *wcsstr( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t *wcspbrk( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t *wcstok( wchar_t *, const wchar_t *, wchar_t ** );
_WCRTLINK extern wchar_t *_wcsrev( wchar_t * );
::_WCRTLINK extern wchar_t *wcsrev( wchar_t * );
_WCRTLINK extern wchar_t *_wcsset( wchar_t *, wchar_t );
::_WCRTLINK extern wchar_t *wcsset( wchar_t *, wchar_t );
_WCRTLINK extern wchar_t *wcsrchr( const wchar_t *, wint_t );
_WCRTLINK extern int wcscmpi( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t *wcserror( int );
_WCRTLINK extern wchar_t *_wcserror( const wchar_t * );
#if defined(__NT__)
_WCRTLINK extern wchar_t *_wdoserror( int __errnum );
#endif

_WCRTLINK extern wchar_t *_ustrtok( wchar_t *, const wchar_t * );

:segment LINUX
/* Additional Linux Functions */

_WCRTLINK extern int strcasecmp( const char *__s1, const char *__s2 );
_WCRTLINK extern int strncasecmp( const char *__s1, const char *__s2, size_t __n );
:endsegment

:segment QNX
/* QNX's Additional Functions (non-ANSI, non-POSIX) */

extern void __strerror( int __max, int __errnum, char *__buf );
:endsegment
#endif  /* EXTENSIONS */

#ifdef  __INLINE_FUNCTIONS__
:include ext.sp
 #pragma intrinsic(movedata,_fmemchr,_fmemcmp,_fmemcpy,_fmemset)
 #pragma intrinsic(_fstrcat,_fstrcmp,_fstrcpy,_fstrlen)
#endif
 #pragma intrinsic(memchr,memcmp,memcpy,strcat,strcpy,strlen,strchr)
 #if defined(M_I86)
  #pragma intrinsic(memset,strcmp)
 #endif
#endif  /* __INLINE_FUNCTIONS__ */

:include cplusepi.sp
#endif
