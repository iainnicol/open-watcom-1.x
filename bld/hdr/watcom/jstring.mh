/*
 *  jstring.h   Japanese DBCS functions
 *
:include crwat.sp
 */
#ifndef _JSTRING_H_INCLUDED
#define _JSTRING_H_INCLUDED
:include readonly.sp
:include cpluspro.sp

#ifndef _COMDEF_H_INCLUDED
 #include <_comdef.h>
#endif

:include sizet.sp

:include null.sp

/*
 * definitions for chkctype(), nthctype()
 */

#define CT_ANK  0       /* ANK */
#define CT_KJ1  1       /* 漢字第１バイト */
#define CT_KJ2  2       /* 漢字第２バイト */
#define CT_ILGL -1      /* イリーガル */

typedef unsigned char JCHAR;    /* 漢字カナ用ｃｈａｒ(char for Japan) */
typedef JCHAR        *JSTRING;  /* 漢字文字列(string for Japan) */
typedef JCHAR _WCFAR *FJSTRING; /* 漢字 far 文字列(far string for Japan) */
typedef unsigned short JMOJI;   /* 漢字コード(2byte code) */

/*
 *
 *       漢字処理関数用プロトタイプ宣言
 *
 */

_WCRTLINK extern size_t _WRTLCALL btom( const JCHAR *__s, size_t __nb );
_WCRTLINK extern size_t _WRTLCALL mtob( const JCHAR *__s, size_t __nm );

_WCRTLINK extern JMOJI _WRTLCALL hantozen( JMOJI __c );
_WCRTLINK extern JMOJI _WRTLCALL zentohan( JMOJI __c );

_WCRTLINK extern int _WRTLCALL chkctype( JCHAR __c, int __n );
_WCRTLINK extern int _WRTLCALL nthctype( const JCHAR *__s, size_t __n );

_WCRTLINK extern JMOJI _WRTLCALL jtolower( JMOJI __c );
_WCRTLINK extern JMOJI _WRTLCALL jtoupper( JMOJI __c );
_WCRTLINK extern JMOJI _WRTLCALL jtohira( JMOJI __c );
_WCRTLINK extern JMOJI _WRTLCALL jtokata( JMOJI __c );

_WCRTLINK extern int _WRTLCALL jisalpha( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisdigit( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jishira( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jiskana( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jiskigou( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisl0( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisl1( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisl2( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jislower( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisprint( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisspace( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jisupper( JMOJI __c );
_WCRTLINK extern int _WRTLCALL jiszen( JMOJI __c );

_WCRTLINK extern JSTRING  _WRTLCALL jgetmoji( const JCHAR *__s, JMOJI *__c );
_WCRTLINK extern unsigned short _WRTLCALL jistojms( unsigned short __c );
_WCRTLINK extern unsigned short _WRTLCALL jmstojis( unsigned short __msc );
_WCRTLINK extern void     _WRTLCALL jperror( const char *__msg );
_WCRTLINK extern JSTRING  _WRTLCALL jputmoji( JCHAR *__s, JMOJI __c );
_WCRTLINK extern JSTRING  _WRTLCALL jstradv( const JCHAR *__s, size_t __n );
_WCRTLINK extern JSTRING  _WRTLCALL jstrcat( JCHAR *__to, const JCHAR *__from );
_WCRTLINK extern JSTRING  _WRTLCALL jstrchr( const JCHAR *__s, JMOJI __c );
_WCRTLINK extern int      _WRTLCALL jstrcmp( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern size_t   _WRTLCALL jstrcspn( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern unsigned char * _WRTLCALL jstrerror( int __errnum );
_WCRTLINK extern int      _WRTLCALL jstricmp( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern size_t   _WRTLCALL jstrlen( const JCHAR *__s );
_WCRTLINK extern JSTRING  _WRTLCALL jstrlwr( JCHAR *__s );
_WCRTLINK extern JSTRING  _WRTLCALL jstrmatch( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern JSTRING  _WRTLCALL jstrncat( JCHAR *__to, const JCHAR *__from, size_t __n );
_WCRTLINK extern int      _WRTLCALL jstrncmp( const JCHAR *__s1, const JCHAR *__s2, size_t __n );
_WCRTLINK extern JSTRING  _WRTLCALL jstrncpy( JCHAR *__to, const JCHAR *__from, size_t __n );
_WCRTLINK extern int      _WRTLCALL jstrnicmp( const JCHAR *__s1, const JCHAR *__s2, size_t __n );
_WCRTLINK extern JSTRING  _WRTLCALL jstrnset( JCHAR *__s, JMOJI __c, size_t __n );
_WCRTLINK extern JSTRING  _WRTLCALL jstrrchr( const JCHAR *__s, JMOJI __c );
_WCRTLINK extern JSTRING  _WRTLCALL jstrrev( JCHAR *__s );
_WCRTLINK extern JSTRING  _WRTLCALL jstrset( JCHAR *__s, JMOJI __c );
_WCRTLINK extern JSTRING  _WRTLCALL jstrskip( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern size_t   _WRTLCALL jstrspn( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern JSTRING  _WRTLCALL jstrstr( const JCHAR *__s1, const JCHAR *__s2 );
_WCRTLINK extern JSTRING  _WRTLCALL jstrtok( JCHAR *__targ, const JCHAR *__brk );
_WCRTLINK extern JSTRING  _WRTLCALL jstrupr( JCHAR *__s );
/* ----------- memory model independent equivalents ----------- */
_WCRTLINK extern size_t   _WCI86FAR _WRTLCALL _fbtom( const JCHAR _WCFAR *__s, size_t __nb );
_WCRTLINK extern size_t   _WCI86FAR _WRTLCALL _fmtob( const JCHAR _WCFAR *__s, size_t __nm );
_WCRTLINK extern int      _WCI86FAR _WRTLCALL _fnthctype( const JCHAR _WCFAR *__string, size_t __n );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjgetmoji( const JCHAR _WCFAR *__s, JMOJI _WCFAR *__c );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjputmoji( JCHAR _WCFAR *__s, JMOJI __c );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstradv( const JCHAR _WCFAR *__s, size_t __n );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrcat( JCHAR _WCFAR *__to, const JCHAR _WCFAR *__from );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrchr( const JCHAR _WCFAR *__s, JMOJI __c );
_WCRTLINK extern int      _WCI86FAR _WRTLCALL _fjstrcmp( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern size_t   _WCI86FAR _WRTLCALL _fjstrcspn( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern int      _WCI86FAR _WRTLCALL _fjstricmp( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern size_t   _WCI86FAR _WRTLCALL _fjstrlen( const JCHAR _WCFAR *__s );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrlwr( JCHAR _WCFAR *__s );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrmatch( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrncat( JCHAR _WCFAR *__to, const JCHAR _WCFAR *__from, size_t __n );
_WCRTLINK extern int      _WCI86FAR _WRTLCALL _fjstrncmp( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2, size_t __n );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrncpy( JCHAR _WCFAR *__to, const JCHAR _WCFAR *__from, size_t __n );
_WCRTLINK extern int      _WCI86FAR _WRTLCALL _fjstrnicmp( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2, size_t __n );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrnset( JCHAR _WCFAR *__s, JMOJI __c, size_t __n );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrrchr( const JCHAR _WCFAR *__s, JMOJI __c );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrrev( JCHAR _WCFAR *__s );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrset( JCHAR _WCFAR *__s, JMOJI __c );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrskip( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern size_t   _WCI86FAR _WRTLCALL _fjstrspn( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrstr( const JCHAR _WCFAR *__s1, const JCHAR _WCFAR *__s2 );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrtok( JCHAR _WCFAR *__targ, const JCHAR _WCFAR *__brk );
_WCRTLINK extern FJSTRING _WCI86FAR _WRTLCALL _fjstrupr( JCHAR _WCFAR *__s );
/* ----------- end of memory model independent equivalents ----------- */

:include cplusepi.sp
#endif
