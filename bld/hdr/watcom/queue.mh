///////////////////////////////////////////////////////////////////////////
// FILE: queue (Definition of std::queue)
//
:keep CPP_HDR
:include crwatcnt.sp
//
// Description: This header is part of the C++ standard library.
///////////////////////////////////////////////////////////////////////////
#ifndef _QUEUE_INCLUDED
#define _QUEUE_INCLUDED

:include readonly.sp

:include cpponly.sp

#ifndef _DEQUE_INCLUDED
 #include <deque>
#endif

namespace std {

    template< class Type, class Container = deque< Type > >
    class queue {

        template< class Type, class Container >
        friend inline
        bool operator==( const queue< Type, Container > &x, const queue< Type, Container > &y );

        template< class Type, class Container >
        friend inline
        bool operator<( const queue< Type, Container > &x, const queue< Type, Container > &y );

    public:
        typedef typename Container::value_type      value_type;
        typedef typename Container::reference       reference;
        typedef typename Container::const_reference const_reference;
        typedef typename Container::size_type       size_type;
        typedef          Container                  container_type;

    protected:
        Container c;

    public:
        explicit queue( const Container &other = Container( ) );

        bool            empty( ) const;
        size_type       size( ) const;
        reference       front( );
        const_reference front( ) const;
        reference       back( );
        const_reference back( ) const;
        void            push( const value_type &value );
        void            pop( );
        void            swap( queue &other );
        bool           _Sane( ) const;
    };

    // =========================
    // Member functions of queue
    // =========================

    template< class Type, class Container >
    inline queue< Type, Container >::queue( const Container &other ) : c( other )
        { }

    // empty( )
    // ********
    template< class Type, class Container >
    inline bool queue< Type, Container >::empty( ) const
    {
        return( c.empty( ) );
    }

    // size( )
    // *******
    template< class Type, class Container >
    inline
    typename queue< Type, Container >::size_type queue< Type, Container >::size( ) const
    {
        return( c.size( ) );
    }

    // front( )
    // ********
    template< class Type, class Container >
    inline
    typename queue< Type, Container >::reference queue< Type, Container >::front( )
    {
        return( c.front( ) );
    }

    // front( ) const
    // **************
    template< class Type, class Container >
    inline
    typename queue< Type, Container >::const_reference queue< Type, Container >::front( ) const
    {
        return( c.front( ) );
    }

    // back( )
    // *******
    template< class Type, class Container >
    inline
    typename queue< Type, Container >::reference queue< Type, Container >::back( )
    {
        return( c.back( ) );
    }

    // back( ) const
    // *************
    template< class Type, class Container >
    inline
    typename queue< Type, Container >::const_reference queue< Type, Container >::back( ) const
    {
        return( c.back( ) );
    }

    // push( const value_type & )
    // **************************
    template< class Type, class Container >
    inline void queue< Type, Container >::push( const value_type &value )
    {
        c.push_back( value );
    }

    // pop( )
    // ******
    template< class Type, class Container >
    inline void queue< Type, Container >::pop( )
    {
        c.pop_front( );
    }

    // swap( queue & )
    // ***************
    template< class Type, class Container >
    inline void queue< Type, Container >::swap( queue &other )
    {
        c.swap( other.c );
    }
    
    // _Sane( ) const
    template< class Type, class Container >
    inline bool queue< Type, Container >::_Sane( ) const
    {
        return( c._Sane( ) );
    }

    // ==============================
    // Ordinary functions using queue
    // ==============================

    template< class Type, class Container >
    inline
    bool operator==( const queue< Type, Container > &x, const queue< Type, Container > &y )
    {
        return( x.c == y.c );
    }

    template< class Type, class Container >
    inline
    bool operator!=( const queue< Type, Container > &x, const queue< Type, Container > &y )
    {
        return( !(x == y) );
    }

    template< class Type, class Container >
    inline
    bool operator<( const queue< Type, Container > &x, const queue< Type, Container > &y )
    {
        return( x.c < y.c );
    }

    template< class Type, class Container >
    inline
    bool operator<=( const queue< Type, Container > &x, const queue< Type, Container > &y )
    {
        return( (x < y) || (x == y) );
    }

    template< class Type, class Container >
    inline
    bool operator>( const queue< Type, Container > &x, const queue< Type, Container > &y )
    {
        return( y < x );
    }

    template< class Type, class Container >
    inline
    bool operator>=( const queue< Type, Container > &x, const queue< Type, Container > &y )
    {
        return( (y < x) || (x == y) );
    }

} // namespace std

#endif
