/***************************************************************************
 * FILE: wchar.h/cwchar (Wide character functions)
 *
:include crwat.sp
 *
 * Description: This header is part of the C/C++ standard library. It
 *              declares functions and types pertaining to the use of
 *              wide characters.
 ***************************************************************************/
:segment CNAME
#ifndef _CWCHAR_INCLUDED
#define _CWCHAR_INCLUDED

#ifndef __cplusplus
#error the header cwchar requires C++
#endif
:elsesegment
#ifndef _WCHAR_H_INCLUDED
#define _WCHAR_H_INCLUDED
:endsegment

:include readonly.sp
::
:: The following somewhat long segment only appears in wchar.h.
:segment !CNAME
#ifdef __cplusplus
#include <cwchar>

// C99 types in wchar.h
using std::mbstate_t;
#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
#define _SIZE_T_DEFINED_
using std::size_t;
#endif
using std::tm;              // <= Fix me?
#ifndef _WCTYPE_T_DEFINED
#define _WCTYPE_T_DEFINED
#define _WCTYPE_T_DEFINED_
using std::wint_t;
#endif

// C99 functions in wchar.h
using std::fgetwc;
using std::fgetws;
using std::fputwc;
using std::fputws;
using std::fwprintf;
using std::fwscanf;
using std::getwc;
using std::getwchar;
using std::mbrlen;
using std::mbrtowc;
using std::mbsrtowcs;
using std::putwc;
using std::putwchar;
using std::swprintf;
using std::swscanf;
using std::ungetwc;
using std::vfwprintf;
using std::vswprintf;
using std::vwprintf;
using std::vwscanf;
using std::wcrtomb;
using std::wcscat;
using std::wcschr;
using std::wcscmp;
using std::wcscoll;
using std::wcscpy;
using std::wcscspn;
using std::wcsftime;
using std::wcslen;
using std::wcsncat;
using std::wcsncmp;
using std::wcsncpy;
using std::wcspbrk;
using std::wcsrchr;
using std::wcsrtombs;
using std::wcsspn;
using std::wcsstr;
using std::wcstod;
using std::wcstok;
using std::wcstol;
using std::wcstoll;
using std::wcstoul;
using std::wcstoull;
using std::wcsxfrm;
using std::wctob;
using std::wmemchr;
using std::wmemcmp;
using std::wmemcpy;
using std::wmemmove;
using std::wmemset;
using std::wprintf;
using std::wscanf;

:include ext.sp

// C99 functions not specified for wchar.h
using std::iswalnum;
using std::iswalpha;
using std::iswascii;
using std::iswcntrl;
using std::iswdigit;
using std::iswgraph;
using std::iswlower;
using std::iswprint;
using std::iswpunct;
using std::iswspace;
using std::iswupper;
using std::iswxdigit;
using std::iswctype;
using std::wctype;
using std::towlower;
using std::towupper;
#endif

#else /* __cplusplus not defined */
:: End of segment that is only in wchar.h
:endsegment

#ifndef _COMDEF_H_INCLUDED
 #include <_comdef.h>
#endif
:segment !QNX & !LINUX
#ifndef _IO_H_INCLUDED
    #include <io.h>
#endif
#ifndef _STAT_H_INCLUDED
    #include <sys/stat.h>
#endif
:endsegment
:segment CNAME
#ifndef _CSTDARG_INCLUDED
    #include <cstdarg>
#endif
#ifndef _CSTDIO_INCLUDED
    #include <cstdio>
#endif
#ifndef _CSTDLIB_INCLUDED
    #include <cstdlib>
#endif
#ifndef _CTIME_INCLUDED
    #include <ctime>
#endif
:elsesegment
#ifndef _STDARG_H_INCLUDED
    #include <stdarg.h>
#endif
#ifndef _STDIO_H_INCLUDED
    #include <stdio.h>
#endif
#ifndef _STDLIB_H_INCLUDED
    #include <stdlib.h>
#endif
#ifndef _TIME_H_INCLUDED
    #include <time.h>
#endif
:endsegment

:: Only need extern "C" in cwchar
:segment CNAME
:include cpluspro.sp
:endsegment

:include wchar_t.sp

:include wctypet.sp

:include sizet.sp

:segment !CNAME
:include saferpro.sp

:include errnot.sp

:include rsizet.sp

:include saferepi.sp
:endsegment

:include null.sp

:include mbmax.sp

:segment CNAME
namespace std {
:endsegment
typedef int mbstate_t;

_WCRTLINK extern wint_t   _WRTLCALL btowc( int __c );
_WCRTLINK extern wint_t   _WRTLCALL fgetwc( FILE *__strm );
_WCRTLINK extern wchar_t  * _WRTLCALL fgetws( wchar_t *__s, int __n, FILE *__strm );
_WCRTLINK extern wint_t   _WRTLCALL fputwc( wint_t __wc, FILE *__strm );
_WCRTLINK extern int      _WRTLCALL fputws( const wchar_t *__s, FILE *__strm );
_WCRTLINK extern int      _WRTLCALL fwide( FILE *__strm, int __mode );
_WCRTLINK extern int      _WRTLCALL fwprintf( FILE *__strm, const wchar_t *__format, ... );
_WCRTLINK extern int      _WRTLCALL fwscanf( FILE *__strm, const wchar_t *__format, ... );
_WCRTLINK extern wint_t   _WRTLCALL getwc( FILE *__strm );
_WCRTLINK extern wint_t   _WRTLCALL getwchar( void );
_WCRTLINK extern int      _WRTLCALL mbrlen( const char *__s, size_t __n, mbstate_t *__ps );
_WCRTLINK extern int      _WRTLCALL mbrtowc( wchar_t *__pwc, const char *__s, size_t __n, mbstate_t *__ps );
_WCRTLINK extern int      _WRTLCALL mbsinit( const mbstate_t *__ps );
_WCRTLINK extern size_t   _WRTLCALL mbsrtowcs( wchar_t *__dst, const char **__src, size_t __n, mbstate_t *__ps );
_WCRTLINK extern wint_t   _WRTLCALL putwc( wint_t __wc, FILE *__strm );
_WCRTLINK extern wint_t   _WRTLCALL putwchar( wint_t __wc );
#ifndef swprintf
_WCRTLINK extern int      _WRTLCALL swprintf( wchar_t *__s, size_t __n, const wchar_t *__format, ... );
#endif
_WCRTLINK extern int      _WRTLCALL swscanf( const wchar_t *__s, const wchar_t *__format, ... );
_WCRTLINK extern wint_t   _WRTLCALL ungetwc( wint_t __wc, FILE *__strm );
_WCRTLINK extern int      _WRTLCALL vfwprintf( FILE *__strm, const wchar_t *__format, va_list __arg );
_WCRTLINK extern int      _WRTLCALL vswprintf( wchar_t *__s, size_t __n, const wchar_t *__format, va_list __arg );
_WCRTLINK extern int      _WRTLCALL vwprintf( const wchar_t *__format, va_list __arg );
_WCRTLINK extern int      _WRTLCALL vwscanf( const wchar_t *, __va_list );
_WCRTLINK extern int      _WRTLCALL wcrtomb( char *__s, wchar_t __wc, mbstate_t *__ps );
_WCRTLINK extern wchar_t  * _WRTLCALL wcscat( wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern wchar_t  * _WRTLCALL wcschr( const wchar_t *__s, wint_t __wc );
_WCRTLINK extern int      _WRTLCALL wcscmp( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern int      _WRTLCALL wcscoll( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern wchar_t  * _WRTLCALL wcscpy( wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern size_t   _WRTLCALL wcscspn( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern size_t   _WRTLCALL wcsftime( wchar_t *__s, size_t __maxsize, const wchar_t *__format, const struct tm *__timeptr );
_WCRTLINK extern size_t   _WRTLCALL wcslen( const wchar_t *__s );
_WCRTLINK extern wchar_t  * _WRTLCALL wcsncat( wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern int      _WRTLCALL wcsncmp( const wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern wchar_t  * _WRTLCALL wcsncpy( wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern wchar_t  * _WRTLCALL wcspbrk( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern wchar_t  * _WRTLCALL wcsrchr( const wchar_t *__s, wint_t __wc );
_WCRTLINK extern size_t   _WRTLCALL wcsrtombs( char *__dst, const wchar_t **__src, size_t __n, mbstate_t *__ps );
_WCRTLINK extern size_t   _WRTLCALL wcsspn( const wchar_t *__s1, const wchar_t *__s2 );
_WCRTLINK extern wchar_t  * _WRTLCALL wcsstr( const wchar_t *__s1, const wchar_t *__s2 );
_WMRTLINK extern double   _WRTLCALL wcstod( const wchar_t *__nptr, wchar_t **__endptr );
_WCRTLINK extern wchar_t  * _WRTLCALL wcstok( wchar_t *__s1, const wchar_t *__s2, wchar_t **__ptr );
_WCRTLINK extern long int _WRTLCALL wcstol( const wchar_t *, wchar_t **, int );
_WCRTLINK extern long long int _WRTLCALL wcstoll( const wchar_t *, wchar_t **, int );
_WCRTLINK extern unsigned long int _WRTLCALL wcstoul( const wchar_t *, wchar_t **, int );
_WCRTLINK extern unsigned long long int _WRTLCALL wcstoull( const wchar_t *, wchar_t **, int );
_WCRTLINK extern size_t   _WRTLCALL wcsxfrm( wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern int      _WRTLCALL wctob( wint_t __wc );
_WCRTLINK extern wchar_t  * _WRTLCALL wmemchr( const wchar_t *__s, wchar_t __wc, size_t __n );
_WCRTLINK extern int      _WRTLCALL wmemcmp( const wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern wchar_t  * _WRTLCALL wmemcpy( wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern wchar_t  * _WRTLCALL wmemmove( wchar_t *__s1, const wchar_t *__s2, size_t __n );
_WCRTLINK extern wchar_t  * _WRTLCALL wmemset( wchar_t *__s, wchar_t __wc, size_t __n );
_WCRTLINK extern int      _WRTLCALL wprintf( const wchar_t *__format, ... );
_WCRTLINK extern int      _WRTLCALL wscanf( const wchar_t *__format, ... );
:segment CNAME
}
:endsegment

_WCRTLINK extern wchar_t  * _WRTLCALL _wcsdup( const wchar_t * );
_WCRTLINK extern int      _WRTLCALL _wcsicmp( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcslwr( wchar_t * );
:segment CNAME
_WCRTLINK extern int      _WRTLCALL _wcsnicmp( const wchar_t *, const wchar_t *, std::size_t );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsnset( wchar_t *, int, std::size_t );
:elsesegment
_WCRTLINK extern int      _WRTLCALL _wcsnicmp( const wchar_t *, const wchar_t *, size_t );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsnset( wchar_t *, int, size_t );
:endsegment
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsupr( wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsrev( wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsset( wchar_t *, wchar_t );
_WCRTLINK extern wchar_t  * _WRTLCALL _wmktemp( wchar_t *__template );
_WCRTLINK extern wchar_t  * _WRTLCALL _wtempnam( wchar_t *__dir, wchar_t *__prefix );

:: Also in stdint.h
#define WCHAR_MIN       0
#define WCHAR_MAX       65535U

:segment CNAME
#define WEOF ((std::wint_t)(-1))
:elsesegment
#define WEOF ((wint_t)(-1))
:endsegment

:include ext.sp

:segment CNAME
namespace std {
:endsegment
_WCRTLINK extern int      _WRTLCALL iswalnum( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswalpha( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswascii( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswcntrl( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswdigit( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswgraph( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswlower( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswprint( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswpunct( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswspace( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswupper( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswxdigit( wint_t __wc );
_WCRTLINK extern int      _WRTLCALL iswctype( wint_t __wc, wctype_t __desc );
_WCRTLINK extern wctype_t _WRTLCALL wctype( const char *__property );
_WCRTLINK extern wint_t   _WRTLCALL towlower( wint_t __wc );
_WCRTLINK extern wint_t   _WRTLCALL towupper( wint_t __wc );
:segment CNAME
}
:endsegment

:segment CNAME
:: C99 says this function is named mbsinit.
_WCRTLINK extern int     _WRTLCALL sisinit( const std::mbstate_t *__ps );

_WCRTLINK extern int    _WRTLCALL _fmbrlen( const char _WCFAR *__s, std::size_t __n, std::mbstate_t _WCFAR *__ps );
_WCRTLINK extern int    _WRTLCALL _fmbrtowc( wchar_t _WCFAR *__pwc, const char _WCFAR *__s, std::size_t __n, std::mbstate_t _WCFAR *__ps );
_WCRTLINK extern size_t _WRTLCALL _fmbsrtowcs( wchar_t _WCFAR *__dst, const char _WCFAR * _WCFAR *__src, std::size_t __n, std::mbstate_t _WCFAR *__ps );
_WCRTLINK extern int    _WRTLCALL _fwcrtomb( char _WCFAR *__s, wchar_t __wc, std::mbstate_t _WCFAR *__ps );
_WCRTLINK extern size_t _WRTLCALL _fwcsrtombs( char _WCFAR *__dst, const wchar_t _WCFAR * _WCFAR *__src, std::size_t __n, std::mbstate_t _WCFAR *__ps );
_WCRTLINK extern int    _WRTLCALL _swprintf( wchar_t *__s, const wchar_t *__format, ... );
_WCRTLINK extern int    _WRTLCALL _vswprintf( wchar_t *__s, const wchar_t *__format, std::va_list __arg );

:elsesegment
:: C99 says this function is named mbsinit.
_WCRTLINK extern int     _WRTLCALL sisinit( const mbstate_t *__ps );

_WCRTLINK extern int    _WRTLCALL _fmbrlen( const char _WCFAR *__s, size_t __n, mbstate_t _WCFAR *__ps );
_WCRTLINK extern int    _WRTLCALL _fmbrtowc( wchar_t _WCFAR *__pwc, const char _WCFAR *__s, size_t __n, mbstate_t _WCFAR *__ps );
_WCRTLINK extern size_t _WRTLCALL _fmbsrtowcs( wchar_t _WCFAR *__dst, const char _WCFAR * _WCFAR *__src, size_t __n, mbstate_t _WCFAR *__ps );
_WCRTLINK extern int    _WRTLCALL _fwcrtomb( char _WCFAR *__s, wchar_t __wc, mbstate_t _WCFAR *__ps );
_WCRTLINK extern size_t _WRTLCALL _fwcsrtombs( char _WCFAR *__dst, const wchar_t _WCFAR * _WCFAR *__src, size_t __n, mbstate_t _WCFAR *__ps );
_WCRTLINK extern int    _WRTLCALL _swprintf( wchar_t *__s, const wchar_t *__format, ... );
_WCRTLINK extern int    _WRTLCALL _vswprintf( wchar_t *__s, const wchar_t *__format, va_list __arg );

:endsegment

#endif

:segment !CNAME
:include saferpro.sp

_WCRTLINK extern errno_t _WRTLCALL wcscpy_s( wchar_t * __restrict __s1, rsize_t __s1max, const wchar_t * __restrict __s2 );
_WCRTLINK extern errno_t _WRTLCALL wcsncpy_s( wchar_t * __restrict __s1, rsize_t __s1max, const wchar_t * __restrict __s2, rsize_t __n );
_WCRTLINK extern errno_t _WRTLCALL wmemcpy_s( wchar_t * __restrict __s1, rsize_t __s1max, const wchar_t * __restrict __s2, rsize_t __n );
_WCRTLINK extern errno_t _WRTLCALL wmemmove_s( wchar_t *__s1, rsize_t __s1max, const wchar_t *__s2, rsize_t __n );

_WCRTLINK extern errno_t _WRTLCALL wcscat_s( wchar_t * __restrict __s1, rsize_t __s1max, const wchar_t * __restrict __s2 );
_WCRTLINK extern errno_t _WRTLCALL wcsncat_s( wchar_t * __restrict __s1, rsize_t __s1max, const wchar_t * __restrict __s2, rsize_t __n );

_WCRTLINK extern wchar_t * _WRTLCALL wcstok_s( wchar_t * __restrict __s1, rsize_t * __restrict __s1max, const wchar_t * __restrict __s2, wchar_t ** __restrict __ptr );

_WCRTLINK extern size_t  _WRTLCALL wcsnlen_s( const wchar_t *__s, size_t __maxsize );

_WCRTLINK extern size_t  _WRTLCALL wcserrorlen_s( errno_t __errnum );

_WCRTLINK extern errno_t _WRTLCALL wcserror_s( wchar_t * __restrict __s, rsize_t __maxsize, errno_t __errnum );


_WCRTLINK extern errno_t _WRTLCALL _wasctime_s( wchar_t * __restrict __s, rsize_t __maxsize, const struct tm * __timeptr );

_WCRTLINK extern errno_t _WRTLCALL _wctime_s( wchar_t * __restrict s, rsize_t __maxsize, const time_t * __timer );

:include saferepi.sp
:endsegment

:segment CNAME
:include cplusepi.sp
:endsegment

:: This #endif closes the #ifdef __cplusplus in wchar.h
:segment !CNAME
#endif
:endsegment

#endif
