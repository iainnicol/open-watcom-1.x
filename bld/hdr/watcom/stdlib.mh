/***************************************************************************
 * FILE: stdlib.h/cstdlib (Standard Library functions)
 *
:include crwatqnx.sp
 *
 * Description: This header is part of the C/C++ standard library. It
 *              declares several types, macros, and functions of general
 *              utility.
 ***************************************************************************/
:segment CNAME
#ifndef _CSTDLIB_INCLUDED
#define _CSTDLIB_INCLUDED

#ifndef __cplusplus
#error The header cstdlib requires C++
#endif
:elsesegment
#ifndef _STDLIB_H_INCLUDED
#define _STDLIB_H_INCLUDED
:endsegment

:include readonly.sp
::
:: The following segment only appears in stdlib.h.
:segment !CNAME
#ifdef __cplusplus
#define _INCLUDED_FROM_STDLIB_H
#include <cstdlib>
#undef  _INCLUDED_FROM_STDLIB_H

// C99 types in stdlib.h.
using std::div_t;
using std::ldiv_t;
#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
#define _SIZE_T_DEFINED_
using std::size_t;
#endif

// C99 functions in stdlib.h
using std::abort;
using std::abs;
using std::atexit;
using std::atof;
using std::atoi;
using std::atol;
using std::atoll;
using std::bsearch;
using std::calloc;
using std::div;
using std::exit;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;
:segment !NO_WIDECHAR
using std::mblen;
using std::mbstowcs;
using std::mbtowc;
using std::wcstombs;
using std::wctomb;
:endsegment
using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoll;
using std::strtoul;
using std::strtoull;
using std::system;

:include ext.sp
:segment !NO_WIDECHAR
using std::wcstol;
using std::wcstoll;
using std::wcstod;
using std::wcstoul;
using std::wcstoull;
:endsegment
#endif

#else /* __cplusplus not defined */
:: End of segment that is only in stdlib.h
:endsegment

:: Only need extern "C" in cstdlib
:segment CNAME
:include cpluspro.sp
:endsegment

#ifndef _COMDEF_H_INCLUDED
 #include <_comdef.h>
#endif

:include pshpackl.sp

:include wchar_t.sp

:include sizet.sp

:segment !CNAME
:include saferpro.sp

:include errnot.sp

:include rsizet.sp

typedef void _WRTLCALL (*constraint_handler_t)( const char * __restrict __msg, void * __restrict __ptr, errno_t __error );

:include saferepi.sp
:endsegment

:include null.sp

:include mbmax.sp

:include maxpath.sp

#define RAND_MAX        32767U
#define EXIT_SUCCESS    0
:segment QNX | LINUX
#define EXIT_FAILURE    1
:elsesegment
#define EXIT_FAILURE    0xFF
:endsegment

:segment CNAME
namespace std {
:endsegment
typedef struct  {
    int     quot;
    int     rem;
} div_t;

typedef struct  {
    long    quot;
    long    rem;
} ldiv_t;

typedef struct  {
    long long   quot;
    long long   rem;
} lldiv_t;

_WCRTLINK extern void    _WRTLCALL abort( void );

_WCIRTLINK extern int    _WRTLCALL abs( int __j );
#if defined(_M_IX86)
#pragma aux abs     parm nomemory modify nomemory;
#endif
:: extra 'register' is used to prevent C++ compiler from entering a parser
:: disambiguation stage (i.e., it has a use, so don't delete it) AFS (atexit)
          extern int     _WRTLCALL atexit( register void ( *__func )( void ) );
_WMRTLINK extern double  _WRTLCALL atof( const char *__nptr );
_WCRTLINK extern int     _WRTLCALL atoi( const char *__nptr );
_WCRTLINK extern long int _WRTLCALL atol( const char *__nptr );
_WCRTLINK extern long long int _WRTLCALL atoll( const char *__nptr );
_WCRTLINK extern void    * _WRTLCALL bsearch( const void *__key, const void *__base,
                                  size_t __nmemb, size_t __size,
                                  int (*__compar)(const void *__pkey, const void *__pbase) );
_WCRTLINK extern void    * _WRTLCALL calloc( size_t __n, size_t __size );
_WCIRTLINK extern div_t  _WRTLCALL div( int __numer, int __denom );
_WCRTLINK extern void    _WRTLCALL exit( int __status );
_WCRTLINK extern void    _WRTLCALL _Exit( int __status );
_WCRTLINK extern void    _WRTLCALL free( void *__ptr );
_WCRTLINK extern char    * _WRTLCALL getenv( const char *__name );

_WCIRTLINK extern long int _WRTLCALL labs( long int __j );
#if defined(_M_IX86)
#pragma aux labs    parm nomemory modify nomemory;
#endif

#if defined(__386__) || defined(__AXP__) || defined(__PPC__)
_WCIRTLINK
#else
_WCRTLINK
#endif
extern ldiv_t _WRTLCALL ldiv( long int __numer, long int __denom );
_WCRTLINK extern long long int _WRTLCALL llabs( long long int __j );
_WCRTLINK extern lldiv_t _WRTLCALL lldiv( long long int __numer, long long int __denom );
_WCRTLINK extern void    * _WRTLCALL malloc( size_t __size );
:segment !NO_WIDECHAR
_WCRTLINK extern int     _WRTLCALL mblen( const char *__s, size_t __n );
_WCRTLINK extern size_t  _WRTLCALL mbstowcs( wchar_t *__pwcs, const char *__s, size_t __n );
_WCRTLINK extern int     _WRTLCALL mbtowc( wchar_t *__pwc, const char *__s, size_t __n );
_WCRTLINK extern size_t  _WRTLCALL wcstombs( char *__s, const wchar_t *__pwcs, size_t __n );
_WCRTLINK extern int     _WRTLCALL wctomb( char *__s, wchar_t __wchar );
:endsegment
_WCRTLINK extern void    _WRTLCALL qsort( void *__base, size_t __nmemb, size_t __size,
                                int (*__compar)( const void *, const void * ) );
_WCRTLINK extern int     _WRTLCALL rand( void );
_WCRTLINK extern void    * _WRTLCALL realloc( void *__ptr, size_t __size );
_WCRTLINK extern void    _WRTLCALL srand( unsigned int __seed );
_WMRTLINK extern double  _WRTLCALL strtod( const char *__nptr, char **__endptr );
_WMRTLINK extern float   _WRTLCALL strtof( const char *__nptr, char **__endptr );
_WMRTLINK extern long double _WRTLCALL strtold( const char *__nptr, char **__endptr );
_WCRTLINK extern long int _WRTLCALL strtol( const char *__nptr, char **__endptr, int __base );
_WCRTLINK extern long long int _WRTLCALL strtoll( const char *__nptr, char **__endptr, int __base );
_WCRTLINK extern unsigned long _WRTLCALL strtoul( const char *__nptr, char **__endptr, int __base );
_WCRTLINK extern unsigned long long int _WRTLCALL strtoull( const char *__nptr, char **__endptr, int __base );
_WCRTLINK extern int     _WRTLCALL system( const char *__string );
:segment CNAME
}
:endsegment

#if defined(__INLINE_FUNCTIONS__)
:segment CNAME
namespace std {
  #pragma intrinsic(abs,div,labs)
  #if defined(__386__) || defined(__AXP__) || defined(__PPC__)
    #pragma intrinsic(ldiv)
  #endif
}
:elsesegment
#pragma intrinsic(abs,div,labs)
#if defined(__386__) || defined(__AXP__) || defined(__PPC__)
  #pragma intrinsic(ldiv)
#endif
:endsegment
#endif

:segment !CNAME
#define atof(p)  strtod(p,(char **)NULL)
:endsegment

:segment QNX | LINUX
:include unixext.sp
_WCRTLINK void           _WRTLCALL _exit( int __status );
#endif
:endsegment

:include ext.sp

_WCRTLINK extern void    _WRTLCALL break_on( void );
_WCRTLINK extern void    _WRTLCALL break_off( void );

:segment QNX
_WCRTLINK extern unsigned _WRTLCALL atoh( const char *__nptr );
:endsegment
:segment DOS
_WCRTLINK extern void    _WRTLCALL _exit( int __status );
:endsegment
_WMRTLINK extern char    * _WRTLCALL ecvt( double __val, int __ndig, int *__dec, int *__sign );
_WMRTLINK extern char    * _WRTLCALL _ecvt( double __val, int __ndig, int *__dec, int *__sign );
_WMRTLINK extern char    * _WRTLCALL fcvt( double __val, int __ndig, int *__dec, int *__sign );
_WMRTLINK extern char    * _WRTLCALL _fcvt( double __val, int __ndig, int *__dec, int *__sign );
_WCRTLINK extern char    * _WRTLCALL _fullpath( char *__buf, const char *__path, _w_size_t __size );
_WMRTLINK extern char    * _WRTLCALL gcvt( double __val, int __ndig, char *__buf );
_WMRTLINK extern char    * _WRTLCALL _gcvt( double __val, int __ndig, char *__buf );
_WCRTLINK extern char    * _WRTLCALL itoa( int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL _itoa( int __value, char *__buf, int __radix );
#if defined(__386__) || defined(__AXP__) || defined(__PPC__)
_WCIRTLINK
#else
_WCRTLINK
#endif
extern unsigned long     _WRTLCALL _lrotl( unsigned long __value, unsigned int __shift );
#if defined(__386__) || defined(__AXP__) || defined(__PPC__)
_WCIRTLINK
#else
_WCRTLINK
#endif
extern unsigned long     _WRTLCALL _lrotr( unsigned long __value, unsigned int __shift );
_WCRTLINK extern char    * _WRTLCALL ltoa( long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL lltoa( long long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL _ltoa( long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL _lltoa( long long int __value, char *__buf, int __radix );
_WCRTLINK extern void    _WRTLCALL _makepath( char *__path, const char *__drive,
                                    const char *__dir, const char *__fname, const char *__ext );
_WCRTLINK extern int     _WRTLCALL mkstemp( char *__template );
_WCIRTLINK extern unsigned int _WRTLCALL _rotl( unsigned int __value, unsigned int __shift );
_WCIRTLINK extern unsigned int _WRTLCALL _rotr( unsigned int __value, unsigned int __shift );
:segment !NO_WIDECHAR

_WMRTLINK extern wchar_t  * _WRTLCALL _wecvt( double __val, int __ndig, int *__dec, int *__sign );
_WMRTLINK extern wchar_t  * _WRTLCALL _wfcvt( double __val, int __ndig, int *__dec, int *__sign );
_WMRTLINK extern wchar_t  * _WRTLCALL _wgcvt( double __val, int __ndig, wchar_t *__buf );
_WCRTLINK extern int      _WRTLCALL _wtoi( const wchar_t * );
_WCRTLINK extern long int _WRTLCALL _wtol( const wchar_t * );
_WCRTLINK extern long long int _WRTLCALL _wtoll( const wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _itow( int, wchar_t *, int );
_WCRTLINK extern wchar_t  * _WRTLCALL _ltow( long int, wchar_t *, int );
_WCRTLINK extern wchar_t  * _WRTLCALL _lltow( long long int, wchar_t *, int );
_WCRTLINK extern wchar_t  * _WRTLCALL _utow( unsigned int, wchar_t *, int );
_WCRTLINK extern wchar_t  * _WRTLCALL _ultow( unsigned long int, wchar_t *, int );
_WCRTLINK extern wchar_t  * _WRTLCALL _ulltow( unsigned long long int, wchar_t *, int );
_WMRTLINK extern double   _WRTLCALL _wtof( const wchar_t * );
_WMRTLINK extern double   _WRTLCALL _watof( const wchar_t * );
:segment CNAME
namespace std {
:endsegment
_WCRTLINK extern long int _WRTLCALL wcstol( const wchar_t *, wchar_t **, int );
_WCRTLINK extern long long int _WRTLCALL wcstoll( const wchar_t *, wchar_t **, int );
_WMRTLINK extern double  _WRTLCALL wcstod( const wchar_t *, wchar_t ** );
_WCRTLINK extern unsigned long int _WRTLCALL wcstoul( const wchar_t *, wchar_t **, int );
_WCRTLINK extern unsigned long long int _WRTLCALL wcstoull( const wchar_t *, wchar_t **, int );
:segment CNAME
}
:endsegment
_WCRTLINK extern wchar_t  * _WRTLCALL _atouni( wchar_t *, const char * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wfullpath( wchar_t *, const wchar_t *, _w_size_t );
_WCRTLINK extern void     _WRTLCALL _wmakepath( wchar_t *__path, const wchar_t *__drive,
                                      const wchar_t *__dir,
                                      const wchar_t *__fname,
                                      const wchar_t *__ext );
_WCRTLINK extern int      _WRTLCALL _wcsicmp( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsdup( const wchar_t * );
_WCRTLINK extern int      _WRTLCALL _wcsnicmp( const wchar_t *, const wchar_t *, _w_size_t );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcslwr( wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsupr( wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsrev( wchar_t * );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsset( wchar_t *, wchar_t );
_WCRTLINK extern wchar_t  * _WRTLCALL _wcsnset( wchar_t *, int, _w_size_t );
_WCRTLINK extern wchar_t  * _WRTLCALL _wgetenv( const wchar_t *__name );
_WCRTLINK extern int      _WRTLCALL _wsetenv( const wchar_t *__name,
                                      const wchar_t *__newvalue,
                                      int __overwrite );
_WCRTLINK extern int      _WRTLCALL _wputenv( const wchar_t *__env_string );
:segment !QNX & !LINUX
_WCRTLINK extern void     _WRTLCALL _wsearchenv( const wchar_t *__name,
                                         const wchar_t *__env_var,
                                         wchar_t *__buf );
_WCRTLINK extern void     _WRTLCALL _wsplitpath2( const wchar_t *__inp,
                                          wchar_t *__outp, wchar_t **__drive,
                                          wchar_t **__dir, wchar_t **__fn,
                                          wchar_t **__ext );
_WCRTLINK extern void     _WRTLCALL _wsplitpath( const wchar_t *__path,
                                         wchar_t *__drive, wchar_t *__dir,
                                         wchar_t *__fname, wchar_t *__ext );
_WCRTLINK extern int      _WRTLCALL _wsystem( const wchar_t *__cmd );
:endsegment
:endsegment

_WCRTLINK extern int     _WRTLCALL setenv( const char *__name, const char *__newvalue, int __overwrite );
_WCRTLINK extern void    _WRTLCALL unsetenv( const char *name );

_WCRTLINK extern int     _WRTLCALL putenv( const char *__string );
_WCRTLINK extern void    _WRTLCALL _searchenv( const char *__name, const char *__env_var, char *__buf );
:segment QNX
_WCRTLINK extern int     _WRTLCALL need_usage( char **argv );
_WCRTLINK extern int     _WRTLCALL print_usage( char **argv );
_WCRTLINK extern void    _WRTLCALL searchenv( const char *__name, const char *__env_var, char *__buf );
:endsegment
_WCRTLINK extern void    _WRTLCALL _splitpath2( const char *__inp, char *__outp,
                                      char **__drive, char **__dir,
                                      char **__fn, char **__ext );
_WCRTLINK extern void    _WRTLCALL _splitpath( const char *__path, char *__drive,
                                     char *__dir, char *__fname, char *__ext );
_WCRTLINK extern void    _WRTLCALL swab( char *__src, char *__dest, int __num );
_WCRTLINK extern char    * _WRTLCALL ultoa( unsigned long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL ulltoa( unsigned long long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL _ultoa( unsigned long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL _ulltoa( unsigned long long int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL utoa( unsigned int __value, char *__buf, int __radix );
_WCRTLINK extern char    * _WRTLCALL _utoa( unsigned int __value, char *__buf, int __radix );

:segment !CNAME
#if defined(__INLINE_FUNCTIONS__)
 #pragma intrinsic(_rotl,_rotr)
 #if defined(__386__) || defined(__AXP__) || defined(__PPC__)
  #pragma intrinsic(_lrotl,_lrotr)
 #endif
#endif
:endsegment

:segment !CNAME
:include saferpro.sp

_WCRTLINK extern constraint_handler_t set_constraint_handler_s( constraint_handler_t __handler );
_WCRTLINK extern void _WRTLCALL abort_handler_s( const char * __restrict __msg, void * __restrict __ptr, errno_t __error );
_WCRTLINK extern void _WRTLCALL ignore_handler_s( const char * __restrict __msg, void * __restrict __ptr, errno_t __error );

_WCRTLINK extern errno_t _WRTLCALL getenv_s( size_t * __restrict __len, char * __restrict __value, rsize_t __maxsize, const char * __restrict __name );

_WCRTLINK extern void    * _WRTLCALL bsearch_s( const void *__key, const void *__base, rsize_t __nmemb, rsize_t __size,
                                     int (*__compar)(const void *__x, const void *__y, void *__context), void *__context);
_WCRTLINK extern errno_t _WRTLCALL qsort_s( void *__base, rsize_t __nmemb, rsize_t __size,
                                  int (*__compar)(const void *__x, const void *__y, void *__context), void *__context);

_WCRTLINK extern errno_t _WRTLCALL wctomb_s( int * __restrict __status, char * __restrict __s, rsize_t __smax, wchar_t __wc );
_WCRTLINK extern errno_t _WRTLCALL mbstowcs_s( size_t * __restrict __retval, wchar_t * __restrict __dst, rsize_t __dstmax, const char * __restrict __src, rsize_t __len );
_WCRTLINK extern errno_t _WRTLCALL wcstombs_s( size_t * __restrict __retval, char * __restrict __dst, rsize_t __dstmax, const wchar_t * __restrict __src, rsize_t __len );

:include saferepi.sp
:endsegment

/* min and max macros */
#if !defined(__max)
#define __max(a,b)  (((a) > (b)) ? (a) : (b))
#endif
#if !defined(max) && !defined(__cplusplus)
#define max(a,b)  (((a) > (b)) ? (a) : (b))
#endif
#if !defined(__min)
#define __min(a,b)  (((a) < (b)) ? (a) : (b))
#endif
#if !defined(min) && !defined(__cplusplus)
#define min(a,b)  (((a) < (b)) ? (a) : (b))
#endif

/*
 * The following sizes are the maximum sizes of buffers used by the _fullpath()
 * _makepath() and _splitpath() functions.  They include space for the '\0'
 * terminator.
 */
:segment QNX | LINUX
#define _MAX_DRIVE      48      /*  maximum length of node name w/ '\0' */
#define _MAX_NODE    _MAX_DRIVE /*  maximum length of node name w/ '\0' */
#define _MAX_DIR        256     /*  maximum length of subdirectory      */
#define _MAX_FNAME      48      /*  maximum length of a file name       */
#define _MAX_EXT        48      /*  maximum length of a file extension  */
:elsesegment DOS
#if defined(__NT__) || defined(__OS2__) || defined(__WATCOM_LFN__)
#define _MAX_DRIVE   3  /* maximum length of drive component */
#define _MAX_DIR    256 /* maximum length of path component */
#define _MAX_FNAME  256 /* maximum length of file name component */
#define _MAX_EXT    256 /* maximum length of extension component */
#else
#define _MAX_DRIVE   3  /* maximum length of drive component */
#define _MAX_DIR    130 /* maximum length of path component */
#define _MAX_FNAME   9  /* maximum length of file name component */
#define _MAX_EXT     5  /* maximum length of extension component */
#ifndef _MAX_NAME
#define _MAX_NAME    13  /* maximum length of file name (with extension) */
#endif
#endif
:endsegment

#define _MAX_PATH2 (_MAX_PATH+3) /* maximum size of output buffer
                                    for _splitpath2() */

:segment !QNX & !LINUX
_WCRTLINK char     *** _WRTLCALL __get_environ_ptr( void );
_WCRTLINK wchar_t  *** _WRTLCALL __get_wenviron_ptr( void );
_WCRTLINK int      * _WRTLCALL __get_fileinfo_ptr( void );
#if defined(__FUNCTION_DATA_ACCESS)
 #define environ   (*__get_environ_ptr())
 #define _wenviron (*__get_wenviron_ptr())
 #define _fileinfo (*__get_fileinfo_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define environ   environ_br
 #define _wenviron _wenviron_br
 #define _fileinfo _fileinfo_br
#endif
:endsegment
_WCRTLINK extern char **_WCNEAR environ;        /*  pointer to environment table */
:segment !NO_WIDECHAR
#ifdef __NETWARE__
_WCRTLINK extern wchar_t **_WCDATA _wenviron;   /* pointer to wide environment */
#else
_WCRTLINK extern wchar_t **_WCNEAR _wenviron;   /*  pointer to wide environment */
#endif
:endsegment
:segment !QNX & !LINUX
#if defined(__NT__)
 _WCRTLINK extern int _fileinfo;        /* for inheriting POSIX handles */
#endif
:endsegment

:include errno.sp

:segment !QNX & !LINUX
_WCRTLINK extern int    * _WRTLCALL __get_doserrno_ptr( void );
#define _doserrno       (*__get_doserrno_ptr())     /* DOS system error code value */
_WCRTLINK extern int    _doserrno;

#if !defined(__NETWARE__)
#define sys_errlist _sys_errlist
#define sys_nerr _sys_nerr
#endif
_WCRTLINK unsigned           * _WRTLCALL __get_psp_ptr( void );
_WCRTLINK unsigned char      * _WRTLCALL __get_osmode_ptr( void );
_WCRTLINK int                * _WRTLCALL __get_fmode_ptr( void );
_WCRTLINK char               ** _WRTLCALL __get_sys_errlist_ptr( void );
_WCRTLINK int                * _WRTLCALL __get_sys_nerr_ptr( void );
_WCRTLINK unsigned           * _WRTLCALL __get_minreal_ptr( void );
_WCRTLINK unsigned long      * _WRTLCALL __get_win_alloc_flags_ptr( void );
_WCRTLINK unsigned long      * _WRTLCALL __get_win_realloc_flags_ptr( void );
#if defined(__FUNCTION_DATA_ACCESS)
 #define _psp                (*__get_psp_ptr())
 #define _osmode             (*__get_osmode_ptr())
 #define _fmode              (*__get_fmode_ptr())
 #define _sys_errlist        (*__get_sys_errlist_ptr())
 #define _sys_nerr           (*__get_sys_nerr_ptr())
 #define __minreal           (*__get_minreal_ptr())
 #define __win_alloc_flags   (*__get_win_alloc_flags_ptr())
 #define __win_realloc_flags (*__get_win_realloc_flags_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define _psp                _psp_br
 #define _osmode             _osmode_br
 #define _fmode              _fmode_br
 #define _sys_errlist        _sys_errlist_br
 #define _sys_nerr           _sys_nerr_br
 #define __minreal           __minreal_br
 #define __win_alloc_flags   __win_alloc_flags_br
 #define __win_realloc_flags __win_realloc_flags_br
#endif
_WCRTLINK extern unsigned _WCDATA    _psp;      /* Program Segment Prefix */
#define DOS_MODE 0                              /* Real Address Mode */
#define OS2_MODE 1                              /* Protected Address Mode */
_WCRTLINK extern unsigned char _WCNEAR _osmode; /* DOS_MODE or OS2_MODE */
_WCRTLINK extern int _WCNEAR        _fmode;     /* default file translation mode */
_WCRTLINK extern char *             _sys_errlist[];/* strerror error message table */
_WCRTLINK extern int _WCNEAR        _sys_nerr;  /* # of entries in _sys_errlist array */
_WCRTLINK extern unsigned _WCDATA   __minreal;  /* DOS4GW var for WLINK MINREAL option*/
_WCRTLINK extern unsigned long _WCDATA __win_alloc_flags; /* Windows allocation flags */
_WCRTLINK extern unsigned long _WCDATA __win_realloc_flags;/* Windows reallocation flags */

:endsegment
_WCRTLINK unsigned      * _WRTLCALL __get_amblksiz_ptr( void );
_WCRTLINK unsigned char * _WRTLCALL __get_osmajor_ptr( void );
_WCRTLINK unsigned char * _WRTLCALL __get_osminor_ptr( void );
#if defined(__FUNCTION_DATA_ACCESS)
 #define _amblksiz      (*__get_amblksiz_ptr())
 #define _osmajor       (*__get_osmajor_ptr())
 #define _osminor       (*__get_osminor_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define _amblksiz      _amblksiz_br
 #define _osmajor       _osmajor_br
 #define _osminor       _osminor_br
#endif
_WCRTLINK extern unsigned _WCNEAR       _amblksiz;   /*  mallocs done in multiples of    */
_WCRTLINK extern unsigned char _WCNEAR  _osmajor;    /*  O/S major version # */
_WCRTLINK extern unsigned char _WCNEAR  _osminor;    /*  O/S minor version # */

:segment !QNX & !LINUX
#if defined(__NT__)
 _WCRTLINK unsigned short   * _WRTLCALL __get_osbuild_ptr( void );
 _WCRTLINK unsigned int     * _WRTLCALL __get_osver_ptr( void );
 _WCRTLINK unsigned int     * _WRTLCALL __get_winmajor_ptr( void );
 _WCRTLINK unsigned int     * _WRTLCALL __get_winminor_ptr( void );
 _WCRTLINK unsigned int     * _WRTLCALL __get_winver_ptr( void );
 #if defined(__FUNCTION_DATA_ACCESS)
  #define _osbuild          (*__get_osbuild_ptr())
  #define _osver            (*__get_osver_ptr())
  #define _winmajor         (*__get_winmajor_ptr())
  #define _winminor         (*__get_winminor_ptr())
  #define _winver           (*__get_winver_ptr())
 #elif defined(__SW_BR) || defined(_RTDLL)
  #define _osbuild          _osbuild_br
  #define _osver            _osver_br
  #define _winmajor         _winmajor_br
  #define _winminor         _winminor_br
  #define _winver           _winver_br
 #endif
 _WCRTLINK extern unsigned short _WCDATA _osbuild;  /*  O/S build revision  */
 _WCRTLINK extern unsigned int _WCDATA _osver;      /*  O/S build revision  */
 _WCRTLINK extern unsigned int _WCDATA _winmajor;   /*  O/S major version # */
 _WCRTLINK extern unsigned int _WCDATA _winminor;   /*  O/S minor version # */
 _WCRTLINK extern unsigned int _WCDATA _winver;     /*  O/S version #       */
#endif
:endsegment
extern  int       __argc;       /* number of cmd line args */
extern  char    **__argv;       /* vector of cmd line args */
:segment !QNX & !LINUX & !NO_WIDECHAR
#if defined(__NT__) || (defined(__OS2__) && (defined(__386__) || defined(__PPC__)))
extern  int       __wargc;      /* number of wide cmd line args */
extern  wchar_t **__wargv;      /* vector of wide cmd line args */
#endif
:endsegment

:segment QNX | LINUX
:include alloca.sp
:endsegment

:segment QNX
#if defined(__386__)
:endsegment
:segment QNX | LINUX
_WCRTLINK extern int          _WRTLCALL brk( void *endds );
_WCRTLINK extern void _WCNEAR * _WRTLCALL sbrk( int incr );
:endsegment
:segment QNX
#else
:endsegment
:segment !LINUX
_WCRTLINK extern void _WCNEAR * _WRTLCALL __brk( unsigned __new_brk_value );
_WCRTLINK extern void _WCNEAR * _WRTLCALL sbrk( int __increment );
:endsegment
:segment QNX
#endif
:endsegment

 typedef void (*onexit_t)( void );
_WCRTLINK extern onexit_t     _WRTLCALL onexit( onexit_t __func );

#endif /* End of extensions section. */

:include poppack.sp
:segment CNAME
:include cplusepi.sp
:endsegment

:segment !CNAME
#endif /* __cplusplus */
:endsegment

#endif

:segment CNAME
:: For C++ provide the appropriate overloaded signatures. These signatures
:: must not be extern "C" (which is why they are down here).
#ifndef _INCLUDED_FROM_STDLIB_H
#ifndef _CSTDLIB_AUX_INCLUDED
#define _CSTDLIB_AUX_INCLUDED
namespace std {
  inline long int abs( long int __x ) { return( labs( __x ) ); }
  inline ldiv_t div( long int __n, long int __d )
    { return( ldiv( __n, __d ) ); }
}
#endif
#endif
:endsegment
