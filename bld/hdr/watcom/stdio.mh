/**************************************************************************
 * FILE: stdio.h/cstdio (Standard I/O functions)
 *
:include crwatqnx.sp
 *
 * Description: This header is part of the C/C++ standard library. It
 *              describes the I/O facilities provided by the C standard.
 **************************************************************************/
:segment CNAME
#ifndef _CSTDIO_INCLUDED
#define _CSTDIO_INCLUDED

#ifndef __cplusplus
#error the header cstdio requires C++
#endif
:elsesegment
#ifndef _STDIO_H_INCLUDED
#define _STDIO_H_INCLUDED
:endsegment

:include readonly.sp
::
:: The following somewhat long segment only appears in stdio.h.
:segment !CNAME
#ifdef __cplusplus
#include <cstdio>

// C99 types in stdio.h.
using std::FILE;
using std::fpos_t;
#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
#define _SIZE_T_DEFINED_
using std::size_t;
#endif

// C99 functions in stdio.h.
using std::clearerr;
using std::fclose;
using std::feof;
using std::ferror;
using std::fflush;
using std::fgetc;
using std::fgetpos;
using std::fgets;
using std::fopen;
using std::fprintf;
using std::fputc;
using std::fputs;
using std::fread;
using std::freopen;
using std::fscanf;
using std::fseek;
using std::fsetpos;
using std::ftell;
using std::fwrite;
using std::getc;
using std::getchar;
using std::gets;
using std::perror;
using std::printf;
using std::putc;
using std::putchar;
using std::puts;
using std::remove;
using std::rename;
using std::rewind;
using std::scanf;
using std::setbuf;
using std::setvbuf;
using std::sprintf;
using std::sscanf;
using std::tmpfile;
using std::tmpnam;
using std::ungetc;
using std::vfprintf;
using std::vprintf;
using std::vsprintf;

:: Now the extensions section.
:include ext.sp
// C99 types that are not specified for stdio.h
#ifndef _WCTYPE_T_DEFINED
#define _WCTYPE_T_DEFINED
#define _WCTYPE_T_DEFINED_
using std::wint_t;
using std::wctype_t;
#endif

// C99 functions in stdio.h that are currently considered extensions.
using std::snprintf;
using std::vfscanf;
using std::vscanf;
using std::vsnprintf;
using std::vsscanf;

:segment !SNAPDRV & !NO_WIDECHAR
// C99 functions that are not specified for stdio.h
using std::fgetwc;
using std::fgetws;
using std::fputwc;
using std::fputws;
using std::fwprintf;
using std::fwscanf;
using std::getwc;
using std::getwchar;
using std::putwc;
using std::putwchar;
#ifndef swprintf
using std::swprintf;
#endif
using std::swscanf;
using std::ungetwc;
using std::vfwprintf;
using std::vfwscanf;
using std::vswprintf;
using std::vswscanf;
using std::vwprintf;
using std::vwscanf;
using std::wprintf;
using std::wscanf;
:endsegment
#endif

#else /* __cplusplus not defined */
:: End of segment that is only in stdio.h
:endsegment

:: Only need extern "C" in cstdio
:segment CNAME
:include cpluspro.sp
:endsegment

#ifndef _COMDEF_H_INCLUDED
 #include <_comdef.h>
#endif

:include pshpackl.sp

:include sizet.sp

:include null.sp

:include valist.sp

:segment QNX | LINUX
#define BUFSIZ          4096        /*  Default buffer size                 */
#define _NFILES         16          /*  minimum guaranteed open files       */
#define FILENAME_MAX    255
:elsesegment
#if defined(__386__) || defined(__AXP__) || defined(__PPC__)
 #define BUFSIZ         4096
#else
 #define BUFSIZ         512
#endif
::
#define _NFILES         20      /* number of files that can be handled */
#if defined(__OS2__) || defined(__NT__)
 #define FILENAME_MAX   260
#else
 #define FILENAME_MAX   144
#endif
:endsegment

:: This (strange?) technique keeps the name '__iobuf' in the global namespace.
struct __stream_link;
struct __iobuf;
#if !defined(__OBSCURE_STREAM_INTERNALS)
struct __iobuf {
    unsigned char        *_ptr;         /* next character position */
    int                   _cnt;         /* number of characters left */
    struct __stream_link *_link;        /* location of associated struct */
    unsigned              _flag;        /* mode of file access */
    int                   _handle;      /* file handle */
    unsigned              _bufsize;     /* size of buffer */
    unsigned short        _ungotten;    /* used by ungetc and ungetwc */
:segment QNX
    struct __iobuf       *_unused;      /* spare entry */
:endsegment
};
#endif

:segment CNAME
namespace std {
:endsegment
typedef struct __iobuf FILE;
typedef long           fpos_t;
:segment CNAME
}
:endsegment

:segment QNX | LINUX
#define FOPEN_MAX   _NFILES
:elsesegment
:include ext.sp
 #define FOPEN_MAX      _NFILES
 #define OPEN_MAX       FOPEN_MAX
 #if defined(__OS2__) || defined(__NT__)
  #define PATH_MAX      259 /* maximum length of full pathname excl. '\0' */
 #else
  #define PATH_MAX      143 /* maximum length of full pathname excl. '\0' */
 #endif
#else                   /* extensions not enabled */
 #define FOPEN_MAX      (_NFILES-2)
#endif
:endsegment

:segment CNAME
_WCRTLINK extern std::FILE  * _WRTLCALL __get_iob_ptr( void );
:elsesegment
_WCRTLINK extern FILE       * _WRTLCALL __get_iob_ptr( void );
:endsegment
#if defined(__FUNCTION_DATA_ACCESS)
 #define __iob          (*__get_iob_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define __iob          __iob_br
#endif

#if !defined(__OBSCURE_STREAM_INTERNALS)
:segment CNAME
_WCRTLINK extern std::FILE _WCNEAR __iob[];
/*
 *  Define macros to access the three default file pointer (and descriptors)
 *  provided to each process by default. They will always occupy the
 *  first three file pointers in each processes' table.
 */
#define stdin   ((std::FILE *)&__iob[0])     /* standard input file  */
#define stdout  ((std::FILE *)&__iob[1])     /* standard output file */
#define stderr  ((std::FILE *)&__iob[2])     /* standard error file  */
:elsesegment
_WCRTLINK extern FILE _WCNEAR __iob[];
/*
 *  Define macros to access the three default file pointer (and descriptors)
 *  provided to each process by default. They will always occupy the
 *  first three file pointers in each processes' table.
 */
#define stdin   ((FILE *)&__iob[0])     /* standard input file  */
#define stdout  ((FILE *)&__iob[1])     /* standard output file */
#define stderr  ((FILE *)&__iob[2])     /* standard error file  */
:endsegment
:segment DOS
#ifndef NO_EXT_KEYS     /* extensions enabled */
#if defined(__DOS__) || defined(__WINDOWS__) || defined(__OSI__)
:segment CNAME
#define stdaux  ((std::FILE *)&__iob[3])     /* standard auxiliary file  */
#define stdprn  ((std::FILE *)&__iob[4])     /* standard printer file  */
:elsesegment
#define stdaux  ((FILE *)&__iob[3])     /* standard auxiliary file  */
#define stdprn  ((FILE *)&__iob[4])     /* standard printer file  */
:endsegment
#endif
#endif
:endsegment

#else /* __OBSCURE_STREAM_INTERNALS is defined */

:segment CNAME
_WCRTLINK extern std::FILE * _WRTLCALL __get_std_file(unsigned handle);
:elsesegment
_WCRTLINK extern FILE * _WRTLCALL __get_std_file(unsigned handle);
:endsegment

#define stdin   (__get_std_file(0))     /* standard input file  */
#define stdout  (__get_std_file(1))     /* standard output file */
#define stderr  (__get_std_file(2))     /* standard error file  */
:segment DOS
#ifndef NO_EXT_KEYS     /* extensions enabled */
#if defined(__DOS__) || defined(__WINDOWS__)
#define stdaux  (__get_std_file(3))     /* standard auxiliary file  */
#define stdprn  (__get_std_file(4))     /* standard printer file  */
#endif
#endif
:endsegment

#endif /* __OBSCURE_STREAM_INTERNALS */

:segment QNX | LINUX
/* values for _flag field in FILE struct */
:elsesegment
/* values for _flag field in FILE struct and _iomode array */
:endsegment

#define _READ   0x0001  /* file opened for reading */
#define _WRITE  0x0002  /* file opened for writing */
:segment QNX | LINUX
#define _UNGET  0x0100  /* ungetc has been done */
:elsesegment
#define _UNGET  0x0004  /* ungetc has been done */
:endsegment
#define _BIGBUF 0x0008  /* big buffer allocated */
#define _EOF    0x0010  /* EOF has occurred */
#define _SFERR  0x0020  /* error has occurred on this file */
#define _APPEND 0x0080  /* file opened for append */
:segment QNX | LINUX
#define _BINARY 0x0000  /* not required for POSIX QNX       */
#define _IOFBF  0x0000  /*  full buffering                  */
#define _IOLBF  0x0040  /*  line buffering                  */
#define _IONBF  0x0004  /*  no buffering                    */
:elsesegment
#define _BINARY 0x0040  /* file is binary, skip CRLF processing */
#define _IOFBF  0x0100  /* full buffering */
#define _IOLBF  0x0200  /* line buffering */
#define _IONBF  0x0400  /* no buffering */
:endsegment
#define _TMPFIL 0x0800  /* this is a temporary file */
#define _DIRTY  0x1000  /* buffer has been modified */
#define _ISTTY  0x2000  /* is console device */
#define _DYNAMIC 0x4000 /* FILE is dynamically allocated   */
#define _FILEEXT 0x8000 /* lseek with positive offset has been done */
#define _COMMIT 0x0001  /* extended flag: commit OS buffers on flush */

#define EOF         (-1)                /*  End of File/Error return code   */

#define SEEK_SET    0                   /*  Seek relative to start of file  */
#define SEEK_CUR    1                   /*  Seek relative to current positn */
#define SEEK_END    2                   /*  Seek relative to end of file    */

#define _NOT_ORIENTED   0               /* stream not yet oriented */
#define _BYTE_ORIENTED  1               /* byte-oriented stream */
#define _WIDE_ORIENTED  2               /* wide-oriented stream */

:segment QNX | LINUX
:include unixext.sp
#define L_cuserid   14                  /*  Max length of login names       */
#define L_ctermid   16                  /*  Max length of terminal names    */
#define P_tmpdir    "/usr/tmp"          /*  Temporary file directory        */
#endif
#define L_tmpnam    255                 /*  Max length of tmp file names    */
:elsesegment
#define L_tmpnam    13
#define _P_tmpdir   "\\"                /* used by _tempnam */
#define _wP_tmpdir  L"\\"               /* used by _wtempnam */
:endsegment
#define TMP_MAX     (26*26*26)          /*  Max times tmpnam can be called  */

:: Declarations of standard C99 functions (but see below for more information).
:segment CNAME
namespace std {
:endsegment
_WCRTLINK extern void   _WRTLCALL clearerr( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL fclose( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL feof( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL ferror( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL fflush( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL fgetc( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL fgetpos( FILE *__fp, fpos_t *__pos );
_WCRTLINK extern char  * _WRTLCALL fgets( char *__s, int __n, FILE *__fp );
_WCRTLINK extern FILE  * _WRTLCALL fopen( const char *__filename, const char *__mode );
_WCRTLINK extern int    _WRTLCALL fprintf( FILE *__fp, const char *__format, ... );
_WCRTLINK extern int    _WRTLCALL fputc( int __c, FILE *__fp );
_WCRTLINK extern int    _WRTLCALL fputs( const char *__s, FILE *__fp );
_WCRTLINK extern size_t _WRTLCALL fread( void *__ptr, size_t __size, size_t __n,
                               FILE *__fp );
_WCRTLINK extern FILE  * _WRTLCALL freopen( const char *__filename, const char *__mode,
                                 FILE *__fp );
_WCRTLINK extern int    _WRTLCALL fscanf( FILE*__fp, const char *__format, ... );
_WCRTLINK extern int    _WRTLCALL fseek( FILE *__fp, long int __offset, int __whence );
_WCRTLINK extern int    _WRTLCALL fsetpos( FILE *__fp, const fpos_t *__pos );
_WCRTLINK extern long   _WRTLCALL ftell( FILE *__fp );
_WCRTLINK extern size_t _WRTLCALL fwrite( const void *__ptr, size_t __size, size_t __n,
                                FILE *__fp );
_WCRTLINK extern int    _WRTLCALL getc( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL getchar( void );
_WCRTLINK extern char  * _WRTLCALL gets( char *__s );
_WCRTLINK extern void   _WRTLCALL perror( const char *__s );
_WCRTLINK extern int    _WRTLCALL printf( const char *__format, ... );
_WCRTLINK extern int    _WRTLCALL putc( int __c, FILE *__fp );
_WCRTLINK extern int    _WRTLCALL putchar( int __c );
_WCRTLINK extern int    _WRTLCALL puts( const char *__s );
_WCRTLINK extern int    _WRTLCALL remove( const char *__filename );
_WCRTLINK extern int    _WRTLCALL rename( const char *__old, const char *__new );
_WCRTLINK extern void   _WRTLCALL rewind( FILE *__fp );
_WCRTLINK extern int    _WRTLCALL scanf( const char *__format, ... );
_WCRTLINK extern void   _WRTLCALL setbuf( FILE *__fp, char *__buf );
_WCRTLINK extern int    _WRTLCALL setvbuf( FILE *__fp, char *__buf, int __mode,
                                 size_t __size );
_WCRTLINK extern int    _WRTLCALL sprintf( char *__s, const char *__format, ... );
_WCRTLINK extern int    _WRTLCALL sscanf( const char *__s, const char *__format, ... );
_WCRTLINK extern FILE  * _WRTLCALL tmpfile( void );
_WCRTLINK extern char  * _WRTLCALL tmpnam( char *__s );
_WCRTLINK extern int    _WRTLCALL ungetc( int __c, FILE *__fp );
_WCRTLINK extern int    _WRTLCALL vfprintf( FILE *__fp, const char *__format,
                                  __va_list __arg );
_WCRTLINK extern int    _WRTLCALL vprintf( const char *__format, __va_list __arg );
_WCRTLINK extern int    _WRTLCALL vsprintf( char *__s, const char *__format,
                                  __va_list __arg );
:: End of namespace std
:segment CNAME
}
:endsegment

:: Implementation specific functions remain in the global namespace.
:segment !SNAP & !SNAPDRV
:segment CNAME
_WCRTLINK extern int        _WRTLCALL _getw( std::FILE *__fp );
_WCRTLINK extern int        _WRTLCALL _pclose( std::FILE *__fp );
_WCRTLINK extern std::FILE * _WRTLCALL _popen( const char *__command,
                                     const char *__mode );
_WCRTLINK extern int        _WRTLCALL _putw( int __binint, std::FILE *__fp );
:elsesegment
_WCRTLINK extern int   _WRTLCALL _getw( FILE *__fp );
_WCRTLINK extern int   _WRTLCALL _pclose( FILE *__fp );
_WCRTLINK extern FILE * _WRTLCALL _popen( const char *__command, const char *__mode );
_WCRTLINK extern int   _WRTLCALL _putw( int __binint, FILE *__fp );
:endsegment
_WCRTLINK extern char * _WRTLCALL _tempnam( char *__dir, char *__prefix );
:endsegment

:: Extensions section.
:include ext.sp
:include wchar_t.sp

:include wctypet.sp

:segment CNAME
#define WEOF  ((std::wint_t)(-1)) /*  EOF equivalent for wide chars   */
:elsesegment
#define WEOF  ((wint_t)(-1))      /*  EOF equivalent for wide chars   */
:endsegment

:segment CNAME
namespace std {
:endsegment
/* These names are in stdio according to C99. */
_WCRTLINK extern int     _WRTLCALL snprintf( char *__buf, size_t __bufsize,
                                   const char *__fmt, ... );
_WCRTLINK extern int     _WRTLCALL vfscanf( FILE *__fp, const char *__format,
                                  __va_list __arg );
_WCRTLINK extern int     _WRTLCALL vscanf( const char *__format, __va_list __arg );
_WCRTLINK extern int     _WRTLCALL vsnprintf( char *__s, size_t __bufsize,
                                    const char *__format, __va_list __arg );
_WCRTLINK extern int     _WRTLCALL vsscanf( const char *__s, const char *__format,
                                  __va_list __arg );

:segment !SNAPDRV & !NO_WIDECHAR
/* These names are not in stdio according to C99. */
_WCRTLINK extern wint_t   _WRTLCALL getwc( FILE * );
_WCRTLINK extern wint_t   _WRTLCALL getwchar( void );
_WCRTLINK extern wint_t   _WRTLCALL fgetwc( FILE * );
_WCRTLINK extern wchar_t * _WRTLCALL fgetws( wchar_t *, int, FILE * );
_WCRTLINK extern wint_t   _WRTLCALL fputwc( wint_t, FILE * );
_WCRTLINK extern int      _WRTLCALL fputws( const wchar_t *, FILE * );
_WCRTLINK extern int      _WRTLCALL fwprintf( FILE *, const wchar_t *, ... );
_WCRTLINK extern int      _WRTLCALL fwscanf( FILE *, const wchar_t *, ... );
_WCRTLINK extern wint_t   _WRTLCALL putwc( wint_t, FILE * );
_WCRTLINK extern wint_t   _WRTLCALL putwchar( wint_t );
#ifndef swprintf
_WCRTLINK extern int      _WRTLCALL swprintf( wchar_t *, size_t, const wchar_t *, ... );
#endif
_WCRTLINK extern int      _WRTLCALL swscanf( const wchar_t *, const wchar_t *, ... );
_WCRTLINK extern wint_t   _WRTLCALL ungetwc( wint_t, FILE * );
_WCRTLINK extern int      _WRTLCALL vfwprintf( FILE *, const wchar_t *, __va_list );
_WCRTLINK extern int      _WRTLCALL vfwscanf( FILE *, const wchar_t *, __va_list );
_WCRTLINK extern int      _WRTLCALL vswprintf( wchar_t *, size_t, const wchar_t *,
                                     __va_list );
_WCRTLINK extern int      _WRTLCALL vswscanf( const wchar_t *, const wchar_t *,
                                    __va_list );
_WCRTLINK extern int      _WRTLCALL vwprintf( const wchar_t *, __va_list );
_WCRTLINK extern int      _WRTLCALL vwscanf( const wchar_t *, __va_list );
_WCRTLINK extern int      _WRTLCALL wprintf( const wchar_t *, ... );
_WCRTLINK extern int      _WRTLCALL wscanf( const wchar_t *, ... );
:endsegment
:segment CNAME
}
:endsegment

/* These names are not part of C89 or C99. */
::
:: The following is generated into cstdio
:segment CNAME
_WCRTLINK extern int           _WRTLCALL flushall( void );
:segment !SNAPDRV
:segment !QNX & !LINUX
_WCRTLINK extern std::FILE    * _WRTLCALL _fdopen( int __handle, const char *__mode );
_WCRTLINK extern std::FILE    * _WRTLCALL fdopen( int __handle, const char *__mode );
:endsegment
_WCRTLINK extern int           _WRTLCALL _bprintf( char *__buf, std::size_t __bufsize,
                                         const char *__fmt, ... );
_WCRTLINK extern int           _WRTLCALL _fgetchar( void );
_WCRTLINK extern int           _WRTLCALL _fileno(std::FILE *);
_WCRTLINK extern int           _WRTLCALL _fputchar( int __c );
_WCRTLINK extern std::FILE    * _WRTLCALL _fsopen( const char *__filename,
                                        const char *__mode, int __shflag );
_WCRTLINK extern int           _WRTLCALL _grow_handles( int __new_count );
_WCRTLINK extern int           _WRTLCALL _snprintf( char *__buf, std::size_t __bufsize,
                                          const char *__fmt, ... );
_WCRTLINK extern int           _WRTLCALL _vbprintf( char *__s, std::size_t __bufsize,
                                       const char *__format, __va_list __arg );
_WCRTLINK extern int           _WRTLCALL _vsnprintf( char *__s, std::size_t __bufsize,
                                       const char *__format, __va_list __arg );
_WCRTLINK extern int           _WRTLCALL fcloseall( void );
_WCRTLINK extern int           _WRTLCALL fgetchar( void );
_WCRTLINK extern int           _WRTLCALL fileno(std::FILE *);
_WCRTLINK extern int           _WRTLCALL fputchar( int __c );

:segment !NO_WIDECHAR
/* These functions pertain to wide character handling. */
_WCRTLINK extern int           _WRTLCALL _bwprintf( wchar_t *, std::size_t,
                                          const wchar_t *, ... );
_WCRTLINK extern wchar_t      * _WRTLCALL _getws( wchar_t * );
_WCRTLINK extern std::wint_t   _WRTLCALL _fgetwchar( void );
_WCRTLINK extern std::wint_t   _WRTLCALL _fputwchar( std::wint_t );
_WCRTLINK extern int           _WRTLCALL _putws( const wchar_t * );
_WCRTLINK extern int           _WRTLCALL _snwprintf( wchar_t *, std::size_t,
                                           const wchar_t *, ... );
_WCRTLINK extern int           _WRTLCALL _swprintf( wchar_t *, const wchar_t *, ... );
_WCRTLINK extern int           _WRTLCALL _vbwprintf( wchar_t *, std::size_t,
                                           const wchar_t *, __va_list );
_WCRTLINK extern int           _WRTLCALL _vsnwprintf( wchar_t *, std::size_t,
                                            const wchar_t *, __va_list );
_WCRTLINK extern int           _WRTLCALL _vswprintf( wchar_t *,
                                           const wchar_t *, __va_list );
_WCRTLINK extern std::FILE    * _WRTLCALL _wfdopen( int, const wchar_t * );
_WCRTLINK extern std::FILE    * _WRTLCALL _wfopen( const wchar_t *, const wchar_t * );
_WCRTLINK extern std::FILE    * _WRTLCALL _wfreopen( const wchar_t *,
                                          const wchar_t *, std::FILE * );
_WCRTLINK extern std::FILE    * _WRTLCALL _wfsopen( const wchar_t *__filename,
                                         const wchar_t *__mode, int __shflag );
_WCRTLINK extern void          _WRTLCALL _wperror( const wchar_t * );
_WCRTLINK extern std::FILE    * _WRTLCALL _wpopen( const wchar_t *__command,
                                        const wchar_t *__mode );
_WCRTLINK extern int           _WRTLCALL _wremove( const wchar_t * );
_WCRTLINK extern int           _WRTLCALL _wrename( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t      * _WRTLCALL _wtempnam( wchar_t *__dir, wchar_t *__prefix );
_WCRTLINK extern wchar_t      * _WRTLCALL _wtmpnam( wchar_t * );
_WCRTLINK extern std::wint_t   _WRTLCALL fgetwchar( void );
_WCRTLINK extern std::wint_t   _WRTLCALL fputwchar( std::wint_t );
_WCRTLINK extern wchar_t      * _WRTLCALL getws( wchar_t * );
_WCRTLINK extern int           _WRTLCALL putws( const wchar_t * );
:endsegment
:endsegment
::
:: The following is generated into stdio.h
:elsesegment
_WCRTLINK extern int      _WRTLCALL flushall( void );
:segment !SNAPDRV
:segment !QNX & !LINUX
_WCRTLINK extern FILE    * _WRTLCALL _fdopen( int __handle, const char *__mode );
_WCRTLINK extern FILE    * _WRTLCALL fdopen( int __handle, const char *__mode );
:endsegment
_WCRTLINK extern int      _WRTLCALL _bprintf( char *__buf, size_t __bufsize,
                                    const char *__fmt, ... );
_WCRTLINK extern int      _WRTLCALL _fgetchar( void );
_WCRTLINK extern int      _WRTLCALL _fileno(FILE *);
_WCRTLINK extern int      _WRTLCALL _fputchar( int __c );
_WCRTLINK extern FILE    * _WRTLCALL _fsopen( const char *__filename, const char *__mode,
                                   int __shflag );
_WCRTLINK extern int      _WRTLCALL _grow_handles( int __new_count );
_WCRTLINK extern int      _WRTLCALL _snprintf( char *__buf, size_t __bufsize,
                                     const char *__fmt, ... );
_WCRTLINK extern int      _WRTLCALL _vbprintf( char *__s, size_t __bufsize,
                                     const char *__format, __va_list __arg );
_WCRTLINK extern int      _WRTLCALL _vsnprintf( char *__s, size_t __bufsize,
                                      const char *__format, __va_list __arg );
_WCRTLINK extern int      _WRTLCALL fcloseall( void );
_WCRTLINK extern int      _WRTLCALL fgetchar( void );
_WCRTLINK extern int      _WRTLCALL fileno(FILE *);
_WCRTLINK extern int      _WRTLCALL fputchar( int __c );

:segment !NO_WIDECHAR
/* These functions pertain to wide character handling. */
_WCRTLINK extern int      _WRTLCALL _bwprintf( wchar_t *, size_t, const wchar_t *, ... );
_WCRTLINK extern wint_t   _WRTLCALL _fgetwchar( void );
_WCRTLINK extern wint_t   _WRTLCALL _fputwchar( wint_t );
_WCRTLINK extern wchar_t * _WRTLCALL _getws( wchar_t * );
_WCRTLINK extern int      _WRTLCALL _putws( const wchar_t * );
_WCRTLINK extern int      _WRTLCALL _snwprintf( wchar_t *, size_t,
                                      const wchar_t *, ... );
_WCRTLINK extern int      _WRTLCALL _swprintf( wchar_t *, const wchar_t *, ... );
_WCRTLINK extern FILE    * _WRTLCALL _wfdopen( int, const wchar_t * );
_WCRTLINK extern FILE    * _WRTLCALL _wfopen( const wchar_t *, const wchar_t * );
_WCRTLINK extern FILE    * _WRTLCALL _wfreopen( const wchar_t *, const wchar_t *,
                                     FILE * );
_WCRTLINK extern FILE    * _WRTLCALL _wfsopen( const wchar_t *__filename,
                                   const wchar_t *__mode,  int __shflag );
_WCRTLINK extern void     _WRTLCALL _wperror( const wchar_t * );
_WCRTLINK extern FILE    * _WRTLCALL _wpopen( const wchar_t *__command,
                                   const wchar_t *__mode );
_WCRTLINK extern int      _WRTLCALL _wremove( const wchar_t * );
_WCRTLINK extern int      _WRTLCALL _wrename( const wchar_t *, const wchar_t * );
_WCRTLINK extern wchar_t * _WRTLCALL _wtempnam( wchar_t *__dir, wchar_t *__prefix );
_WCRTLINK extern wchar_t * _WRTLCALL _wtmpnam( wchar_t * );
_WCRTLINK extern int      _WRTLCALL _vbwprintf( wchar_t *, size_t, const wchar_t *,
                                      __va_list );
_WCRTLINK extern int      _WRTLCALL _vsnwprintf( wchar_t *, size_t, const wchar_t *,
                                       __va_list );
_WCRTLINK extern int      _WRTLCALL _vswprintf( wchar_t *, const wchar_t *, __va_list );
_WCRTLINK extern wint_t   _WRTLCALL fgetwchar( void );
_WCRTLINK extern wint_t   _WRTLCALL fputwchar( wint_t );
_WCRTLINK extern wchar_t * _WRTLCALL getws( wchar_t * );
_WCRTLINK extern int      _WRTLCALL putws( const wchar_t * );
:endsegment
:endsegment
:endsegment

:segment !CNAME
:include saferpro.sp

:include rsizet.sp

:include errnot.sp

_WCRTLINK extern char    * _WRTLCALL gets_s( char *s, rsize_t n );

_WCRTLINK extern int      fprintf_s( FILE * __restrict __stream,
                                     const char * __restrict __format, ... );
_WCRTLINK extern int      fscanf_s( FILE * __restrict __stream,
                                     const char * __restrict __format, ... );
_WCRTLINK extern int      printf_s( const char * __restrict __format, ... );
_WCRTLINK extern int      scanf_s( const char * __restrict __format, ... );
_WCRTLINK extern int      snprintf_s( char * __restrict __s, rsize_t __n,
                                      const char * __restrict __format, ... );
_WCRTLINK extern int      sprintf_s( char * __restrict s, rsize_t __n,
                                     const char * __restrict __format, ... );
_WCRTLINK extern int      sscanf_s( const char * __restrict __s,
                                    const char * __restrict __format, ... );
_WCRTLINK extern int      vfprintf_s( FILE * __restrict __stream,
                                      const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vfscanf_s( FILE * __restrict __stream,
                                      const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vprintf_s( const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vscanf_s( const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vsnprintf_s( char * __restrict __s, rsize_t __n,
                                       const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vsprintf_s( char * __restrict __s, rsize_t __n,
                                      const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vsscanf_s( const char * __restrict __s,
                                     const char * __restrict __format, __va_list __arg );
_WCRTLINK extern errno_t  fopen_s( FILE * __restrict * __restrict __streamptr,
                                   const char * __restrict __filename,
                                   const char * __restrict __mode);
_WCRTLINK extern errno_t  freopen_s( FILE * __restrict * __restrict __newstreamptr,
                                     const char * __restrict __filename,
                                     const char * __restrict __mode, FILE * __restrict __stream );
_WCRTLINK extern errno_t  tmpfile_s( FILE * __restrict * __restrict __streamptr);
_WCRTLINK extern errno_t  tmpnam_s( char * s, rsize_t __maxsize );

#define TMP_MAX_S   (26*26*26)      /* has to be same as TMP_MAX */

:segment QNX | LINUX
#define L_tmpnam_s  255             /* has to be same as L_tmpnam */
:elsesegment
#define L_tmpnam_s  13              /* has to be same as L_tmpnam */
:endsegment

:segment !NO_WIDECHAR
/* These functions pertain to wide character handling. */
_WCRTLINK extern errno_t _WRTLCALL _wfopen_s( FILE * __restrict * __restrict streamptr,
                                    const wchar_t * __restrict filename,
                                    const wchar_t * __restrict mode);
_WCRTLINK extern errno_t _WRTLCALL _wfreopen_s( FILE * __restrict * __restrict newstreamptr,
                                      const wchar_t * __restrict filename,
                                      const wchar_t * __restrict mode,
                                      FILE * __restrict stream );
_WCRTLINK extern errno_t _WRTLCALL _wtmpnam_s( wchar_t * s, rsize_t maxsize );
:endsegment

:include saferepi.sp
:endsegment

:segment !SNAPDRV & QNX
#ifdef _this_belongs_in_a_private_qnx_header
 extern int _input_line_max;            /* defaults to 20 */
:segment CNAME
 char   *input_line( std::FILE *, char *, int );
:elsesegment
 char   *input_line( FILE *, char *, int );
:endsegment
#endif
:endsegment
#endif /* End of extensions section */

:segment QNX | LINUX
:include unixext.sp
extern char       *ctermid( char * );
extern char       *cuserid( char * );
:segment CNAME
extern std::FILE  *fdopen( int __handle, const char *__mode );
extern std::FILE  *popen( const char *__filename, const char *__mode );
extern int         pclose( std::FILE *stream );
:elsesegment
extern FILE       *fdopen( int __handle, const char *__mode );
extern FILE       *popen( const char *__filename, const char *__mode );
extern int         pclose( FILE *stream );
:endsegment
#endif
:endsegment

:: Eliminate all macro versions of these functions from cstdio
:: Eventually they can be re-introduced as proper in-line functions.
:segment !CNAME
#if !defined(__OBSCURE_STREAM_INTERNALS)
#define clearerr(fp)    ((fp)->_flag &= ~(_SFERR|_EOF))
#define feof(fp)        ((fp)->_flag & _EOF)
#define ferror(fp)      ((fp)->_flag & _SFERR)
#define fileno(fp)      ((fp)->_handle)
#define _fileno(fp)     ((fp)->_handle)
#endif
::
#if defined(__SW_BD) || defined(__SW_BM)
#define getc(fp)        fgetc(fp)
#define putc(c,fp)      fputc(c,fp)
#else
#if !defined(__OBSCURE_STREAM_INTERNALS)
#define getc(fp) \
        ((fp)->_cnt<=0 \
:segment !QNX & !LINUX
        || (unsigned)((*(fp)->_ptr)-'\x0d')<=('\x1a'-'\x0d') \
:endsegment
        ? fgetc(fp) \
        : ((fp)->_cnt--,*(fp)->_ptr++))
::
#define putc(c,fp) \
        ((fp)->_flag&_IONBF \
        || (fp)->_bufsize-(fp)->_cnt<=1 \
        ? fputc(c,fp) \
        : ((*(fp)->_ptr=(unsigned char)(c))=='\n') \
        ? fputc('\n',fp) \
        : ((fp)->_flag|=_DIRTY,(fp)->_cnt++,*(fp)->_ptr++))
#endif
#endif
::
#define getchar()       getc(stdin)
#define putchar(c)      putc(c,stdout)
:endsegment

:include poppack.sp
:segment CNAME
:include cplusepi.sp
:endsegment

:: This #endif closes the #ifdef __cplusplus in stdio.h
:segment !CNAME
#endif
:endsegment

#endif
