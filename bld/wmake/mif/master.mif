#
#   The master file for creating wmake.
#

##############################################################################

proj_name   = wmake
xname       = wmk

!ifndef wmake_autodepends
wmake_autodepends = .AUTODEPEND
!endif

# DOS code will not fit in 64k with /d2
#!ifeq host_OS dos
#!ifeq host_CPU i86
#release_wmake = 1
#!endif
#!endif

!include cproj.mif
!include defrule.mif
!include deftarg.mif

.ERASE
.CONTINUE

.h      : ../h
.h      : $(watcom_dir)/h
.h      : $(trmem_dir)
.c      : ../c
.c      : $(watcom_dir)/c
.c      : $(trmem_dir)
.inc    : .
.inc    : ../h

!ifdef COMPACT
MODEL = c
!else ifdef MEDIUM
MODEL = m
!else ifdef LARGE
MODEL = l
!else
MODEL = s
!endif

!include wres.mif

echo    = echo

# Compiler Flags

extra_c_flags_win = -zW
!ifdef COMPACT
mem_model_i86 = -mc -zt32
!else ifdef MEDIUM
mem_model_i86 = -mm -zt32
!else ifdef LARGE
mem_model_i86 = -ml -zt32
!ifdef NEC_98_BUG
extra_c_flags_dos += -DNEC_98_BUG
!endif
!else
mem_model_i86 = -ms
!endif

inc_dirs = $(wmake_dir)/h;$(watcom_dir)/h;$(orl_dir)/h;$(trmem_dir);

!ifdef cachestat
extra_c_flags += -dCACHE_STATS
!endif

!include ../mif/wmk.mif                    #   get our objs macro

##############################################################################

ext_qnx = qnx
ext_linux = elf
!ifdef ext_$(host_OS)
ext = $(ext_$(host_OS))
!else
ext = exe
!endif

# LINKER FLAGS

# large stacks are necessary for !loaddll support
# os2 seems to crash with 128k stack and wccd386 - mjc
extra_l_flags_os2 = option stack=96k
extra_l_flags_nt = option stack=0x10000k commit stack=32k
extra_l_flags_qnx = option stack=20k
lflags_win_i86 = system windows mem font
extra_l_flags_win = library windows,clibc export MAINDRIVER option stack=16k
!ifdef LARGE
extra_l_flags_dos = option stack=16k
!else ifdef COMPACT
extra_l_flags_dos = option stack=16k
!else
extra_l_flags_dos = option stack=4k
!endif
extra_l_flags = NAME $(xname).$(ext) OPTION MAP

libs_nt_386     = $(orl_dir)/o/orl.lib
libs_nt_axp     = $(orl_dir)/axp/orl.lib
libs_os2_386    = $(orl_dir)/os2/orl.lib
libs_qnx_386    = $(orl_dir)/o/orl.lib
libs_linux_386  = $(orl_dir)/o/orl.lib
libs_dos_386    = $(orl_dir)/o/orl.lib
libs            = $(libs_$(host_OS)_$(host_CPU))

$(xname).$(ext) :: usageend.gh wmake.res $(objs) $(__MAKEFILES__)
        $(linker) $(lflags) FILE {$(objs) } LIBRARY { $(wres_lib) $(libs) }
#
# If the linker files were different (i.e. if we needed a QNX version),
# the copy would be replaced by a separate link. CSK
!ifeq host_OS win
#    wstrip  wmk.exe . x.sym
        rc wmk
        rc wmkj
#    copy /b wmk.exe+x.sym
#    erase x.sym
!endif
        wstrip -q -a -r $(xname).$(ext) . wmake.res

wmake.res : ../h/wmake.rc mrcmsg.h usage.rc usagej.rc
        $(rc) -bt=windows -zk0 -q -r -fo=$^@ $[@

usage.rc : ../h/usage.sp
        wsplice -kIS_RC -kENGLISH -f "%+(MSG_USE_E_BASE+%$#-1), \"%s\"" ../h/usage.sp usage.rc

usagej.rc : ../h/usage.sp
        wsplice -kIS_RC -kJAPANESE -f "%+(MSG_USE_J_BASE+%$#-1), \"%s\"" ../h/usage.sp usagej.rc

usageend.gh : usage.rc usagej.rc
        wsplice usage.rc -o "%n%n%n%n" usage.rcp
        wsplice -f "%+" usage.rcp -o "$#define USAGE_LAST (USAGE_BASE+%$#)%n" usageend.gh
        rm -f usage.rcp

# usage.h : ..\h\usage.sp
# I want the usage message codes to be generated on the fly, and also
# padded by ten ( so that versions in different languages will still
# compile ).  Fortunately, by simply defining more constants, we don't
# make the final program any larger.  Oh well - the end justifying the
# means, I suppose. CSK
#       wsplice -k$(OS) -kENGLISH -f "%s"..\h\usage.sp -o "%n%n%n%n%n%n%n%n%n%n" usage.h
#       wsplice -f "$#define USAGE_LN_%$# (USAGE_BASE+%$#)%+" usage.h usage.h
#       wsplice -f "%s%+"usage.h -o "$#define USAGE_LAST (USAGE_BASE+%$#)" usage.h


##############################################################################
# special case targets

isarray.gh : ./cretype.exe
    $< > $@

./cretype.exe : cretype.c
    $(bld_cl) -fe=$@ -d2 -w4 $[@

# dependencies on .h files
mglob.obj : isarray.gh .AUTODEPEND


##############################################################################
# symbolic targets

# print a list of unreferenced messages
chkmsg :
    sed -f ../mif/msgdef.sed ../h/msg.h | sort -u >chkmsg.1
    awk -f ../mif/msgref.awk chkmsg.1 >chkmsg.2
    sed -f chkmsg.2 ../c/*.c | sort -u >chkmsg.3
    comm -3 chkmsg.1 chkmsg.3 | tee chkmsg
    rm chkmsg.?

strip : .symbolic
    wstrip /q wmk.$(ext) wmks.$(ext) >nul
    ls -l *.$(ext)

deps : .symbolic
    cd ../c
    ../support/mmk >../mif/makedeps.mif

do : .symbolic
    wmake -h -n | sed -f ../mif/mkdo.sed >do.bat
