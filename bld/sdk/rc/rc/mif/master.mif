proj_name = wrc
name = wrc

!ifeq sys_dll 1
xname = $(name).dll
!else
xname = $(name).exe
!endif

!ifndef wrc_autodepends
wrc_autodepends = .AUTODEPEND
!endif

additional_cleanup = ytab.*

!include cproj.mif
!include defrule.mif
!include deftarg.mif

#always use the most up to date wres library
!include wres.mif

.EXTENSIONS : .y .key .gh .res .rc

!ifeq release 0
!ifeq host_os nt
!ifneq host_cpu axp
TRACK_MEM_OPTS = -DRCMEM_DEBUG
!else   # axp: -DRCMEM_DEBUG version is NOT working! Fix me!
!endif
!else
TRACK_MEM_OPTS = -DRC_USE_TRMEM -of+
WRC_USE_TRMEM = 1
!endif
!endif

splice_opts = -kDEBUG

objs =  ytab.obj &
        errors.obj errprt.obj exeobj.obj exeres.obj exerespe.obj &
        exeseg.obj exeutil.obj global.obj &
        keyword.obj layer0.obj param.obj pass2.obj rc.obj rcio.obj &
        rcmem.obj rcstr.obj ppalloc.obj scan.obj semaccel.obj &
        semantic.obj semdiag.obj semmenu.obj semver.obj semtbar.obj&
        semraw.obj semsingl.obj semstr.obj swchar.obj dbtable.obj &
        preproc.obj ppexpr.obj ppmacro.obj tmpctl.obj autodep.obj &
        rcldstr.obj rcalloc1.obj rcalloc0.obj sharedio.obj semresfl.obj &
        leadbyte.obj

!ifeq sys_dll 1
objs += rcdll.obj libmain.obj idemsgpr.obj
!endif

!ifeq release 0
!ifeq WRC_USE_TRMEM 1
objs += trmem.obj
!endif
!endif

# cflags stuff
###############
extra_c_flags     = -DYYDEBUG -DSCANDEBUG
!ifeq host_os nt
extra_c_flags    += -DNT_HOSTED
!endif

!ifeq sys_dll 1
extra_c_flags    += -DDLL_COMPILE
!endif

extra_c_flags_rcalloc0 = $(TRACK_MEM_OPTS)
extra_c_flags_rcalloc1 = $(TRACK_MEM_OPTS)
extra_c_flags_rcmem = $(TRACK_MEM_OPTS)

# lflags stuff
###############
extra_l_flags = option map

!ifeq sys_dll 1
!ifeq host_os nt
extra_l_flags += option offset=0x69800000
!endif
!endif

extra_l_flags_osi = option symfile

# where to look for various files
.c : .;$(wrc_dir)/c;$(cpp_dir);$(trmem_dir);$(watcom_dir)/c
.y : $(wrc_dir)/y
.key : $(wrc_dir)/hash
.h : $(wrc_dir)/h;$(trmem_dir)

inc_dirs = -I. -I"$(wrc_dir)/h" -I"$(wres_dir)/h" -I"$(fe_misc_dir)/h" -I"$(cpp_dir)" -I$(trmem_dir)

# explicit rules

$(xname) : usage.rc usagej.rc rcmsg.gh $(objs) $(name).res $(wres_lib)
        $(linker) $(lflags) name $@ file { $(objs) } lib {$(wres_lib)}
        @%make bindit
        wstrip -q -a -r $^@ . $(name).res
!ifeq sys_dll 1
        @rm -f $(name).lib
        $(librarian) $(name).lib +$(name).dll
!endif

bindit : .PROCEDURE
!ifeq host_os osi
        w32bind $(name).rex $(name).exe $(tools_root)\os2ldr.exe
        erase $(name).rex
        @%null
!else ifeq host_os dos
        # Decide on which standard extender to use first...
#!error NYI
        @%null
!else
        @%null
!endif

ytab.c ytab.gh : rc.y $(wrc_dir)/y/yydriver.c rcmem.h
        $(byacc) -d -b $[@ $[:yydriver.c >$(nulldevice)
        @cp ytab.h ytab.gh
        @rm -f ytab.h

./findhash.exe: $(fe_misc_dir)/c/findhash.c
        $(bld_cl) $(wcl_util_opts) $<

weights.gh keywords.gh : ./findhash.exe ../hash/rc.key
        $[@ -q -m ../hash/rc.key

$(name).res : ../rc.rc .AUTODEPEND
        $(rc_aui) -ad $[@ -fo=$^@

rcmsg.gh : ../h/rc.msg
        $(vi) -s $(sdk_dir)/misc/msgtoh.vi -p"$^@" $[@

usage.rc : $(wrc_dir)/usage.sp
        wsplice -kENGLISH -kIS_RC -k$(host_os) $(splice_opts) -t8 -f "%+(MSG_USE_E_BASE+%$#-1), \"%s\"" ../usage.sp usage.rc

usagej.rc : $(wrc_dir)/usage.sp
        wsplice -kJAPANESE -kIS_RC -k$(host_os) $(splice_opts) -t8 -f "%+(MSG_USE_J_BASE+%$#-1), \"%s\"" ../usage.sp usagej.rc

keyword.obj : keyword.c keywords.gh weights.gh .AUTODEPEND
