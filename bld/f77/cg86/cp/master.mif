proj_name = f77

# Need lots of stack for NT because code gen turns off safe recurse.
extra_l_flags_nt = op stack=1024k commit stack=32k

!include cproj.mif
!include deftarg.mif
!include defrule.mif

!include $(cg_dir)/mif/fe.mif
!include wres.mif
!include mlibs.mif

inc_dirs=$(f77_dir)/cg86/cp/h;$(f77_dir)/cg86/h;$(cg_inc_dirs);$(f77_dir)/h;$(dwarf_dir)/dw/h;$(comp_cfg_dir)/h

!ifeq target_CPU 386
inc_dirs+=;$(wasm_dir)/h
inline_asm_lib=
pre_deps_wasm = inlnops.gh msg.gh
!else ifeq target_CPU i86
inc_dirs+=;$(wasm_dir)/h
inline_asm_lib=
pre_deps_wasm = inlnops.gh msg.gh
!else ifeq target_CPU axp
inc_dirs+=;$(as_dir)/h
inline_asm_lib=$(as_dir)/alpha/inline/o.$(host_CPU)/asinline.lib
!else ifeq target_CPU ppc
inc_dirs+=;$(as_dir)/h
inline_asm_lib=$(as_dir)/ppc/inline/o.$(host_CPU)/asinline.lib
!endif

# define _USE_RESOURCES_ so that WASM error messages come from resources
extra_c_flags_386 = -zp1 -fpc -d_USE_RESOURCES_

.h: $(f77_dir)/h;$(f77_dir)/cg86/h;$(f77_dir)/cg86/cp/h

!ifdef memtrack
.c: $(f77_dir)/cg86/cp/c;$(f77_dir)/cg86/c;$(f77_dir)/cp;$(f77_dir)/c;$(wasm_dir)/c;$(trmem_dir);
!else
.c: $(f77_dir)/cg86/cp/c;$(f77_dir)/cg86/c;$(f77_dir)/cp;$(f77_dir)/c;$(wasm_dir)/c
!endif

.c.obj:
    @set include=$(inc_path)
    $(cc) $(cflags) $(extra_c_flags_$[&) $[@

!ifeq host_CPU axp
asm_opts  = -oc -zq -we -i="$(f77_dir)/cg86/inc" -i="$(watcom_dir)/h"
.asm: $(f77_dir)/cg86/axpasm
.asm.obj:
    $(as) $[* $(asm_opts)
!endif

!include ../files.mif

!ifdef memtrack
fobjs += trmem.obj trmemcvr.obj
!endif

exename_i86 = wfc
exename_386 = wfc386
exename_axp = wfcaxp
exename_ppc = wfcppc
exe         = $(exename_$(target_CPU))

!ifdef f77_target_dir
bindir_nt  = binnt
bindir_dos = bin
bindir_os2 = binp
target_exe = $(f77_target_dir)/$(bindir_$(host_OS))/$(exe)
!else
target_exe = $(exe)
!endif

!ifdef mkstubs
f77_cg_libs = $(cg_stub_libs);
!else
!ifeq release_f77 1
f77_cg_libs = $(cg_libs)
!else
f77_cg_libs = $(cg_debug_libs)
!endif
!endif


$(target_exe).exe : $(pre_deps_wasm) $(fobjs) errmsg.res $(wres_lib) $(dw_lib) $(cg_deps) $(inline_asm_lib)
    @%create $(exe).lnk
    @for %i in ($(fobjs)) do @%append $(exe).lnk file %i
    $(linker) name $(target_exe) $(lflags) @$(exe) $(f77_cg_libs) op map lib $(wres_lib), $(dw_lib), $(inline_asm_lib)
!ifeq host_OS osi
    $(binder)\w32bind $(target_exe).rex $(target_exe).exe $(binder)\os2ldr.exe
    erase $(target_exe).rex
!endif
    wstrip -q -a -r $(target_exe) . errmsg.res

option.obj : option.c optinfo.h

!ifdef memtrack
trmem.obj : trmem.c
    @set include=$(inc_path);$(trmem_dir)
    $(cc) $(cflags) $(extra_c_flags_$[&) $[@ -dTRMEM -of+

trmemcvr.obj : trmemcvr.c
    @set include=$(inc_path);$(trmem_dir)
    $(cc) $(cflags) $(extra_c_flags_$[&) $[@ -dTRMEM -of+
!endif

errmsg.res : ../c/errmsg.rc ../h/errmsgi.rc ../h/errmsg3.rc ../h/errcod.h ../h/errcodi.h ../h/errcod3.h
    $(rc) -zk0 -r -i="$(inc_path)" -bt=windows -fo=$^@ $[@

./mkopcode.exe: $(wasm_dir)/mkopcode.c
        $(bld_cl) $[@ -fe=$@

inlnops.gh: ./mkopcode.exe $(wasm_dir)/inlnops.tok
        $[@ $(wasm_dir)/inlnops.tok $^@

msg.gh : $(wasm_dir)/h/asmshare.msg
!ifdef __LINUX__
        perl $(sdk_dir)/misc/msgtoh.pl < $[@ > t.msg
        sed -e '/0$$/d' -e 's/MSG_RC_BASE/MSG_RC_BASE-1/' t.msg > $^@
        rm -f t.msg
!else
        $(vi) -s $(wasm_dir)/h/makemsg.vi -p "$^@" $[@
!endif
