proj_name = f77

!include cproj.mif
!include deftarg.mif
!include defrule.mif

#------------------------ compiler options

extra_c_flags = -s -zl -zld -d__RT__
extra_c_flags_386 = -fp$(fp_model) -m$(model) -zp1
extra_c_flags_i86 = -fp$(fp_model) -m$(model)

!ifeq release 1
extra_c_flags_i86 += -fpr
extra_c_flags_386 += -fpr
!endif

!ifdef is_MT
extra_c_flags += -d__MT__
!endif

!ifdef is_DLL
extra_c_flags += -d__DLL__
!endif

!ifdef is_stack
extra_c_flags_386 += -3s -d__3S__
!endif

!ifeq model l
extra_c_flags_i86 += -zu
!endif

!ifdef is_NEC
extra_c_flags += -d__NEC__
!endif

#------------------------ assembler options

asm_incs  = -i"$(f77_dir)/cg86/inc" -i"$(watcom_dir)/h" -i"$(comp_cfg_dir)/h"
asm_opts  = -w3 -d1 -zq -fp$(fp_model) $(asm_incs) -fo=.obj

!ifeq host_CPU 386

asm_opts += -mf

!ifdef is_stack
asm_opts += -3s -3_
!else
asm_opts += -3
!endif

!ifdef is_MT
asm_opts += -d_MT_
!endif

!ifdef is_DLL
asm_opts += -d_DLL_
!endif

!ifeq host_OS win
asm_opts += -d_WINDOWS_
!endif

!ifeq host_OS os2
asm_opts += -d_OS2_
!endif

!ifeq host_OS nt
asm_opts += -d_NT_
!endif

!ifeq host_OS nov
asm_opts += -d_NETWARE_
!endif

!ifeq is_NEC
asm_opts += -d_NEC_
!endif

.asm: $(f77_dir)/cg86/rt/386asm;$(f77_dir)/cg86/rt/asm;$(f77_dir)/cg86/asm

!else ifeq host_CPU i86

asm_opts += -m$(model)

!ifeq host_OS win
asm_opts += -d_WINDOWS_
!endif

!ifeq host_OS os2
asm_opts += -d_OS2_
!endif

.asm: $(f77_dir)/cg86/rt/asm;$(f77_dir)/cg86/asm

!else ifeq host_CPU axp

asm_opts  = -oc -zq -we -i="$(f77_dir)/cg86/inc" -i="$(watcom_dir)/h"

!ifdef is_MT
asm_opts += -d_MT_
!endif

!ifdef is_DLL
asm_opts += -d_DLL_
!endif

!ifeq host_OS nt
asm_opts += -d_NT_
!endif

.asm: $(f77_dir)/cg86/rt/axpasm;$(f77_dir)/cg86/axpasm

!else ifeq host_CPU ppc

asm_opts  = -oe -zq -we -i="$(f77_dir)/cg86/inc" -i="$(watcom_dir)/h"

!ifdef is_MT
asm_opts += -d_MT_
!endif

!ifdef is_DLL
asm_opts += -d_DLL_
!endif

!ifeq host_OS nt
asm_opts += -d_NT_
!endif

.asm: $(f77_dir)/cg86/rt/ppcasm;$(f77_dir)/cg86/ppcasm

!endif

#-------------------------------------------------------------------------------

# "is_MT" is defined when building DLL and muti-threaded
# versions of the libraries

.asm.obj:
    $(as) $[* $(asm_opts)

inc_dirs=$(f77_dir)/cg86/rt/h;$(f77_dir)/cg86/h;$(f77_dir)/h;$(lib_misc_dir)/h;$(clib_dir)/h;$(hdr_dir)/dos;$(comp_cfg_dir)/h

.c: $(f77_dir)/cg86/rt/c;$(f77_dir)/cg86/c;$(f77_dir)/rt;$(f77_dir)/rt/math;$(f77_dir)/rt/ifns;$(f77_dir)/c;$(f77_dir)/rt/ufns
.c.obj:
    @set include=$(inc_path)
    $(cc) $(cflags) $(extra_c_flags_$[&) $[@

#-------------------------------------------------------------------------------

rt =
dep_rt =
both =
dep_both =
math =
ifns =
xfns =
ufns =

# Files required to support Dynamic Link Libraries
# ================================================

!ifdef is_DLL

dep_rt += &
    fdllinit.obj &
    fdllterm.obj &
    finitdll.obj &
    ftermdll.obj &
    ftrdinit.obj &
    ftrdterm.obj

dep_rt += &
    rtlbmain.obj

!endif

# Files required to support multiple threads
# ==========================================

!ifdef is_MT

rt += &
    finittrd.obj &
    ftermtrd.obj &
    fthrdini.obj &
    ioerr.obj &
    iomain.obj &
    pause.obj &
    rterr.obj &
    runmain.obj &
    setiocb.obj &
    settrace.obj &
    stop.obj &
    thrdutil.obj

both += &
    spawn.obj

dep_both += &
    btraps.obj &
    intarith.obj

dep_rt += &
    fiosem.obj &
    initftrd.obj &
    rdata.obj &
    rtinit.obj &
    rttraps.obj

ufns += &
    fthread.obj

!endif

rt += &
    aalloc.obj &
    arrayio.obj &
    setrecfm.obj &
    setiocb.obj &
    setfmt.obj &
    setnml.obj &
    setunit.obj &
    setintl.obj &
    seterr.obj &
    setend.obj &
    setrec.obj &
    setios.obj &
    setacc.obj &
    setblnk.obj &
    setfile.obj &
    setform.obj &
    setlen.obj &
    setstat.obj &
    setdir.obj &
    setfmtd.obj &
    setname.obj &
    setseq.obj &
    setunfmt.obj &
    setexst.obj &
    setnmd.obj &
    setnrec.obj &
    setnumb.obj &
    setopen.obj &
    setrecl.obj &
    setnofmt.obj &
    setcctrl.obj &
    setactn.obj &
    setbsize.obj &
    settrace.obj &
    inqbsize.obj &
    setshare.obj &
    iomain.obj &
    rmemmgr.obj &
    exback.obj &
    exclose.obj &
    exendf.obj &
    exinq.obj &
    exread.obj &
    exopen.obj &
    exrew.obj &
    exutil.obj &
    exwrite.obj &
    fmtrtns.obj &
    freeout.obj &
    freein.obj &
    ifile.obj &
    nmlio.obj &
    chrutils.obj &
    cctrl.obj &
    rdutils.obj &
    wrutils.obj &
    rdwr.obj &
    rtutls.obj &
    rtinq.obj &
    rfmterr.obj &
    rfmtemit.obj &
    rfmtinit.obj &
    rfmtexec.obj &
    rfmtlog.obj &
    rfmtutil.obj &
    unfmtin.obj &
    unfmtout.obj &
    unfmtutl.obj &
    rterr.obj &
    ioerr.obj &
    stop.obj &
    pause.obj &
    rfmttab.obj &
    rcat.obj &
    rtcat.obj &
    rmove.obj &
    rsubstr.obj &
    rsubscr.obj &
    runmain.obj &
    rstdio.obj &
    stracc.obj &
    subscr.obj &
    substr.obj

both += &
    blderr.obj &
    chinese.obj &
    csetinfo.obj &
    dbcsutil.obj &
    english.obj &
    errincl.obj &
    errrsrc.obj &
    errutil.obj &
    errrtns.obj &
    errgrp.obj &
    errmsg.obj &
    fmtboth.obj &
    fmtcnvt.obj &
    fmtscan.obj &
    hexcnv.obj &
    japanese.obj &
    korean.obj &
    lexcmp.obj &
    spawn.obj

dep_rt += &
    deffname.obj &
    fdutil.obj &
    flt86.obj &
    initeng.obj &
    initchi.obj &
    initjap.obj &
    initkor.obj &
    initrsrc.obj &
    initerr.obj &
    initcc.obj &
    initff.obj &
    initcoma.obj &
    ioinit.obj &
    rtsysutl.obj &
    stdio.obj &
    sysinq.obj &
    rdata.obj &
    expchk.obj &
    rtmain.obj &
    rtinit.obj &
    rttraps.obj &
    fptraps.obj &
    undefcg.obj &
    cortns.obj &
    coread.obj &
    cowrite.obj

!ifeq host_OS dos
!ifeq host_CPU 386
dep_rt += &
    realvec.obj
!endif
!endif

!ifeq host_CPU axp
dep_rt += &
    intovfrt.obj
!endif

!ifeq host_OS win
dep_rt += &
    fwinmain.obj
!endif

!ifeq host_OS nt
dep_rt += &
    fwinmain.obj
!endif

dep_both += &
    btraps.obj &
    intarith.obj &
    posback.obj &
    poscc.obj &
    posdat.obj &
    posdel.obj &
    poserr.obj &
    posflush.obj &
    posget.obj &
    posopen.obj &
    posput.obj &
    posrew.obj &
    posseek.obj &
    postrunc.obj &
    sdfile.obj

!ifeq host_CPU i86
dep_both += &
    i4mul.obj
!endif

math += &
    _matherr.obj

# The following support routines are provided in the math libraries.

!ifdef __never_defined__
math += &
    powc20.obj &
    powc16.obj &
    powc8.obj &
    divc20.obj &
    divc16.obj &
    divc8.obj

!ifeq fp_model c
math += &
    mulc8.obj &
    mulc16.obj &
    mulc20.obj
!endif
!endif

# The following support routines are generated in-line
# by the code generator (implemented as primitive operators).

!ifdef __never_defined__
math += &
    powri.obj &
    powxi.obj &
    powrr.obj &
    powii.obj
!endif

ifns += &
    ifaint.obj &
    ifanint.obj &
    ifccos.obj &
    ifcdcos.obj &
    ifcdexp.obj &
    ifcdlog.obj &
    ifcdsin.obj &
    ifcdsqrt.obj &
    ifcexp.obj &
    ifchar.obj &
    ifclog.obj &
    ifcsin.obj &
    ifcsqrt.obj &
    ifcqcos.obj &
    ifcqexp.obj &
    ifcqlog.obj &
    ifcqsin.obj &
    ifcqsqrt.obj &
    ifddim.obj &
    ifqdim.obj &
    ifdim.obj &
    ifdint.obj &
    ifqint.obj &
    ifdnint.obj &
    ifqnint.obj &
    ifdsign.obj &
    ifqsign.obj &
    ifi1dim.obj &
    ifi2dim.obj &
    ifidim.obj &
    ifidnint.obj &
    ifiqnint.obj &
    ifindex.obj &
    ifisign.obj &
    iflge.obj &
    iflgt.obj &
    iflle.obj &
    ifllt.obj &
    ifnint.obj &
    ifi1sign.obj &
    ifi2sign.obj &
    ifsign.obj &
    ifi1sha.obj &
    ifi1shc.obj &
    ifi1shft.obj &
    ifi1shl.obj &
    ifi2sha.obj &
    ifi2shc.obj &
    ifi2shft.obj &
    ifi2shl.obj &
    ifishl.obj &
    ifisha.obj &
    ifishc.obj &
    ifishft.obj &
    ifi1lshf.obj &
    ifi1rshf.obj &
    ifi2lshf.obj &
    ifi2rshf.obj &
    iflshift.obj &
    ifrshift.obj &
    ifi1bchg.obj &
    ifi2bchg.obj &
    ifibchng.obj &
    ifgamma.obj &
    ifdgamma.obj &
    ifqgamma.obj &
    ifalgama.obj &
    ifdlgama.obj &
    ifqlgama.obj &
    iferf.obj &
    iferfc.obj &
    ifderf.obj &
    ifderfc.obj &
    ifderfdt.obj &
    ifqerf.obj &
    ifqerfc.obj &
    ifqerfdt.obj &
    ifcabs.obj &
    ifcdabs.obj &
    ifcqabs.obj &
    iflen.obj &
    iflentrm.obj

# The following intrinsic functions are generated in-line by the front end
# but are required because they define the X... versions which are
# referenced if the intrinsic function passed as an argument.

ifns += &
    ifi1abs.obj &
    ifi2abs.obj &
    ifiabs.obj &
    ifi1mod.obj &
    ifi2mod.obj &
    ifmod.obj &
    ifichar.obj &
    ifaimag.obj &
    ifdimag.obj &
    ifqimag.obj &
    ifconjg.obj &
    ifdconjg.obj &
    ifqconjg.obj &
    ifdprod.obj &
    ifqprod.obj &
    ifbtest.obj &
    ifibset.obj &
    ifibclr.obj &
    ifior.obj &
    ifiand.obj &
    ifnot.obj &
    ifieor.obj &
    ifi1and.obj &
    ifi1bclr.obj &
    ifi1bset.obj &
    ifi1btst.obj &
    ifi1eor.obj &
    ifi1not.obj &
    ifi1or.obj &
    ifi2and.obj &
    ifi2bclr.obj &
    ifi2bset.obj &
    ifi2btst.obj &
    ifi2eor.obj &
    ifi2not.obj &
    ifi2or.obj


# The following intrinsic functions are generated in-line
# by the front end.

!ifdef __never_defined__
ifns += &
    ifmax0.obj &
    ifmax1.obj &
    ifmin0.obj &
    ifmin1.obj &
    ifi1max0.obj &
    ifi1min0.obj &
    ifi2max0.obj &
    ifi2min0.obj &
    ifamax0.obj &
    ifamax1.obj &
    ifamin0.obj &
    ifamin1.obj &
    ifdmax1.obj &
    ifdmin1.obj &
    ifqmax1.obj &
    ifqmin1.obj
!endif

# The following intrinsic functions are generated in-line
# by the code generator (implemented as primitive operators)
# but are required because they define the X... versions which are
# referenced if the intrinsic function passed as an argument.

ifns += &
    ifatan.obj &
    ifdatan.obj &
    ifalog.obj &
    ifdlog.obj &
    ifqlog.obj &
    ifcos.obj &
    ifdcos.obj &
    ifexp.obj &
    ifdexp.obj &
    ifqexp.obj &
    ifalog10.obj &
    ifdlog10.obj &
    ifqlog10.obj &
    ifsin.obj &
    ifdsin.obj &
    ifsqrt.obj &
    ifdsqrt.obj &
    ifqsqrt.obj &
    iftan.obj &
    ifdtan.obj &
    ifatan2.obj &
    ifdatan2.obj &
    ifdacos.obj &
    ifdasin.obj &
    ifdcosh.obj &
    ifdsinh.obj &
    ifdtanh.obj &
    ifcotan.obj &
    ifdcotan.obj &
    ifsinh.obj &
    ifcosh.obj &
    iftanh.obj &
    ifacos.obj &
    ifasin.obj &
    ifqacos.obj &
    ifqasin.obj &
    ifqatan.obj &
    ifqatan2.obj &
    ifqcos.obj &
    ifqcosh.obj &
    ifqcotan.obj &
    ifqsin.obj &
    ifqsinh.obj &
    ifqtan.obj &
    ifqtanh.obj &
    ifamod.obj &
    ifdmod.obj &
    ifqmod.obj &
    ifabs.obj &
    ifdabs.obj &
    ifqabs.obj

xfns += &
    xfi1max0.obj &
    xfi1min0.obj &
    xfi2max0.obj &
    xfi2min0.obj &
    xfamax0.obj &
    xfamax1.obj &
    xfamin0.obj &
    xfamin1.obj &
    xfdmax1.obj &
    xfdmin1.obj &
    xfqmax1.obj &
    xfqmin1.obj &
    xfmax0.obj &
    xfmax1.obj &
    xfmin0.obj &
    xfmin1.obj

ufns += &
    urand.obj &
    fgrowhdl.obj &
    fhandle.obj &
    seekunit.obj &
    flushuni.obj &
    getdat.obj &
    gettim.obj &
    fexit.obj &
    filesize.obj &
    fnxtrecl.obj &
    fsignal.obj

ufns += &
    fargs.obj &
    fgetenv.obj &
    fgetcmd.obj &
    ftracebk.obj

!ifeq host_OS dos
ufns += &
    fintr.obj &
    fspawn.obj &
    fsystem.obj
!endif

!ifeq host_OS win
ufns += &
    fintr.obj &
    winapi.obj &
    fdefwin.obj
!ifeq host_CPU 386
ufns += &
    fspawn.obj &
    fsystem.obj
!endif
!endif

!ifeq host_OS nt
ufns += &
    fdefwin.obj &
    fspawn.obj &
    fsystem.obj
!endif

!ifeq host_OS nov
ufns += &
    fspawn.obj &
    fsystem.obj
!endif

!ifeq host_OS os2
ufns += &
    fspawn.obj &
    fsystem.obj
!ifeq host_CPU 386
ufns += &
    fdefwin.obj
!endif
!endif

files = $(rt) $(both) $(dep_rt) $(dep_both) $(ifns) $(xfns) $(math) $(ufns)

lbc_file=tmp.lbc

!ifeq release 0
w_lib = $(librarian)
!else
!ifeq host_CPU axp
w_lib = $(librarian) -t
!else
w_lib = $(librarian) -s -t
!endif
!endif

all: $(lib_name).lib .symbolic
#all: $(lib_name).lib ../errmsg.res .symbolic
    @%null

$(lib_name).lib : $(files)
    @%create $(lbc_file)
#    @for %%f in (*.?bj) do @%append $(lbc_file) +%%f
    @for %%f in ($(files)) do @%append $(lbc_file) +%%f
    $(w_lib) -n -b $(lib_name) @$(lbc_file)
    @rm -f $(lbc_file)

#../errmsg.res : ../c/errmsg.rc ../h/errcod.h
#    $(rc_aui) -zk0 -dMSG_LANG_BASE=0 -dMSG_LANG_SPACING=0 $[@ -fo=$^@
