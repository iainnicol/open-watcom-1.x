#
#   FCINFO.DAT:	Table of all the RT routines and fcodes
#		See fcbuild.c for details on how to process
#

#   Modified	By		Reason
#   --------	--		------
#   91/07/11	D.J.Gaudet	Defined
#   91/08/20	D.J.Gaudet	New structure/fieldop f-codes
#   92/01/21	D.J.Gaudet	DB_SSCR_FINI and DB_SSTR_FINI for 386 version
#   93/11/27    Alex Brodsky  	implemented COMPLEX*32 and REAL*16 support
#   94/06/06 	Alex Brodsky	Added SET_SCB_LEN, for string allocation support
#


#
# These are all the RT_ routines defined in ftnrt.h.  They must appear in
# this order.
#
ftnrt PAUSE
ftnrt STOP
ftnrt SET_IOCB
ftnrt SET_FMT
ftnrt SET_UNIT
ftnrt SET_INTL
ftnrt SET_ERR
ftnrt SET_END
ftnrt SET_REC
ftnrt SET_IOS
ftnrt SET_ACC
ftnrt SET_BLNK
ftnrt SET_FILE
ftnrt SET_FORM
ftnrt SET_LEN
ftnrt SET_STAT
ftnrt SET_DIR
ftnrt SET_CCTRL
ftnrt SET_FMTD
ftnrt SET_NAME
ftnrt SET_SEQ
ftnrt SET_UFMTD
ftnrt SET_EXST
ftnrt SET_NMD
ftnrt SET_NREC
ftnrt SET_NUMB
ftnrt SET_OPEN
ftnrt SET_RECL
ftnrt SET_NOFMT
ftnrt SET_RECTYPE
ftnrt SET_ACTION
ftnrt SET_NML
ftnrt SET_BLOCKSIZE
ftnrt INQ_BLOCKSIZE
ftnrt SET_SHARE
ftnrt EX_READ
ftnrt EX_WRITE
ftnrt EX_OPEN
ftnrt EX_CLOSE
ftnrt EX_BACK
ftnrt EX_ENDF
ftnrt EX_REW
ftnrt EX_INQ
ftnrt OUT_LOG1
ftnrt OUT_LOG4
ftnrt OUT_INT1
ftnrt OUT_INT2
ftnrt OUT_INT4
ftnrt OUT_REAL
ftnrt OUT_DBLE
ftnrt OUT_XTND
ftnrt OUT_CPLX
ftnrt OUT_DBCX
ftnrt OUT_XTCX
ftnrt OUT_CHAR
ftnrt INP_LOG1
ftnrt INP_LOG4
ftnrt INP_INT1
ftnrt INP_INT2
ftnrt INP_INT4
ftnrt INP_REAL
ftnrt INP_DBLE
ftnrt INP_XTND
ftnrt INP_CPLX
ftnrt INP_DBCX
ftnrt INP_XTCX
ftnrt INP_CHAR
ftnrt ENDIO
ftnrt ALLOCATE
ftnrt DEALLOCATE
ftnrt FMT_SCAN
ftnrt FMT_ARR_SCAN
ftnrt CAT
ftnrt SUBSTRING
ftnrt SUBSCRIPT
ftnrt CHAR_SUBSCR
ftnrt PROLOGUE
ftnrt EPILOGUE
ftnrt ADV_CONST
ftnrt ADV_VAR
ftnrt ADV_ASSUME
ftnrt FMT_ASSIGN
ftnrt SET_LINE
ftnrt RTN_COUNT

# some undefined checking versions of above routines

fcode RT_SET_IOCB_CHECK
fcode RT_UCAT

# Data statement routines.

fcode RT_END_DATA_VARS

# fcodes for subscripting

fcode RT_USUBSCRIPT
fcode RT_PSUBSCRIPT
fcode RT_P1_SUBSCR
fcode RT_U1_SUBSCR
fcode RT_1_SUBSCR
fcode PH_1_SUBSCR
fcode PH_U1_SUBSCR
fcode PH_P1_SUBSCR

# Debugger F-Codes.

fcode RT_ISN_DBUG
fcode RT_END_DBUG
fcode RT_DB_PROLOGUE
fcode RT_DB_EPILOGUE

# F-Code for entering statement functions when using the debugger:

fcode DB_SFPRO
fcode DB_SFEPI

#
# Define F-Codes:
# ================
#

define	TABLE_SIZE	49	// size of each operator table
define	NUM_TYPES	7	// number of data types

# Define binary operators:     +,-,*,/,**.
# They must appear in the following order:

group BINOPS

# Define ADD routines:

fcode II_ADD
fcode RI_ADD
fcode DI_ADD
fcode EI_ADD
fcode CI_ADD
fcode QI_ADD
fcode XI_ADD
fcode IR_ADD
fcode RR_ADD
fcode DR_ADD
fcode ER_ADD
fcode CR_ADD
fcode QR_ADD
fcode XR_ADD
fcode ID_ADD
fcode RD_ADD
fcode DD_ADD
fcode ED_ADD
fcode CD_ADD
fcode QD_ADD
fcode XD_ADD
fcode IE_ADD
fcode RE_ADD
fcode DE_ADD
fcode EE_ADD
fcode CE_ADD
fcode QE_ADD
fcode XE_ADD
fcode IC_ADD
fcode RC_ADD
fcode DC_ADD
fcode EC_ADD
fcode CC_ADD
fcode QC_ADD
fcode XC_ADD
fcode IQ_ADD
fcode RQ_ADD
fcode DQ_ADD
fcode EQ_ADD
fcode CQ_ADD
fcode QQ_ADD
fcode XQ_ADD
fcode IX_ADD
fcode RX_ADD
fcode DX_ADD
fcode EX_ADD
fcode CX_ADD
fcode QX_ADD
fcode XX_ADD

# Define SUBTRACT routines:

fcode II_SUB
fcode RI_SUB
fcode DI_SUB
fcode EI_SUB
fcode CI_SUB
fcode QI_SUB
fcode XI_SUB
fcode IR_SUB
fcode RR_SUB
fcode DR_SUB
fcode ER_SUB
fcode CR_SUB
fcode QR_SUB
fcode XR_SUB
fcode ID_SUB
fcode RD_SUB
fcode DD_SUB
fcode ED_SUB
fcode CD_SUB
fcode QD_SUB
fcode XD_SUB
fcode IE_SUB
fcode RE_SUB
fcode DE_SUB
fcode EE_SUB
fcode CE_SUB
fcode QE_SUB
fcode XE_SUB
fcode IC_SUB
fcode RC_SUB
fcode DC_SUB
fcode EC_SUB
fcode CC_SUB
fcode QC_SUB
fcode XC_SUB
fcode IQ_SUB
fcode RQ_SUB
fcode DQ_SUB
fcode EQ_SUB
fcode CQ_SUB
fcode QQ_SUB
fcode XQ_SUB
fcode IX_SUB
fcode RX_SUB
fcode DX_SUB
fcode EX_SUB
fcode CX_SUB
fcode QX_SUB
fcode XX_SUB

# Define MULTIPLY routines:

fcode II_MUL
fcode RI_MUL
fcode DI_MUL
fcode EI_MUL
fcode CI_MUL
fcode QI_MUL
fcode XI_MUL
fcode IR_MUL
fcode RR_MUL
fcode DR_MUL
fcode ER_MUL
fcode CR_MUL
fcode QR_MUL
fcode XR_MUL
fcode ID_MUL
fcode RD_MUL
fcode DD_MUL
fcode ED_MUL
fcode CD_MUL
fcode QD_MUL
fcode XD_MUL
fcode IE_MUL
fcode RE_MUL
fcode DE_MUL
fcode EE_MUL
fcode CE_MUL
fcode QE_MUL
fcode XE_MUL
fcode IC_MUL
fcode RC_MUL
fcode DC_MUL
fcode EC_MUL
fcode CC_MUL
fcode QC_MUL
fcode XC_MUL
fcode IQ_MUL
fcode RQ_MUL
fcode DQ_MUL
fcode EQ_MUL
fcode CQ_MUL
fcode QQ_MUL
fcode XQ_MUL
fcode IX_MUL
fcode RX_MUL
fcode DX_MUL
fcode EX_MUL
fcode CX_MUL
fcode QX_MUL
fcode XX_MUL

# Define DIVIDE routines:

fcode II_DIV
fcode RI_DIV
fcode DI_DIV
fcode EI_DIV
fcode CI_DIV
fcode QI_DIV
fcode XI_DIV
fcode IR_DIV
fcode RR_DIV
fcode DR_DIV
fcode ER_DIV
fcode CR_DIV
fcode QR_DIV
fcode XR_DIV
fcode ID_DIV
fcode RD_DIV
fcode DD_DIV
fcode ED_DIV
fcode CD_DIV
fcode QD_DIV
fcode XD_DIV
fcode IE_DIV
fcode RE_DIV
fcode DE_DIV
fcode EE_DIV
fcode CE_DIV
fcode QE_DIV
fcode XE_DIV
fcode IC_DIV
fcode RC_DIV
fcode DC_DIV
fcode EC_DIV
fcode CC_DIV
fcode QC_DIV
fcode XC_DIV
fcode IQ_DIV
fcode RQ_DIV
fcode DQ_DIV
fcode EQ_DIV
fcode CQ_DIV
fcode QQ_DIV
fcode XQ_DIV
fcode IX_DIV
fcode RX_DIV
fcode DX_DIV
fcode EX_DIV
fcode CX_DIV
fcode QX_DIV
fcode XX_DIV

# Define EXPONENTIATION routines:

fcode II_EXP
fcode RI_EXP
fcode DI_EXP
fcode EI_EXP
fcode CI_EXP
fcode QI_EXP
fcode XI_EXP
fcode IR_EXP
fcode RR_EXP
fcode DR_EXP
fcode ER_EXP
fcode CR_EXP
fcode QR_EXP
fcode XR_EXP
fcode ID_EXP
fcode RD_EXP
fcode DD_EXP
fcode ED_EXP
fcode CD_EXP
fcode QD_EXP
fcode XD_EXP
fcode IE_EXP
fcode RE_EXP
fcode DE_EXP
fcode EE_EXP
fcode CE_EXP
fcode QE_EXP
fcode XE_EXP
fcode IC_EXP
fcode RC_EXP
fcode DC_EXP
fcode EC_EXP
fcode CC_EXP
fcode QC_EXP
fcode XC_EXP
fcode IQ_EXP
fcode RQ_EXP
fcode DQ_EXP
fcode EQ_EXP
fcode CQ_EXP
fcode QQ_EXP
fcode XQ_EXP
fcode IX_EXP
fcode RX_EXP
fcode DX_EXP
fcode EX_EXP
fcode CX_EXP
fcode QX_EXP
fcode XX_EXP

# End of ordering of binary operators: +,-,*,/,**.

# Define F-Codes to push operands.
# They must appear in the following order:

group PUSHOPS
fcode PUSH_LOG1
fcode PUSH_LOG4
fcode PUSH_INT1
fcode PUSH_INT2
fcode PUSH_INT4
fcode PUSH_REAL4
fcode PUSH_REAL8
fcode PUSH_REAL16
fcode PUSH_CPLX8
fcode PUSH_CPLX16
fcode PUSH_CPLX32
fcode PUSH_SCB
fcode PUSH_RCB

define	PUSH_INDIRECT	13 // add this to PUSH_xxxx to get PUSH_IND_xxxx

fcode PUSH_IND_LOG1
fcode PUSH_IND_LOG4
fcode PUSH_IND_INT1
fcode PUSH_IND_INT2
fcode PUSH_IND_INT4
fcode PUSH_IND_REAL4
fcode PUSH_IND_REAL8
fcode PUSH_IND_REAL16
fcode PUSH_IND_CPLX8
fcode PUSH_IND_CPLX16
fcode PUSH_IND_CPLX32

# End of ordering of F-Codes to push operands.

fcode PUSH_ADDR			# put addr into es:di
fcode PUSH_IND_ADDR		# indirect variable (into es:di)
fcode PUSH_ADDR_STACK		# put local address onto stack (ds:offset)
fcode PUSH_INLINE

fcode PUSH_SCB_LEN
fcode PUSH_SCB_LEN_SAFE
fcode PUSH_ARRAY_DATA
fcode PUSH_PARM_SCB		# push a parm SCB (with entry point check)
fcode PUSH_PARM_RCB		# push a parm RCB
fcode CHK_VALID_PARM

# Define F-Codes to push operands and do undefined variable checking.
# They must appear in the following order:

group UPUSHOPS
fcode UPSH_LOG1
fcode UPSH_LOG4
fcode UPSH_INT1
fcode UPSH_INT2
fcode UPSH_INT4
fcode UPSH_REAL4
fcode UPSH_REAL8
fcode UPSH_REAL16
fcode UPSH_CPLX8
fcode UPSH_CPLX16
fcode UPSH_CPLX32

define	PUSH_U_INDIRECT	11 # add this to UPSH_xxxx to get UPSH_IND_xxxx

fcode UPSH_IND_LOG1
fcode UPSH_IND_LOG4
fcode UPSH_IND_INT1
fcode UPSH_IND_INT2
fcode UPSH_IND_INT4
fcode UPSH_IND_REAL4
fcode UPSH_IND_REAL8
fcode UPSH_IND_REAL16
fcode UPSH_IND_CPLX8
fcode UPSH_IND_CPLX16
fcode UPSH_IND_CPLX32

# End of ordering of F-Codes to push operands and do undefined
# variable checking.

# Define F-Codes to pop operands.
# They must appear in the following order:

group POPOPS
fcode POP_LOG1
fcode POP_LOG4
fcode POP_INT1
fcode POP_INT2
fcode POP_INT4
fcode POP_REAL4
fcode POP_REAL8
fcode POP_REAL16
fcode POP_CPLX8
fcode POP_CPLX16
fcode POP_CPLX32
fcode POP_SCB
fcode POP_RCB

define	POP_INDIRECT	13 // add this to POP_xxxx to get POP_IND_xxxx

fcode POP_IND_LOG1
fcode POP_IND_LOG4
fcode POP_IND_INT1
fcode POP_IND_INT2
fcode POP_IND_INT4
fcode POP_IND_REAL4
fcode POP_IND_REAL8
fcode POP_IND_REAL16
fcode POP_IND_CPLX8
fcode POP_IND_CPLX16
fcode POP_IND_CPLX32

# End of ordering of F-Codes to pop operands.

fcode POP_ARR_ELT_PARM
fcode POP_ADDR

# Define F-Codes to flip arguments for non-commutative operators: -,/.
# The must appear in the following order:

group FLIPOPS
fcode II_FLIP
fcode RI_FLIP
fcode DI_FLIP
fcode EI_FLIP
fcode CI_FLIP
fcode QI_FLIP
fcode XI_FLIP
fcode IR_FLIP
fcode RR_FLIP
fcode DR_FLIP
fcode ER_FLIP
fcode CR_FLIP
fcode QR_FLIP
fcode XR_FLIP
fcode ID_FLIP
fcode RD_FLIP
fcode DD_FLIP
fcode ED_FLIP
fcode CD_FLIP
fcode QD_FLIP
fcode XD_FLIP
fcode IE_FLIP
fcode RE_FLIP
fcode DE_FLIP
fcode EE_FLIP
fcode CE_FLIP
fcode QE_FLIP
fcode XE_FLIP
fcode IC_FLIP
fcode RC_FLIP
fcode DC_FLIP
fcode EC_FLIP
fcode CC_FLIP
fcode QC_FLIP
fcode XC_FLIP
fcode IQ_FLIP
fcode RQ_FLIP
fcode DQ_FLIP
fcode EQ_FLIP
fcode CQ_FLIP
fcode QQ_FLIP
fcode XQ_FLIP
fcode IX_FLIP
fcode RX_FLIP
fcode DX_FLIP
fcode EX_FLIP
fcode CX_FLIP
fcode QX_FLIP
fcode XX_FLIP


# End of ordering of flip F-Codes.

# Define convert routines.
# They must appear in the following order:

group CNVOPS
fcode II_CNV
fcode RI_CNV
fcode DI_CNV
fcode EI_CNV
fcode CI_CNV
fcode QI_CNV
fcode XI_CNV
fcode IR_CNV
fcode RR_CNV
fcode DR_CNV
fcode ER_CNV
fcode CR_CNV
fcode QR_CNV
fcode XR_CNV
fcode ID_CNV
fcode RD_CNV
fcode DD_CNV
fcode ED_CNV
fcode CD_CNV
fcode QD_CNV
fcode XD_CNV
fcode IE_CNV
fcode RE_CNV
fcode DE_CNV
fcode EE_CNV
fcode CE_CNV
fcode QE_CNV
fcode XE_CNV
fcode IC_CNV
fcode RC_CNV
fcode DC_CNV
fcode EC_CNV
fcode CC_CNV
fcode QC_CNV
fcode XC_CNV
fcode IQ_CNV
fcode RQ_CNV
fcode DQ_CNV
fcode EQ_CNV
fcode CQ_CNV
fcode QQ_CNV
fcode XQ_CNV
fcode IX_CNV
fcode RX_CNV
fcode DX_CNV
fcode EX_CNV
fcode CX_CNV
fcode QX_CNV
fcode XX_CNV

# End of convert F-Codes ordering.

# Define unary minus routines:
# They must appear in the following order:

group UNIOPS
fcode NEGI
fcode NEGR
fcode NEGD
fcode NEGE
fcode NEGC
fcode NEGQ
fcode NEGX

# End of ordering of unary minus F-Codes.

# Define CMP routines:
# They must appear in the following order:

group CMPOPS
fcode II_CMP
fcode RI_CMP
fcode DI_CMP
fcode EI_CMP
fcode CI_CMP
fcode QI_CMP
fcode XI_CMP
fcode IR_CMP
fcode RR_CMP
fcode DR_CMP
fcode ER_CMP
fcode CR_CMP
fcode QR_CMP
fcode XR_CMP
fcode ID_CMP
fcode RD_CMP
fcode DD_CMP
fcode ED_CMP
fcode CD_CMP
fcode QD_CMP
fcode XD_CMP
fcode IE_CMP
fcode RE_CMP
fcode DE_CMP
fcode EE_CMP
fcode CE_CMP
fcode QE_CMP
fcode XE_CMP
fcode IC_CMP
fcode RC_CMP
fcode DC_CMP
fcode EC_CMP
fcode CC_CMP
fcode QC_CMP
fcode XC_CMP
fcode IQ_CMP
fcode RQ_CMP
fcode DQ_CMP
fcode EQ_CMP
fcode CQ_CMP
fcode QQ_CMP
fcode XQ_CMP
fcode IX_CMP
fcode RX_CMP
fcode DX_CMP
fcode EX_CMP
fcode CX_CMP
fcode QX_CMP
fcode XX_CMP

# End of ordering of compare F-Codes.

# Define lexical string comparision:

fcode CHAR_CMP
fcode UCHAR_CMP

# Define relational operator routines.
# They must appear in the following order:

define	NUM_RELS	6
group RELOPS
fcode EQ2LOGIC
fcode NE2LOGIC
fcode LT2LOGIC
fcode GE2LOGIC
fcode LE2LOGIC
fcode GT2LOGIC
fcode FLIP_EQ2LOGIC
fcode FLIP_NE2LOGIC
fcode FLIP_LT2LOGIC
fcode FLIP_GE2LOGIC
fcode FLIP_LE2LOGIC
fcode FLIP_GT2LOGIC

# End of relational operator ordering.

# Define logical operators.
# They must appear in the following order:

group LOGOPS
fcode LOGEQV
fcode LOGNEQV
fcode LOGOR
fcode LOGAND
fcode LOGNOT

# End of logical operator ordering.

# Define bitwise operators.
# They must appear in the following order:

group BITOPS
fcode BITEQV
fcode BITNEQV
fcode BITOR
fcode BITAND
fcode BITNOT

# End of bitwise operator ordering.

# Define routines to replace pointer to value with value.
# They must appear in the following order:

group VALOPS
fcode VAL_LOG1
fcode VAL_LOG4
fcode VAL_INT1
fcode VAL_INT2
fcode VAL_INT4
fcode VAL_REAL4
fcode VAL_REAL8
fcode VAL_REAL16
fcode VAL_CPLX8
fcode VAL_CPLX16
fcode VAL_CPLX32

# End of ordering of routines to replace pointer to value with value.

# F-Codes for array element undefined checking.
# They must appear in the following order:

group UVALOPS
fcode UVAL_LOG1
fcode UVAL_LOG4
fcode UVAL_INT1
fcode UVAL_INT2
fcode UVAL_INT4
fcode UVAL_REAL4
fcode UVAL_REAL8
fcode UVAL_REAL16
fcode UVAL_CPLX8
fcode UVAL_CPLX16
fcode UVAL_CPLX32

# End of ordering of F-Codes for array element undefined checking.

#
# fcodes for undefined checking when pushing structure fields
# they must appear in the following order:

group UVALFOPS
fcode UVALF_LOG1
fcode UVALF_LOG4
fcode UVALF_INT1
fcode UVALF_INT2
fcode UVALF_INT4
fcode UVALF_REAL4
fcode UVALF_REAL8
fcode UVALF_REAL16
fcode UVALF_CPLX8
fcode UVALF_CPLX16
fcode UVALF_CPLX32

# end of ordering for undef checking struct fields

# Define routines to store value at pointer.
# They must appear in the following order:

group STOROPS
fcode STOR_LOG1
fcode STOR_LOG4
fcode STOR_INT1
fcode STOR_INT2
fcode STOR_INT4
fcode STOR_REAL4
fcode STOR_REAL8
fcode STOR_REAL16
fcode STOR_CPLX8
fcode STOR_CPLX16
fcode STOR_CPLX32
fcode STOR_SCB
fcode STOR_RCB

# End of ordering of routines to store value at pointer.

# Define branch codes:

fcode BC_ALWAYS
fcode BC_FALSE
fcode BC_TRUE
fcode BC_EQ			# generated by peepholer
fcode BC_NE			# ...
fcode BC_GT			# ...
fcode BC_GE			# ...
fcode BC_LT			# ...
fcode BC_LE			# ...
fcode THREE_WAY_BRANCH

# Define DO-loop operations:

fcode I1DO_INIT
fcode I2DO_INIT
fcode I4DO_INIT
fcode R4DO_INIT
fcode R8DO_INIT
fcode R16DO_INIT

fcode I1DO_LOOP
fcode I2DO_LOOP
fcode I4DO_LOOP
fcode R4DO_LOOP
fcode R8DO_LOOP
fcode R16DO_LOOP

# Define select statment f-codes (must be kept in this order):

fcode I2_SELECT_SINGLES
fcode I2_SELECT_LOW_HIGH
fcode I4_SELECT_SINGLES
fcode I4_SELECT_LOW_HIGH

# for character select statements

fcode SELECT_SCB

# call a remote block

fcode EXEC_RB
fcode END_RB

# execute a statement function

fcode SF_CALL
fcode SF_RETURN

# ASSIGN label TO var

fcode ASSIGN
fcode ASGN_GOTO_WITH_LIST
fcode ASGN_GOTO

# fcode for alternate returns

fcode ALT_RET

# fcodes to fill in low array bounds (must be kept in order)

group S_LOW_BOUNDS
fcode S_L1_FILL_IN
fcode S_L2_FILL_IN
fcode S_L3_FILL_IN
fcode S_L4_FILL_IN
fcode S_L5_FILL_IN
fcode S_L6_FILL_IN
fcode S_L7_FILL_IN

# fcodes to fill in high array bounds (must be kept in order)

group S_HIGH_BOUNDS
fcode S_H1_FILL_IN
fcode S_H2_FILL_IN
fcode S_H3_FILL_IN
fcode S_H4_FILL_IN
fcode S_H5_FILL_IN
fcode S_H6_FILL_IN
fcode S_H7_FILL_IN

# fcodes to do warp code to fill in adv

fcode GO_WARP
fcode END_WARP

# Array I/O (used to print an array or read into an array).

fcode IO_STRUCT_ARRAY
fcode NEXT_ARR_ELT
fcode PRT_ARRAY
fcode INP_ARRAY

# Check for undefined function return value.

fcode CHK_RET_VAL

# 8087 Stack Control

fcode FLUSH_ENTRIES
fcode DUMP_ENTRIES
fcode LOAD_ENTRIES

# F-Code to set return index.

fcode SAVERETIDX

# New f-codes generated by peephole optimizer.

fcode MOVE_LL_I4
fcode ADD_L_I4
fcode SUB_L_I4
fcode MUL_L_I4
fcode DIV_L_I4
fcode MOVE_ULL_I4
fcode ADD_UL_I4
fcode SUB_UL_I4
fcode MUL_UL_I4
fcode DIV_UL_I4
fcode MOVE_LL_R8
fcode ADD_L_R8
fcode SUB_L_R8
fcode MUL_L_R8
fcode DIV_L_R8
fcode MOVE_ULL_R8
fcode ADD_UL_R8
fcode SUB_UL_R8
fcode MUL_UL_R8
fcode DIV_UL_R8
fcode MOVE_IL_R8
fcode ADD_I_R8
fcode SUB_I_R8
fcode MUL_I_R8
fcode DIV_I_R8
fcode MOVE_LL_R4
fcode ADD_L_R4
fcode SUB_L_R4
fcode MUL_L_R4
fcode DIV_L_R4
fcode MOVE_ULL_R4
fcode ADD_UL_R4
fcode SUB_UL_R4
fcode MUL_UL_R4
fcode DIV_UL_R4

# Some more F-Codes generated by peephole optimizer.

fcode SIMPLE_INP_I4
fcode SIMPLE_INP_R4
fcode SIMPLE_INP_R8
fcode SIMPLE_OUT_I4
fcode SIMPLE_OUT_R4
fcode SIMPLE_OUT_R8

# F-Code to store new length in scb for allocatable strings

fcode SET_SCB_LEN

# F-Codes for magic intrinsic functions

fcode ALLOCATED
fcode LOCATION_OF

# F-Codes for the field operator

fcode FIELD_OP_CHAR
fcode FIELD_OP_STRUCT
fcode FIELD_OP_UPDATE_SCB
fcode FIELD_OP_UPDATE_RCB
fcode FIELD_OP_ADV
fcode FIELD_ADDR
fcode FIELD_ADDR_PUSH_SCB
fcode FIELD_ADDR_PUSH_RCB

# F-Codes to handle structure subscripting/substringing

fcode FIELD_SUBSTRING
fcode FIELD_SUBSCR
fcode FIELD_SUBSCR_1
fcode FIELD_CHAR_SUBSCR
fcode FIELD_SCB
fcode STRUCT_SUBSCR
fcode SUBSCR_FIELD_OP

# F-code to copy a structure

fcode ASGN_STRUCT

# F-codes to do I/O with structures

fcode STRUCT_IO_INIT
fcode STRUCT_IO_READ_ITEM
fcode STRUCT_IO_WRITE_ITEM

# F-code to stop program execution

fcode RT_STOPPGM

# F-codes for the 386 version debugger

fcode DB_SSCR_FINI
fcode DB_SSTR_FINI
fcode DB_QUIT_STUB
fcode DB_ERR_STUB
fcode DB_STOP_STUB

# F-code for the 386 fgnobj.asm

fcode RETWF77

# F-code to clean values from stack after "CALL F" when f is a function
fcode TRASH_VALUE
