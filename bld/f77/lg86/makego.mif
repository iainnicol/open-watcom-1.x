#
#   MAKEGO.MIF: makefile for generating WATFOR77 Load and Go compiler
#

!include $(f77_dir)\lg86\comp.mif

!ifndef incl_errmsgs
resource_file = errmsg.res
!endif

#
# get the obj file macros and overlay configurations
#
!include $(f77_dir)\lg86\files.mif

#
# these are the extra lnk files we require
#
!ifdef __386__
fcnovect_lnk =
lnk_files =
!else
fcnovect_lnk = $(f77_dir)\lg86\fcnovect.lnk
lnk_files = $(f77_dir)\lg86\novector.lnk $(fcnovect_lnk) fciftbl.lnk
!endif

#
# define the main target now so that we may define some other targets
#
!ifdef f77_target_dir
!ifeq form os2v2
exedir = $(f77_target_dir)\binp
!else ifeq form nt
exedir = $(f77_target_dir)\binnt
!else
!ifdef japan_objs
exedir = $(f77_target_dir)\bin.nec
!else
exedir = $(f77_target_dir)\binw
!endif
!endif
exename = $(exedir)\$(exe).exe
!else
exedir = .
exename = $(exe).exe
!endif


$(exename) :
# note no command list here, it will appear later

#
# get the fcodes information
#
!include $(f77_dir)\lg86\fcodes.mif

#
# get the ifbuild information
#
!include $(f77_dir)\lg86\ifbuild.mif

#
# build the compiler
#
dep_list = $(fcode_headers) $(root) $(obj_0) $(obj_1) $(obj_2) $(obj_3) &
           $(obj_4) $(obj_4a) $(obj_4b) $(obj_5) $(exe).lnk $(lnk_files) &
           $(libs)
!ifdef resource_file
dep_list += $(resource_file)
!endif
!ifeq form dos
dep_list += $(watcom_dir)\lib\xmeml.lib $(wl95_dir)\watfor\wlink.lib
!endif

$(exename) : $(dep_list)
!ifeq form dos
    @set link=$(linker) name $(exename) @$(exe).lnk
!ifdef on_build_machine
    @%make all.osz
!endif
    $(%link)
!else ifeq form pharlap
$(exename) :
    @set link=$(linker) name $(exedir)\$(exe) @$(exe).lnk
!ifdef on_build_machine
    @%make all.osz
!endif
    $(%link)
!ifdef on_build_machine
    @set OLD_CWD=$+$(%cwd)$-
    @cd $(exedir)
    $(pharlap)bind386 $(pharlap)run386b.exe $(exedir)\$(exe) -exe $(exedir)\$(exe)
    $(pharlap)cfig386 $^@ -win30grow -win30limit +524228 -minreal 4000h
    @cd $(%OLD_CWD)
    del $(exedir)\$(exe).exp
!endif
!else ifeq form dos4g
$(exename) :
    @set link=$(linker) name $(exedir)\$(exe) @$(exe).lnk
!ifdef on_build_machine
    @%make all.osz
!endif
    $(%link)
!ifdef on_build_machine
    @$(rsi_root)\bin\4gbind $(rsi_root)\bin\dos4g.exe $(exename) $(exedir)\$(exe).rsi
    @del $(exename)
    @ren $(exedir)\$(exe).rsi $(exe).exe
!endif
!else
$(exename) :
    @set link=$(linker) name $(exename) @$(exe).lnk
!ifdef on_build_machine
    @%make all.osz
!endif
    $(%link)
!endif
!ifdef resource_file
    wstrip /q /a /r $(exedir)\$(exe) . $(resource_file)
!endif

#
# build the .lnk file
#
fcmds=@%append $^@ file %i

$(exe).lnk : $(f77_dir)\lg86\files.mif $(f77_dir)\lg86\rt\rt.mif $(f77_dir)\lg86\comp.mif
    @echo Creating $^@
    @%create $^@
!ifdef share_objs
    @%append $^@ path .;$(share_objs).
!endif
    @%append $^@ debug all option symfile
    @for %i in ($(libs)) do @%append $^@ lib %i
!ifeq form dos
    @%append $^@ option stack=8k
    @%append $^@ system $(form) option map,distribute,noindirect
    @for %i in ($(lnk_files)) do @%append $^@ @%i
    @for %i in ($(root)) do $(fcmds)            # the main root
    @%append $^@ begin
    @%append $^@ section
        @for %i in ($(obj_0)) do $(fcmds)               # the secondary root
        @%append $^@ begin
        @%append $^@ section
            @for %i in ($(obj_1)) do $(fcmds)   # overlay 1
            @%append $^@ begin
            @%append $^@ section
                @for %i in ($(obj_2)) do $(fcmds)       # overlay 2
            @%append $^@ end
        @%append $^@ section
            @for %i in ($(obj_3)) do $(fcmds)   # overlay 3
            @%append $^@ begin
            @%append $^@ section
                @for %i in ($(obj_4)) do $(fcmds)       # overlay 4
                @%append $^@ begin
                @%append $^@ section
                    @for %i in ($(obj_4a)) do $(fcmds)  # overlay 4a
                @%append $^@ section
                    @for %i in ($(obj_4b)) do $(fcmds)  # overlay 4b
                @%append $^@ end
            @%append $^@ end
        @%append $^@ section
            @for %i in ($(obj_5)) do $(fcmds)   # overlay 5
        @%append $^@ end
    @%append $^@ section
        @%append $^@ fixedlib $(watcom_dir)\lib\xmeml.lib # overlay 6
        @%append $^@ file $(wl95_dir)\watfor\wlink.lib
    @%append $^@ end
!else
    @%append $^@ system $(form) option map,stack=16k
!ifeq form dos4g
        @%append $^@ option stub=wstubq.exe
!else ifeq form pharlap
!ifndef on_build_machine
        @%append $^@ option stub=$(pharlap)stub386.exe
!endif
!endif
    @for %i in ($(lnk_files)) do @%append $^@ @%i
    @for %i in ($(obj_0)) do $(fcmds)
    @for %i in ($(obj_1)) do $(fcmds)
    @for %i in ($(obj_2)) do $(fcmds)
    @for %i in ($(obj_3)) do $(fcmds)
    @for %i in ($(obj_4)) do $(fcmds)
    @for %i in ($(obj_5)) do $(fcmds)
!endif

!ifdef resource_file

res_dependencies = ..\c\errmsg.rc ..\h\errcod.h

!ifdef japan_objs
res_dependencies += ..\nec\errmsgw.rc
!else
res_dependencies += ..\h\errmsgw.rc
!endif

!ifeq form dos
res_dependencies += $(wl95_dir)\h\wlink.rc
!endif

errmsg.res : $(res_dependencies)
   wrc $(wrcopts) /zk0 /bt=windows /r /fo=$^@ /dMSG_LANG_BASE=0 /dMSG_LANG_SPACING=0 ..\c\errmsg.rc

!endif


#
# the fcode disassembler
#
fcdisasm.obj : fcdisasm.c $(fcnames_inc)
    $(compile)


!ifeq form dos
#
# special cases to put into overlay loader segment
#
errmsg.obj : errmsg.c
    $(compile)/nt=_TEXT/nc=_OVLCODE
!endif


#
# code that we steal from WOMP
#
!include $(womp_dir)\watfor\files.mif
!ifdef __386__
$(womp_dir)\watfor\obj386\wompobj.lib : $(womp_srcs)
    @wmake -h -f $(womp_dir)\watfor\makefile $(__MAKEOPTS__) __386__=
!else
$(womp_dir)\watfor\obj\wompobj.lib : $(womp_srcs)
    @wmake -h -f $(womp_dir)\watfor\makefile $(__MAKEOPTS__)
!endif


!ifdef on_build_machine
#
# all.osz file
#
all.osz :
    @$(%link)
    objsize @map $(exe).map > all.osz
    objpad all.osz
!endif
