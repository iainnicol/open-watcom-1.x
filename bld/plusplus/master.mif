proj_name = plusplus

.erase
.continue
.just_enough
.extensions:
.extensions: .qnx .exe .exp .pp .obj .rbj .lbj .asm .c .mif

.mif: $(mif_path)

!ifndef plusplus_release
!  ifeq release 1
!    define plusplus_release
!  else ifdef on_build_machine
!    define plusplus_release
!  endif
!endif

!ifndef plusplus_trmem
!  ifndef plusplus_release
!      define plusplus_trmem 1
!  endif
!endif

!include cproj.mif

!include $(cg_dir)\mif\fe.mif
!include $(cg_dir)\mif\hostos.mif

!include $(dwarf_dir)\dw\client.mif

!include ..\verify.mif
!include ..\ppobjs.mif

inc_dirs =
!ifdef plusplus_include
inc_dirs += $+$(plusplus_include)$-;
!endif
!ifeq plusplus_trmem 1
inc_dirs += $(trmem_dir);
!endif
inc_dirs += ..\h;
inc_dirs += $(cg_inc_dirs);
inc_dirs += $(wasm_dir)\h;
inc_dirs += $(as_dir)\h;
inc_dirs += $(dwarf_dir)\dw\h;
inc_dirs += $(cc_dir)\h;
inc_dirs += $(watcom_dir)\h;
!ifdef comp_cfg_dir
inc_dirs += $(comp_cfg_dir)\h;
!endif
inc_dirs += $(fe_misc_dir)\h;
inc_dirs += $(brinfo_dir)\h

!ifndef patch_level
patch_level=0
!endif

.before
    @set include=$(inc_path)                    # includes 'inc_dirs'

exe_bld_name = wcpp$(target_CPU)
exe_ref_name = rpp$(target_CPU)12
dll_bld_name = wppd$(target_CPU)
!ifndef exe_dbg_name
exe_dbg_name = $(exe_bld_name)d
!endif
!ifndef dll_dbg_name
dll_dbg_name = $(dll_bld_name)d
!endif

comp_objs = $($(host_OS)$(target_CPU)_objs)
comp_objs_exe = $(comp_objs) $(exe_objs)
comp_objs_dll = $(comp_objs) $(dll_objs)

cflags =

!ifeq host_CPU axp
!ifndef plusplus_release
cflags += -si
!endif
!else
cflags += -5r-fpc
!endif

!ifdef plusplus_rtdll
cflags += -br
!endif

# personal modifications can be made by including a local .mif file
!ifdef %plusplus_local_mif
!  include $(%plusplus_local_mif)
!else ifdef plusplus_local_mif
!  include $(plusplus_local_mif)
!endif

cflags += -oalrs-s-zq-w4-we -bt=$(host_OS)

!ifndef dbg_cflags
!  ifdef plusplus_release
!    define dbg_cflags -d1
!  else
!    define dbg_cflags -d2
!  endif
!endif

!ifdef plusplus_release
cflags += -dNDEBUG -ot
!endif

!ifdef %plusplus_cflags
cflags += $(%plusplus_cflags)
!endif

!ifdef plusplus_cflags
cflags += $(plusplus_cflags)
!endif

!ifeq host_OS osi
cflags += -d__OS2__
!endif

# options for single source utility compilations
wcl_util_opts = -ox-zq-w4-we

# specify any unique options for modules
!ifeq host_CPU axp
# alpha
!ifeq plusplus_trmem 1
extra_opts_memmgr = -dTRACKER
!endif
!else
# all intel
extra_opts_cscan = -4r
extra_opts_srcfile = -4r
!ifeq plusplus_trmem 1
extra_opts_memmgr = -of+ -dTRACKER
!endif
!ifdef plusplus_release
extra_opts_pcheader = -oi
!endif
!endif
# all platforms
extra_opts_carve    = -dheader="fesupp.h" -dheader2="carvecpp.h"
extra_opts_cmdlnany = -os
extra_opts_idedrv = -dSTATIC_LINKAGE
extra_opts_initfini = -dheader="fesupp.h" -dSPLIT_REQD
extra_opts_intlload = -d__header="fesupp.h"
extra_opts_pstk     = -dheader="fesupp.h"
extra_opts_pstk     = -dheader="fesupp.h"
extra_opts_ringfns  = -dheader="fesupp.h"
extra_opts_vbuf     = -dheader="fesupp.h"
extra_opts_vstk     = -dheader="fesupp.h"
!ifdef plusplus_release
extra_opts_wppdlldr = -dDLL_NAME=$(dll_bld_name)
!else
extra_opts_wppdlldr = -dDLL_NAME=$(dll_dbg_name)
extra_opts_dbgzap   = -dheader="fesupp.h"
!endif
!ifdef plusplus_dll_ptree
extra_opts_dbgptree = -dDLL_PTREE
!endif
!ifeq host_OS dos
cflags += -dIDE_PGM
!endif
!ifeq host_OS osi
cflags += -dIDE_PGM
!endif
!ifeq host_OS qnx
cflags += -dIDE_PGM
!endif

# WLINK options for the various hosts
extra_l_flags_osi = OPTION stack=64k
extra_l_flags_dos = OPTION dosseg, stack=64k, offset=64k #RUNTIME unpriv
extra_l_flags_os2 = OPTION dosseg, stack=64k, offset=64k
extra_l_flags_qnx = OPTION dosseg, stack=64k, offset=72k, priv=3, resource=usage.u
extra_l_flags_nt = OPTION dosseg, stack=0x10000k, offset=64k COMMIT stack=32k

# WLINK .DLL options for the various hosts
wlink_dll_os2_386 = OPTION manyautodata

extra_l_flags = OPTION map, caseexact, quiet
wlink_opt_common_exe = OPTION symfile
wlink_opt_common_drv = OPTION symfile
!ifndef plusplus_release
# the only guaranteed way to find the .sym for a .DLL is for it to be attached
# to the .DLL binary
wlink_opt_common_dll =
!else
wlink_opt_common_dll = OPTION symfile
!endif
!ifeq host_OS nt
wlink_opt_common_dll += OPTION offset=0x69000000
!endif

# WLINK debug info format
!ifndef wlink_dbgfmt
wlink_dbgfmt = DEBUG all
!endif

# final executable extensions for the various hosts
final_exe_dos = exe
final_exe_os2 = exe
final_exe_osi = exe
final_exe_qnx = qnx
final_exe_nt = exe
exe = $(final_exe_$(host_OS))

# optencod options and targets for various hosts
optencod_opt_qnx = -u usage.u
optencod_targ_qnx = qnx
!ifndef plusplus_release
optencod_targ_dbg = dbg
!endif

pre_obj_deps = global.chk errmsgs.gh ic_mask.gh
# international data files
pre_obj_deps += wpp$(target_CPU)01.int

external_dependencies = $(cg_deps) $(dwarf_dw_dep)

# objects for dll
# obj -- normal object
# ebj -- in stand-alone executable
# lbj -- in DLL
# rbj -- in driver for DLL

.c: ..\c;$(wasm_dir)\c;$(watcom_dir)\c;$(fe_misc_dir)\c;$(brinfo_dir)\c

.c.lbj:
        $(cc) $(cflags) $(dbg_cflags) -fo=.lbj -bd-dwpp_dll $[@ $(extra_opts_$[&)

.c.rbj:
        $(cc) $(cflags) $(dbg_cflags) -fo=.rbj -dwpp_drv $[@ $(extra_opts_$[&)

# .c.ebj:
#         $(cc) $(cflags) $(dbg_cflags) -fo=.ebj -dwpp_exe$[@ $(extra_opts_$[&)

.c.obj:
        $(cc) $(cflags) $(dbg_cflags) $[@ $(extra_opts_$[&)

.c.pp:
        $(cc) $(cflags) $(dbg_cflags) $[@ $(extra_opts_$[&) -fo=*.pp -p

!ifdef plusplus_release

first : .symbolic build
    @%null

!else

first : .symbolic $(exe_dbg_name).$(exe)
    @%null

!endif

#
# Common dependencies
#
depends_exe = $(pre_obj_deps) $(comp_objs_exe) $(external_dependencies)
depends_dll = $(pre_obj_deps) $(comp_objs_dll) $(external_dependencies)
depends_drv = $(pre_obj_deps) $(dlldrv_objs)


!ifeq host_OS dos
#
# DOS executables
#

$(exe_ref_name).exe : $(depends_exe) pexebld.lnk
    $(linker) $(lflags) NAME $^* @pexebld

$(exe_dbg_name).exe : $(depends_exe) pexedbg.lnk
    $(linker) $(lflags) NAME $^* @pexedbg

$(exe_bld_name).exe : $(depends_exe) pexebld.lnk
    $(linker) $(lflags) NAME $^* @pexebld
#    $(pharlap)bind386 $(pharlap)run386b $^*
#    $(pharlap)cfig386 $^* -win30grow -win30limit +524228 -MAXVCPI 0
#!ifdef plusplus_release
#    del $^*.exp
#!endif

build : .symbolic $(exe_bld_name).exe
    @%null


!else ifeq host_OS os2
#
# OS/2 2.0 executables
#

$(exe_ref_name).exe : $(depends_exe) pexebld.lnk
    $(linker) $(lflags) NAME $^* @pexebld

plusplus_dll = 1


!else ifeq host_OS osi
#
# OS independent executables
#

$(exe_dbg_name).exe : $(depends_exe) pexedbg.lnk $(tools_root)\os2ldr.exe
    $(linker) $(lflags) NAME $^* @pexedbg

$(exe_bld_name).exe : $(depends_exe) pexebld.lnk $(tools_root)\os2ldr.exe
    $(linker) $(lflags) NAME $^* @pexebld
    w32bind $^&.rex $^&.exe $(tools_root)\os2ldr.exe
    del $^&.rex

build : .symbolic $(exe_bld_name).exe
    @%null

!else ifeq host_OS nt
#
# Windows/NT executables
#

$(exe_ref_name).exe : $(depends_exe) pexebld.lnk
    $(linker) $(lflags) NAME $^* @pexebld

!ifeq host_CPU 386

plusplus_dll = 1

!else

$(exe_dbg_name).exe : $(depends_exe) pexedbg.lnk
    $(linker) $(lflags) NAME $^* @pexedbg

$(exe_bld_name).exe : $(depends_exe) pexebld.lnk
    $(linker) $(lflags) NAME $^* @pexebld

build : .symbolic $(exe_bld_name).exe
    @%null

!endif


!else ifeq host_OS qnx
#
# QNX executables
#

pre_obj_deps += usage.u

$(exe_dbg_name).qnx : $(depends_exe) pexedbg.lnk
    $(linker) $(lflags) NAME $^* @pexedbg

$(exe_bld_name).qnx : $(depends_exe) pexebld.lnk
    $(linker) $(lflags) NAME $^* @pexebld
!ifdef plusplus_release
    serialize $(exe_bld_name).qnx wpp
!endif

build : .symbolic $(exe_bld_name).qnx
    @%null

!else
!error no rules for host_OS setting
!endif


!ifdef plusplus_dll
#
# Common for all systems with DLLs
#
lflags_dll = $(mode_lflags) $(lflags_$(host_OS)_$(host_CPU)) dll initinstance terminstance $(extra_l_flags_$(host_OS)) $(extra_l_flags)

# systems where version resources must be added to .DLL
build_rc_nt_386 = nt

build : .symbolic $(exe_bld_name).exe #$(dll_bld_name).dll
    @%null

$(exe_bld_name).exe : $(depends_drv) pdrvbld.lnk $(dll_bld_name).lib
    $(linker) $(lflags) NAME $^* @pdrvbld

$(dll_bld_name).lib : $(dll_bld_name).dll
    $(librarian) -b-q-n $^@ +$[@

$(dll_bld_name).dll : $(depends_dll) pdllbld.lnk
    $(linker) $(lflags_dll) NAME $^* @pdllbld
!ifdef build_rc_$(host_OS)_$(host_CPU)
    $(bld_cl) $(fe_misc_dir)\c\genverrc.c $(wcl_util_opts) -d_VERSION=$(bld_ver)
    genverrc ..\rc\r_$(host_OS)$(host_CPU).rc plusplus.rc $$ $^@ $(patch_level)
    del genverrc.*
    $(rc) -q -bt=$(build_rc_$(host_OS)_$(host_CPU)) plusplus.rc $^@
!endif

$(exe_dbg_name).exe : $(depends_drv) pdrvdbg.lnk $(dll_dbg_name).lib
    $(linker) $(lflags) NAME $^* @pdrvdbg

$(dll_dbg_name).lib : $(dll_dbg_name).dll
    $(librarian) -b-q-n $^@ +$[@

$(dll_dbg_name).dll : $(depends_dll) pdlldbg.lnk
    $(linker) $(lflags_dll) NAME $^* @pdlldbg

!endif


!include ..\deps.mif

# conventions:
#
# p<xxx>[<yyy>].lnk
#
# xxx - exe = standalone compiler executable
#       drv = stub executable DLL driver
#       dll = compiler DLL
#
# yyy - bld = production version
#       dbg = debugging version
#

#
# compiler standalone executable
#
pexe.lnk : $(__MAKEFILES__)
    %create $^@
    @%append $^@ $(wlink_dbgfmt)
    @%append $^@ $(wlink_opt_common_exe)
    @for %i in ($(comp_objs_exe)) do @%append $^@ file %i
    @%append $^@ library $(dwarf_dw_lib)
!ifdef as_lib
    @%append $^@ library $(as_lib)
!endif

#
# -- production version
#
pexebld.lnk : pexe.lnk
    %create $^@
    @%append $^@ @pexe.lnk
    @%append $^@ $(cg_libs)

#
# -- debugging version
#
pexedbg.lnk : pexe.lnk
    %create $^@
    @%append $^@ @pexe.lnk
    @%append $^@ $(cg_debug_libs)

#
# compiler .DLL driver
#
pdrv.lnk : $(__MAKEFILES__)
    %create $^@
    @%append $^@ $(wlink_dbgfmt)
    @%append $^@ $(wlink_opt_common_drv)
    @for %i in ($(dlldrv_objs)) do @%append $^@ file %i

#
# -- production version
#
pdrvbld.lnk : pdrv.lnk
    %create $^@
    @%append $^@ @pdrv.lnk
    @%append $^@ lib $(dll_bld_name).lib

#
# -- debugging version
#
pdrvdbg.lnk : pdrv.lnk
    %create $^@
    @%append $^@ @pdrv.lnk
    @%append $^@ lib $(dll_dbg_name).lib

#
# .DLL version of compiler
#
pdll.lnk : $(__MAKEFILES__)
    %create $^@
    @%append $^@ $(wlink_dbgfmt)
    @%append $^@ $(wlink_dll_$(host_OS)_$(host_CPU))
    @%append $^@ $(wlink_opt_common_dll)
    @for %i in ($(comp_objs_dll)) do @%append $^@ file %i
    @%append $^@ library $(dwarf_dw_lib)
!ifdef as_lib
    @%append $^@ library $(as_lib)
!endif
    @%append $^@ reference __DLLstart_

#
# -- production version
#
pdllbld.lnk : pdll.lnk
    %create $^@
    @%append $^@ @pdll.lnk
    @%append $^@ $(cg_libs)

#
# -- debugging version
#
pdlldbg.lnk : pdll.lnk
    %create $^@
    @%append $^@ @pdll.lnk
    @%append $^@ $(cg_debug_libs)

#
# miscellaneous build rules
#
wpp$(target_CPU)01.int : $(fe_misc_dir)\c\intlbin.c errors01.int usage01.int
    $(bld_cl) $[@ $(wcl_util_opts)
    intlbin.exe wpp$(target_CPU)
    del intlbin.*

#!ifdef plusplus_release
#msgencod_opts = -w
#!endif

errmsgs.c errmsgs.gh errlevel.gh errors01.int : $(fe_misc_dir)\c\msgencod.c ..\gml\messages.gml
    $(bld_cl) $[@ $(wcl_util_opts)
    msgencod.exe $(msgencod_opts) -i -q ..\gml\messages.gml errmsgs.c errmsgs.gh errlevel.gh
    del msgencod.*

keywords.gh weights.gh : ..\hash\plusplus.key ..\hash\pc.key
    $(bld_cl) $(fe_misc_dir)\c\findhash.c $(wcl_util_opts)
    findhash.exe -q $[@ $]@
    del findhash.*

yylex.gh : ..\c\umktable.c xlat.gh
    $(bld_cl) $[@ $(wcl_util_opts)
    umktable.exe $^@
    del umktable.*

xlat.gh : ..\c\mktrans.c ..\h\ctokens.h keywords.gh ytab.gh
    $(bld_cl) $[@ $(wcl_util_opts)
    mktrans.exe $]@ $^@
    del mktrans.*

ytab.c ytab.gh : ..\y\plusplus.y ..\c\yydriver.c
    $(yacc) -b -d -f -t -u $[@ $]@ >y.out
    diff y.out ..\y\check.out
    if exist ytab.gh del ytab.gh >nul
    ren ytab.h ytab.gh

cmdlnprs.c cmdlnprs.gh cmdlnusg.gh usage.u usage01.int : $(fe_misc_dir)\c\optencod.c ..\gml\options.gml
    $(bld_cl) $[@ $(wcl_util_opts) -i$(fe_misc_dir)\h
    optencod.exe -i -q $(optencod_opt_$(host_OS)) $]@ cmdlnprs.gh cmdlnprs.c cmdlnusg.gh $(target_CPU) $(optencod_targ_dbg) $(optencod_targ_$(host_OS))
    del optencod.*

ic_mask.gh : ..\h\ic.h ..\c\dwarf.c ..\c\cgbkcgrf.c ..\c\cgio.c ..\c\brmwrite.c
    $(bld_cl) ..\c\icmask.c $(wcl_util_opts)
    icmask.exe $<
    del icmask.*

#
# list of target architectures that have built-in code bursts
has_prag_i86 = yes
has_prag_386 = yes

!ifdef has_prag_$(target_CPU)

..\h\code$(target_CPU).gh : $(cc_dir)\a\code$(target_CPU).asm $(cc_dir)\a\mkcode.c
!ifndef gen_code_burst
    %null
!else
    wasm -zq $[@
    $(wcl_$(target_CPU)) $]@ code$(target_CPU).obj $(wcl_util_opts) -bt=$(wcl_$(target_CPU)_bt) -l=$(wcl_$(target_CPU)_l) -"libpath $(watcom_dir)\lib"
    mkcode
    del mkcode.*
    del code$(target_CPU).obj
!endif

!endif

#
# create reference compiler
#
reference : .symbolic $(exe_ref_name).$(exe)
    copy /b $(exe_ref_name).$(exe)+$(exe_ref_name).sym ..\bin\$(exe_ref_name).$(exe)
    del $(exe_ref_name).*

#
# list of projects required to build the plusplus project
#
project : .symbolic
    pexist build
    pexist watcom
    pexist fe_misc
    pexist brinfo
    pexist cc
    pexist dwarf
    pexist owl          # target_CPU == axp
    pexist cg
    pexist as           # target_CPU == axp
    pexist wasm         # target_CPU == i86 or 386
    pexist trmem        # plusplus_trmem def'd

#
# add audit trail to compile.gbl to force global recompile on refresh
#
global.chk : ..\compile.gbl
    %make clean
    wtouch -f $[@ $^@

clean global : .symbolic
    @if exist *.?bj @del *.?bj
    @if exist *.lib @del *.lib
    @if exist *.pch @del *.pch
    @if exist *.lst @del *.lst
    @if exist *.gh @del *.gh
    @if exist *.rc @del *.rc
    @if exist *.int @del *.int
    @if exist *.res @del *.res
    @if exist *.err @del *.err
    @if exist *.tmp @del *.tmp
    @if exist *.cod @del *.cod
    @if exist *.asm @del *.asm
    @if exist *.dmp @del *.dmp
    @if exist *.lnk @del *.lnk
    @if exist *.bak @del *.bak
    @if exist *.dll @del *.dll
    @if exist *.pdb @del *.pdb
    @if exist errmsgs.c @del errmsgs.c
    @if exist y.out @del y.out
    @if exist ytab.* @del ytab.*
    @if exist cmdlnprs.* @del cmdlnprs.*
    @if exist usage.u @del usage.u
    @if exist global.chk @del global.chk
    @if exist $(exe_dbg_name).* @del $(exe_dbg_name).*
    @if exist $(exe_bld_name).* @del $(exe_bld_name).*
    @if exist $(exe_ref_name).* @del $(exe_ref_name).*
    @if exist ..\bin\$(exe_ref_name).* @del ..\bin\$(exe_ref_name).*
    @if exist $(dll_bld_name).* @del $(dll_bld_name).*
    @if exist $(dll_dbg_name).* @del $(dll_dbg_name).*
