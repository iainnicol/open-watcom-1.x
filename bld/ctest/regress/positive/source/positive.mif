#
# awaiting bug fixes
#
# bf04.$(ext) &         # bitfield in static anonymous union
# init26.$(ext) &       # init anon struct with bitfields in anon union
# opt19.$(ext) &        # codegen 8086 -1 optimization bug test5= arch=i86
# opt28.$(ext) &        # loop optimization bug
# opt38.$(ext) &        # codegen -2-ml-ox-d1 (load 'ds' too early)
# opt43.$(ext) &        # wcl -d2 bug with post increment

!ifdef %plustest_bad_br
no_br_except30 = no
!endif

#
# special options
#
opt_cdisp13 = -xr
opt_cmdln01 = /d+XXX=0+1
opt_cmdln02 = /d+ /dXXX=0+1
opt_cmdln03 = /dX /DXX /uXX /DXXX /uXXX /UXXX /dXXX /DXXXX /uXXXX /DXXXX /uXXXX
opt_cmdln04 = /dCMDMAC -DCMD1= /DCMD2$#
!ifndef %plustest_old_compiler
opt_cmdln05 = -dXN2=2 -dXS1="a-/ b"-dXN1=2 -dXS2#"a-/ b"
!endif
opt_dyn01 = -xr
opt_opt09 = -za
opt_opt44 = -os
opt_pack6 = -ot -zp8
opt_pack7 = -wx
opt_pch01 = -fhq
opt_pch02 = -fhq
opt_pch03 = -fhq
opt_pch04 = -fhq
opt_pch05 = -fhq
opt_pch06 = -fhq
opt_pch07 = -fhq
opt_pch08 = -fhq
opt_pch09 = -fhq
opt_pch10 = -fhq
opt_pch11 = -fhq
opt_pch12 = -fhq
# pch13,14,15 are same test
opt_pch13 =             # (1) no PCH
opt_pch14 = -fhq        # (2) write PCH
opt_pch15 = -fhq        # (3) read PCH
opt_pch16 = -fhq
opt_pch17 = -fhq
opt_pch18 = -fhq -dAFS_CM
opt_pch19 = -fhq -dAFS_CM
opt_pch20 = -fhq -dAFS_CM
opt_pch21 = -fhq -dAFS_CM
opt_pp08 = -w0
opt_rtti02 = -xr
opt_rtti03 = -xr
opt_rtti04 = -xr
opt_rtti05 = -xr
opt_rtti06 = -xr
opt_rtti07 = -xr
opt_rtti08 = -xr -xbnm
opt_thread01 = -i$(lang_root)\h\nt
opt_vf18 = -za

!ifneq arch i86
opt_link_opt32 = option stack=128k
!endif

!ifeq arch axp
# AXP specific
!endif

!ifeq arch 386
# 386 specific
opt_init12 = -mf
opt_opt13 = -fpd
opt_vf17 = -zv

opt_link_vf17 = option vfremoval
!endif

!ifeq arch i86
# i86 specific
opt_opt13 = -fpd
opt_opt29 = -zff
opt_opt31 = -zff
opt_vf17 = -zv

opt_link_vf17 = option vfremoval
!endif

#
# tests temporarily excluded from alpha
#
bad_on_axp = &


positive_tests = &
    asm01.$(ext) &
    asm02.$(ext) &
    asm03.$(ext) &
    asm04.$(ext) &
    asm05.$(ext) &
    based02.$(ext) &
    bf01.$(ext) &
    bf02.$(ext) &
    conv02.$(ext) &
    conv03.$(ext) &
    conv04.$(ext) &
    enum01.$(ext) &
    enum02.$(ext) &
    enum03.$(ext) &
    expr01.$(ext) &
    expr02.$(ext) &
    float01.$(ext) &
    float03.$(ext) &
    float04.$(ext) &
    i64cmp.$(ext) &
    i64cnv.$(ext) &
    i64op.$(ext) &
    i6402.$(ext) &
    i6404.$(ext) &
    i6405.$(ext) &
    i6407.$(ext) &
    i6408.$(ext) &
    init01.$(ext) &
    init02.$(ext) &
    init03.$(ext) &
    init04.$(ext) &
    init05.$(ext) &
    init06.$(ext) &
    init07.$(ext) &
    init08.$(ext) &
    init09.$(ext) &
    init10.$(ext) &
    init11.$(ext) &
    init12.$(ext) &
    init13.$(ext) &
    init14.$(ext) &
    init15.$(ext) &
    init16.$(ext) &
    inline01.$(ext) &
    inline04.$(ext) &
    intel01.$(ext) &
    opt01.$(ext) &
    opt02.$(ext) &
    opt03.$(ext) &
    opt04.$(ext) &
    opt05.$(ext) &
    opt06.$(ext) &
    opt07.$(ext) &
    opt08.$(ext) &
    opt09.$(ext) &
    opt10.$(ext) &
    opt11.$(ext) &
    opt12.$(ext) &
    opt14.$(ext) &
    opt15.$(ext) &
    opt16.$(ext) &
    opt17.$(ext) &
    opt18.$(ext) &
    opt19.$(ext) &
    opt20.$(ext) &
    opt21.$(ext) &
    opt24.$(ext) &
    opt25.$(ext) &
    opt26.$(ext) &
    opt27.$(ext) &
    opt28.$(ext) &
    opt29.$(ext) &
    opt30.$(ext) &
    opt31.$(ext) &
    opt32.$(ext) &
    opt34.$(ext) &
    opt35.$(ext) &
    opt36.$(ext) &
    opt37.$(ext) &
    opt38.$(ext) &
    pack01.$(ext) &
    pack02.$(ext) &
    pack03.$(ext) &
    pack04.$(ext) &
    pack05.$(ext) &
    parm01.$(ext) &
    parm02.$(ext) &
    pp01.$(ext) &
    pp02.$(ext) &
    pp03.$(ext) &
    pp04.$(ext) &
    pp05.$(ext) &
    pp06.$(ext) &
    pp07.$(ext) &
    pp08.$(ext) &
    pp09.$(ext) &
    pp10.$(ext) &
    pp11.$(ext) &
    pp12.$(ext) &
    pp13.$(ext) &
    pp14.$(ext) &
    pp15.$(ext) &
    pp16.$(ext) &
    pp17.$(ext) &
    pp18.$(ext) &
    pp19.$(ext) &
    pp20.$(ext) &
    pp21.$(ext) &
    pp22.$(ext) &
    pp23.$(ext) &
    pp24.$(ext) &
    pp25.$(ext) &
    pp26.$(ext) &
    pp27.$(ext) &
    pp28.$(ext) &
    pp29.$(ext) &
    quest01.$(ext) &
    quest02.$(ext) &
    ret01.$(ext) &
    ret02.$(ext) &
    ret03.$(ext) &
    ret04.$(ext) &
    sizeof01.$(ext) &
    sizeof02.$(ext) &
    src01.$(ext) &
    str01.$(ext) &
    str02.$(ext) &
    switch01.$(ext) &
    thread01.$(ext) &
    thread02.$(ext) &



ext = $(ext_$(arch))
!ifeq arch axp
positive_exes = $+ $(positive_tests) $-
!else
positive_exes = $+ $(positive_tests) $(bad_on_axp) $-
!endif
