proj_name = wasm

!include cproj.mif
!include defrule.mif
!include deftarg.mif

!ifdef bootstrap
exc_name = $(proj_name)
!else ifeq host_OS qnx
exc_name = $(proj_name).qnx
!else
exc_name = $(proj_name).exe
!endif
link_name = $(proj_name).lnk

!ifdef bootstrap
cc = cc
bld_cl = cc
cflags = -funsigned-char -c -D_WASM_ -DUNIX -D__UNIX__ -D__LINUX__ -D__386__ -D__FLAT__ -D_WCUNALIGNED= -I$(%PWD) -I$(proj_path)/h -I$(womp_dir)/h -I$(watcom_dir)/h -I$(wres_dir)/h -I$(trmem_dir) -o $@
force_include = -include
LIBS = -L$(clib_dir)/$(%OBJDIR) -lwatcom
wcl_util_opts = -I$(watcom_dir)/h -o $^@ $(LIBS)
!else
wcl_util_opts = -fe=$^@
!endif

.OPTIMIZE

inc_dirs = .;$(proj_path)/h;$(womp_dir)/h;$(watcom_dir)/h;$(wres_dir)/h;$(trmem_dir)

#cflags stuff
#########
extra_c_flags =-d_WASM_
extra_c_flags_386 =-fpc
!ifeq release 0
extra_c_flags += -dTRMEM -dDEBUG_OUT
extra_c_flags_386 += -of
!endif

#lflags stuff
#########
extra_l_flags = option map,symfile,stack=12k
extra_l_flags_qnx = option offset=16k, res=usage.u

.c : $(proj_path)/c;$(womp_dir)/c;$(wres_dir)/c;$(trmem_dir)


proj_obj =   $(extra_proj_obj_$(host_OS)_$(host_CPU)) &
    main.obj            &
    write.obj           &
    fatal.obj           &
    util.obj            &
    direct.obj          &
    posndir.obj         &
    asmeval.obj         &
    asmalloc.obj        &
    asmmsg.obj          &
    wasmmsg.obj         &
    mem.obj             &
    macro.obj           &
    condasm.obj         &
    breakout.obj        &
    asmstruc.obj        &
    fpfixup.obj         &
    expand.obj          &
    mangle.obj          &
    for.obj             &
    objio.obj           &
    carve.obj           &
    genmsomf.obj        &
    objrec.obj          &
    queue.obj           &
    fixup.obj           &
    lifix.obj           &
    array.obj           &
    asmins.obj          &
    asmscan.obj         &
    asmline.obj         &
    asmsym.obj          &
    tbyte.obj           &
    asmlabel.obj        &
    asmfixup.obj        &
    asmmatch.obj        &
    asmdata.obj         &
    insthash.obj        &
    asmjump.obj         &
    finger.obj

wres_obj =              &
    loadstr.obj         &
    wriidfn.obj         &
    wrfindrs.obj        &
    wrgetli.obj         &
    ropenfro.obj        &
    wrinitdi.obj        &
    wrreaddi.obj        &
    wrfreedi.obj        &
    rclosef.obj         &
    wridcmp.obj         &
    wrerror.obj         &
    ralliae.obj         &
    wrrfrr.obj          &
    wridexby.obj        &
    wrrewrid.obj        &
    wrrftr.obj          &
    wrrhr.obj           &
    mrrdrh.obj          &
    wrfree.obj          &
    wridfnoo.obj        &
    wraddres.obj        &
    wriswrf.obj         &
    wridnacm.obj        &
    resseek.obj         &
    rduint32.obj        &
    rrnamoor.obj        &
    rduint16.obj        &
    wridfrst.obj        &
    wridfrnu.obj        &
    wrfirres.obj        &
    rduint8.obj         &
    rrdstr.obj          &
    varstr.obj          

proj_obj += $(wres_obj)

!ifeq release 0
proj_obj += trmem.obj trmemcvr.obj
!endif

#explicit rules
######

$(exc_name) : fullops.gh inlnops.gh wmpmsg.gh $(link_name) $(proj_name).res $(proj_obj)
!ifeq  host_OS qnx
        @%make usage.u
!endif
!ifdef bootstrap
        @%make usage.u
        $(cc) -o $^@ $(proj_obj) $(LIBS)
!else
        $(linker) @$(link_name)
!ifeq host_OS osi
        $(bld_bin)/w32bind $(proj_name).rex $@ $(tools_root)/os2ldr.exe
        @rm -f $(proj_name).rex
!endif
!endif
        wstrip -a -r -q $@ . $(proj_name)


$(link_name) : $(__MAKEFILES__)
        @%write $^@ $(lflags)
        @%append  $^@ file { $(proj_obj) }
!ifeq host_OS osi
        @%append  $^@ name $(proj_name).rex
!else
        @%append  $^@ name $(exc_name)
!endif

###################################################################
# resource stuff

$(proj_name).res : $(proj_path)/h/$(proj_name).rc $(proj_path)/h/asmshare.msg $(proj_path)/h/$(proj_name).msg usage.rc usagej.rc msg.gh wasmmsg.gh
        $(rc) -bt=windows -d_WASM_ -r -zk0 -fo=$^@ $[@

usage.rc : $(proj_path)/h/usage.sp
        wsplice -kIS_RC -kENGLISH -k$(host_OS) -t8 -f "%+(MSG_USE_E_BASE+%$#-1), \"%s\"" $< $^@

usagej.rc : $(proj_path)/h/usage.sp
        wsplice -kIS_RC -kJAPANESE -k$(host_OS) -t8 -f "%+(MSG_USE_J_BASE+%$#-1), \"%s\"" $< $^@

usage.u : $(proj_path)/h/usage.sp
        $(bld_bin)/wsplice -kENGLISH -k$(host_OS) -t8 -u $[@ $^@

usagej.u : $(proj_path)/h/usage.sp
        $(bld_bin)/wsplice -kJAPANESE -k$(host_OS) -t8 -u $[@ $^@

msg.gh : $(proj_path)/h/asmshare.msg
!ifdef __LINUX__
        perl $(sdk_dir)/misc/msgtoh.pl < $[@ | sed -e '/0$$/d' > $^@
!else
        vi -q -d -i -s $(proj_path)/h/makemsg.vi -p"$^@" $[@
!endif

wasmmsg.gh : $(proj_path)/h/$(proj_name).msg
!ifdef __LINUX__
        perl $(sdk_dir)/misc/msgtoh.pl < $[@ | &
        sed -e '/0$$/d' -e 's/MSG_RC_BASE/MSG_WASM_RC_BASE/' > $^@
!else
        vi -q -d -i -s $(proj_path)/h/makewmsg.vi -p"$^@" $[@
!endif

###################################################################

inlnops.gh: $(proj_path)/inlnops.tok ./mkopcode.exe
        $]@ $(proj_path)/inlnops.tok $^@

fullops.gh: $(proj_path)/fullops.tok $(proj_path)/inlnops.tok ./mkopcode.exe
        $]@ $(proj_path)/fullops.tok $(proj_path)/inlnops.tok $^@

wmpmsg.gh : $(womp_dir)/womp.msg
!ifdef __LINUX__
    perl $(sdk_dir)/misc/msgtoh.pl < $< | sed '/0$$/d' > $^@
!else
    vi -q -d -i -s $(womp_dir)\h\makemsg.vi -p"$^@" $[@
!endif

./mkopcode.exe: $(proj_path)/mkopcode.c
        $(bld_cl) $[@ $(wcl_util_opts)
