/*
 *  wtsapi32.h  Windows Terminal Server (WTS) functions
 *
:include crwatcnt.sp
 */

#ifndef _WTSAPI32_H_INCLUDED
#define _WTSAPI32_H_INCLUDED

#ifndef _INC_WTSAPI
#define _INC_WTSAPI

:include readonly.sp
:include cpluspro.sp

/* Special values */
#define WTS_CURRENT_SERVER          NULL
#define WTS_CURRENT_SERVER_HANDLE   NULL
#define WTS_CURRENT_SERVER_NAME     NULL
#define WTS_CURRENT_SESSION         0xFFFFFFFFL

/* WTS shutdown flags */
#define WTS_WSD_LOGOFF      0x00000001L
#define WTS_WSD_SHUTDOWN    0x00000002L
#define WTS_WSD_REBOOT      0x00000004L
#define WTS_WSD_POWEROFF    0x00000008L
#define WTS_WSD_FASTREBOOT  0x00000010L

/* Maximum string lengths */
#define MAX_ELAPSED_TIME_LENGTH 15
#define MAX_DATE_TIME_LENGTH    56
#define WINSTATIONNAME_LENGTH   32
#define DOMAIN_LENGTH           17

/* WTS protocol types */
#define WTS_PROTOCOL_TYPE_CONSOLE   0
#define WTS_PROTOCOL_TYPE_ICA       1
#define WTS_PROTOCOL_TYPE_RDP       2

/* WTS event flags */
#define WTS_EVENT_NONE          0x00000000L
#define WTS_EVENT_CREATE        0x00000001L
#define WTS_EVENT_DELETE        0x00000002L
#define WTS_EVENT_RENAME        0x00000004L
#define WTS_EVENT_CONNECT       0x00000008L
#define WTS_EVENT_DISCONNECT    0x00000010L
#define WTS_EVENT_LOGON         0x00000020L
#define WTS_EVENT_LOGOFF        0x00000040L
#define WTS_EVENT_STATECHANGE   0x00000080L
#define WTS_EVENT_LICENSE       0x00000100L
#define WTS_EVENT_ALL           0x7FFFFFFFL
#define WTS_EVENT_FLUSH         0x80000000L

/* Console notification flags */
#define NOTIFY_FOR_THIS_SESSION 0
#define NOTIFY_FOR_ALL_SESSIONS 1

/* WTS connect state classes */
typedef enum _WTS_CONNECTSTATE_CLASS {
    WTSActive       = 0,
    WTSConnected    = 1,
    WTSConnectQuery = 2,
    WTSShadow       = 3,
    WTSDisconnected = 4,
    WTSIdle         = 5,
    WTSListen       = 6,
    WTSReset        = 7,
    WTSDown         = 8,
    WTSInit         = 9
} WTS_CONNECTSTATE_CLASS;

/* WTS server information */
typedef struct _WTS_SERVER_INFOA {
    LPSTR   pServerName;
} WTS_SERVER_INFOA;
typedef WTS_SERVER_INFOA    *PWTS_SERVER_INFOA;
typedef struct _WTS_SERVER_INFOW {
    LPWSTR  pServerName;
} WTS_SERVER_INFOW;
typedef WTS_SERVER_INFOW    *PWTS_SERVER_INFOW;
#ifdef UNICODE
typedef WTS_SERVER_INFOW    WTS_SERVER_INFO;
typedef PWTS_SERVER_INFOW   PWTS_SERVER_INFO;
#else
typedef WTS_SERVER_INFOA    WTS_SERVER_INFO;
typedef PWTS_SERVER_INFOA   PWTS_SERVER_INFO;
#endif

/* WTS session information */
typedef struct _WTS_SESSION_INFOA {
    DWORD                   SessionId;
    LPSTR                   pWinStationName;
    WTS_CONNECTSTATE_CLASS  State;
} WTS_SESSION_INFOA;
typedef WTS_SESSION_INFOA   *PWTS_SESSION_INFOA;
typedef struct _WTS_SESSION_INFOW {
    DWORD                   SessionId;
    LPWSTR                  pWinStationName;
    WTS_CONNECTSTATE_CLASS  State;
} WTS_SESSION_INFOW;
typedef WTS_SESSION_INFOW   *PWTS_SESSION_INFOW;
#ifdef UNICODE
typedef WTS_SESSION_INFOW   WTS_SESSION_INFO;
typedef PWTS_SESSION_INFOW  PWTS_SESSION_INFO;
#else
typedef WTS_SESSION_INFOA   WTS_SESSION_INFO;
typedef PWTS_SESSION_INFOA  PWTS_SESSION_INFO;
#endif

/* WTS process information */
typedef struct _WTS_PROCESS_INFOA {
    DWORD   SessionId;
    DWORD   ProcessId;
    LPSTR   pProcessName;
    PSID    pUserSid;
} WTS_PROCESS_INFOA;
typedef WTS_PROCESS_INFOA   *PWTS_PROCESS_INFOA;
typedef struct _WTS_PROCESS_INFOW {
    DWORD   SessionId;
    DWORD   ProcessId;
    LPWSTR  pProcessName;
    PSID    pUserSid;
} WTS_PROCESS_INFOW;
typedef WTS_PROCESS_INFOW   *PWTS_PROCESS_INFOW;
#ifdef UNICODE
typedef WTS_PROCESS_INFOW   WTS_PROCESS_INFO;
typedef PWTS_PROCESS_INFOW  PWTS_PROCESS_INFO;
#else
typedef WTS_PROCESS_INFOA   WTS_PROCESS_INFO;
typedef PWTS_PROCESS_INFOA  PWTS_PROCESS_INFO;
#endif

/* WTS information classes */
typedef enum _WTS_INFO_CLASS {
    WTSInitialProgram       = 0,
    WTSApplicationName      = 1,
    WTSWorkingDirectory     = 2,
    WTSOEMId                = 3,
    WTSSessionId            = 4,
    WTSUserName             = 5,
    WTSWinStationName       = 6,
    WTSDomainName           = 7,
    WTSConnectState         = 8,
    WTSClientBuildNumber    = 9,
    WTSClientName           = 10,
    WTSClientDirectory      = 11,
    WTSClientProductId      = 12,
    WTSClientHardwareId     = 13,
    WTSClientAddress        = 14,
    WTSClientDisplay        = 15,
    WTSClientProtocolType   = 16,
    WTSIdleTime             = 17,
    WTSLogonTime            = 18,
    WTSIncomingBytes        = 19,
    WTSOutgoingBytes        = 20,
    WTSIncomingFrames       = 21,
    WTSOutgoingFrames       = 22
} WTS_INFO_CLASS;

/* WTS client address information */
typedef struct _WTS_CLIENT_ADDRESS {
    DWORD   AddressFamily;
    BYTE    Address[20];
} WTS_CLIENT_ADDRESS;
typedef WTS_CLIENT_ADDRESS  *PWTS_CLIENT_ADDRESS;

/* WTS client display information */
typedef struct _WTS_CLIENT_DISPLAY {
    DWORD   HorizontalResolution;
    DWORD   VerticalResolution;
    DWORD   ColorDepth;
} WTS_CLIENT_DISPLAY;
typedef WTS_CLIENT_DISPLAY  *PWTS_CLIENT_DISPLAY;

/* WTS configuration classes */
typedef enum _WTS_CONFIG_CLASS {
    WTSUserConfigInitialProgram                 = 0,
    WTSUserConfigWorkingDirectory               = 1,
    WTSUserConfigfInheritInitialProgram         = 2,
    WTSUserConfigfAllowLogonTerminalServer      = 3,
    WTSUserConfigTimeoutSettingsConnections     = 4,
    WTSUserConfigTimeoutSettingsDisconnections  = 5,
    WTSUserConfigTimeoutSettingsIdle            = 6,
    WTSUserConfigfDeviceClientDrives            = 7,
    WTSUserConfigfDeviceClientPrinters          = 8,
    WTSUserConfigfDeviceClientDefaultPrinter    = 9,
    WTSUserConfigBrokenTimeoutSettings          = 10,
    WTSUserConfigReconnectSettings              = 11,
    WTSUserConfigModemCallbackSettings          = 12,
    WTSUserConfigModemCallbackPhoneNumber       = 13,
    WTSUserConfigShadowingSettings              = 14,
    WTSUserConfigTerminalServerProfilePath      = 15,
    WTSUserConfigTerminalServerHomeDir          = 16,
    WTSUserConfigTerminalServerHomeDirDrive     = 17,
    WTSUserConfigfTerminalServerRemoteHomeDir   = 18
} WTS_CONFIG_CLASS;

/* WTS virtual classes */
typedef enum _WTS_VIRTUAL_CLASS {
    WTSVirtualClientData    = 0,
    WTSVirtualFileHandle    = 1
} WTS_VIRTUAL_CLASS;

/* Functions in WTSAPI32.DLL */
VOID WINAPI     WTSCloseServer( HANDLE );
BOOL WINAPI     WTSDisconnectSession( HANDLE, DWORD, BOOL );
BOOL WINAPI     WTSEnumerateProcessesA( HANDLE, DWORD, DWORD, PWTS_PROCESS_INFOA *, DWORD * );
BOOL WINAPI     WTSEnumerateProcessesW( HANDLE, DWORD, DWORD, PWTS_PROCESS_INFOW *, DWORD * );
BOOL WINAPI     WTSEnumerateServersA( LPSTR, DWORD, DWORD, PWTS_SERVER_INFOA *, DWORD * );
BOOL WINAPI     WTSEnumerateServersW( LPWSTR, DWORD, DWORD, PWTS_SERVER_INFOW *, DWORD * );
BOOL WINAPI     WTSEnumerateSessionsA( HANDLE, DWORD, DWORD, PWTS_SESSION_INFOA *, DWORD * );
BOOL WINAPI     WTSEnumerateSessionsW( HANDLE, DWORD, DWORD, PWTS_SESSION_INFOW *, DWORD * );
VOID WINAPI     WTSFreeMemory( PVOID );
BOOL WINAPI     WTSLogoffSession( HANDLE, DWORD, BOOL );
HANDLE WINAPI   WTSOpenServerA( LPSTR );
HANDLE WINAPI   WTSOpenServerW( LPWSTR );
BOOL WINAPI     WTSQuerySessionInformationA( HANDLE, DWORD, WTS_INFO_CLASS, LPSTR *, DWORD * );
BOOL WINAPI     WTSQuerySessionInformationW( HANDLE, DWORD, WTS_INFO_CLASS, LPWSTR *, DWORD * );
BOOL WINAPI     WTSQueryUserConfigA( LPSTR, LPSTR, WTS_CONFIG_CLASS, LPSTR *, DWORD * );
BOOL WINAPI     WTSQueryUserConfigW( LPWSTR, LPWSTR, WTS_CONFIG_CLASS, LPWSTR *, DWORD * );
BOOL WINAPI     WTSQueryUserToken( ULONG, PHANDLE );
BOOL WINAPI     WTSRegisterSessionNotification( HWND, DWORD );
BOOL WINAPI     WTSRegisterSessionNotificationEx( HANDLE, HWND, DWORD );
BOOL WINAPI     WTSSendMessageA( HANDLE, DWORD, LPSTR, DWORD, LPSTR, DWORD, DWORD, DWORD, DWORD *, BOOL );
BOOL WINAPI     WTSSendMessageW( HANDLE, DWORD, LPWSTR, DWORD, LPWSTR, DWORD, DWORD, DWORD, DWORD *, BOOL );
BOOL WINAPI     WTSSetUserConfigA( LPSTR, LPSTR, WTS_CONFIG_CLASS, LPSTR, DWORD );
BOOL WINAPI     WTSSetUserConfigW( LPWSTR, LPWSTR, WTS_CONFIG_CLASS, LPWSTR, DWORD );
BOOL WINAPI     WTSShutdownSystem( HANDLE, DWORD );
BOOL WINAPI     WTSTerminateProcess( HANDLE, DWORD, DWORD );
BOOL WINAPI     WTSUnRegisterSessionNotification( HWND );
BOOL WINAPI     WTSUnRegisterSessionNotificationEx( HANDLE, HWND );
BOOL WINAPI     WTSVirtualChannelClose( HANDLE );
HANDLE WINAPI   WTSVirtualChannelOpen( HANDLE, DWORD, LPSTR );
BOOL WINAPI     WTSVirtualChannelPurgeInput( HANDLE );
BOOL WINAPI     WTSVirtualChannelPurgeOutput( HANDLE );
BOOL WINAPI     WTSVirtualChannelQuery( HANDLE, WTS_VIRTUAL_CLASS, PVOID *, DWORD * );
BOOL WINAPI     WTSVirtualChannelRead( HANDLE, ULONG, PCHAR, ULONG, PULONG );
BOOL WINAPI     WTSVirtualChannelWrite( HANDLE, PCHAR, ULONG, PULONG );
BOOL WINAPI     WTSWaitSystemEvent( HANDLE, DWORD, DWORD * );

/* Map generic function names to the appropriate ANSI or Unicode version. */
#ifdef UNICODE
    #define WTSEnumerateProcesses       WTSEnumerateProcessesW
    #define WTSEnumerateServers         WTSEnumerateServersW
    #define WTSEnumerateSessions        WTSEnumerateSessionsW
    #define WTSOpenServer               WTSOpenServerW
    #define WTSQuerySessionInformation  WTSQuerySessionInformationW
    #define WTSQueryUserConfig          WTSQueryUserConfigW
    #define WTSSendMessage              WTSSendMessageW
    #define WTSSetUserConfig            WTSSetUserConfigW
#else
    #define WTSEnumerateProcesses       WTSEnumerateProcessesA
    #define WTSEnumerateServers         WTSEnumerateServersA
    #define WTSEnumerateSessions        WTSEnumerateSessionsA
    #define WTSOpenServer               WTSOpenServerA
    #define WTSQuerySessionInformation  WTSQuerySessionInformationA
    #define WTSQueryUserConfig          WTSQueryUserConfigA
    #define WTSSendMessage              WTSSendMessageA
    #define WTSSetUserConfig            WTSSetUserConfigA
#endif

:include cplusepi.sp

#endif /* _INC_WTSAPI */
#endif /* _WTSAPI32_H_INCLUDED */

