# global definition which tool is quiet
cc         += -zq
cpp        += -zq
linker     += op q
librarian  += -q
as         += -q
rc         += -q
rcaui      += -q

bcl        += -zq
bas        += -q
blib       += -q
brc        += -q

# redirect standard tools to pre-build versions
as = $(bas)
vi = $(bvi)
librarian = $(blib)
rc = $(brc)
rcaui = $(brc)

!ifndef __NTAXP__

use_bld_incs    = 0
!ifeq host_cpu axp
use_bld_incs    = 1
!endif
!ifeq $(proj_name)_rtdll 1
use_bld_incs    = 1
!endif
!ifdef clib_rtdll
# C runtime library must compile against local headers!!!!
use_bld_incs    = 0
!endif

!ifeq use_bld_incs 1
cc_386          += $(bld_incs)
cpp_386         += $(bld_incs)
!endif

!endif

!ifdef __LOADDLL__
!loaddll wcc    wccd.dll
!loaddll wcc386 wccd386.dll
!loaddll wccaxp wccdaxp.dll
!loaddll wlib   wlibd.dll
!loaddll wlink  wlinkd.dll
!loaddll wpp    wppdi86.dll
!loaddll wpp386 wppd386.dll
!loaddll wppaxp wppdaxp.dll
!endif

# TODO: atomize this file and create separate files for various host
# platforms/compilers

!ifdef __UNIX__
#common UNIXy stuff - assumes a more or less POSIX compatible cc implementation
host_cl = cc
host_cl_opts = $(clflags_$(host_cpu)) -D__UNIX__ -I$(watcom_dir)/h $(inc_dirs) -o $^@ 
host_cl_objs = clibext.obj

preproc_opts = -E

.c : $(watcom_dir)/c

!ifdef bootstrap
librarian = ar
libflags = crs $^@

# options for linking via cc
clflags = $(clflags_$(host_cpu)) -o $@
cl_objs = clibext.obj

shrlib_ext     = .so
!endif

!endif

#common bootstrap definitions for Linux
!ifdef __LINUX__
!ifdef bootstrap

cc = gcc
cpp = gcc
cl = $(cc)
clpp = g++
bld_incs = $(bld_extra_incs) -I$(watcom_dir)/h

cppflags_386  = -D_M_IX86 -D__386__
cppflags_ppc  = -D__PPC__
cppflags_mips = -D__MIPS__ -Umips

# $(inc_dirs_lang_$(host_os)) must be defined to override default OW headers
inc_dirs_lang_linux =
inc_dirs_lang_osi =

# Warning flags: all enabled except the ones that only annoy people
cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses

cppflags = -D__LINUX__ -DBOOTSTRAP

cflags_comp = -fno-asm -fno-common -pipe

cflags_dbg = -g
cflags_rel = -g -O2

# Flags for building shared libs
cflags_shared  = -fPIC
clflags_shared = -shared

!endif
!endif

#common definitions for building on OS X (using GCC)
!ifdef __OSX__
!ifdef bootstrap

cc = cc
cpp = cc
cl = $(cc)
clpp = g++

cppflags_386  = -D_M_IX86 -D__386__

cflags_wng =
cppflags = -D__OSX__ -DBOOTSTRAP
cflags_comp = -fno-common

cflags_dbg = -g
cflags_rel = -g -O2

# Flags for building shared libs; -fPIC is on by default, and the linking
# flag on Darwin is different from everyone else's...
clflags_shared = -dynamiclib

!endif
!endif

#common definitions for building on Solaris (using SunPro tools)
!ifdef __SOLARIS__
# Solaris sticks to crappy old awk as the default
awk = nawk

!ifdef bootstrap

cc = cc
cpp = CC
cl = $(cc)
clpp = $(cpp)

cppflags_386  = -m32 -D__386__ -D_M_IX86
cppflags_x64  = -m64 -D__X64__ -DLONG_IS_64BITS
clflags_x64   = -m64 -DLONG_IS_64BITS

cflags_wng =
cppflags = -D__SOLARIS__ -DBOOTSTRAP

cflags_rel = -g -O2 # Warning: O3 and higher may produce buggy code!
cflags_dbg = -g -O0

# Flags for building shared libs
cflags_shared  = -fPIC
clflags_shared = -shared

!endif
!endif

#common definitions for targeting QNX Neutrino
!ifeq host_os nto
!ifdef bootstrap

cc = qcc
cpp = qcc
cl = $(cc)
!ifdef __QNX__
bld_incs = $(bld_extra_incs) -I$(watcom_dir)/h
!endif
librarian += -fa

cppflags_386  = -D_M_IX86 -D__386__
cppflags_ppc  = -D__PPC__
cppflags_mips = -D__MIPS__ -Umips

# $(inc_dirs_lang_$(host_os)) must be defined to override default OW headers
inc_dirs_lang_nto =
inc_dirs_lang_osi =

# Warning flags: all enabled except the ones that only annoy people
cflags_wng = -Wall -Wno-switch -Wno-missing-braces -Wno-parentheses

cppflags = -D__QNX__

cflags_comp = -funsigned-char -fno-asm -fno-common -pipe

cflags_rel = -g -O
cflags_dbg = -g

!endif
!endif

!ifdef __UNIX__
!ifdef bootstrap

# Final common UNIX bootstrap setup

cflgs1= -c $(extra_c_flags) $(cppflags_$(host_cpu))
cflgs2 = -D__UNIX__ $(defines) $(cppflags) $(cflags_wng) $(cflags_comp)

!ifeq release 1
cflags = $(cflgs1) $(cflgs2) -DNDEBUG $(cflags_rel) -o $@
!else
cflags = $(cflgs1) $(cflgs2) $(cflags_dbg) -o $@
!endif

!endif
!endif

!ifdef __NT__
!ifdef bootstrap

# MSVC
cc = cl
cpp = cl
cl = $(cc)
clpp = $(cpp)

bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"
librarian = lib
libflags = -nologo -out:$^@

cppflags_386 = -D_M_IX86=400 -D__386__ -D__NT__ -D_X86_
cppflags = -D__FLAT__ -DBOOTSTRAP $(cppflags_$(host_cpu))

cflags_rel = -Ox -DNDEBUG
cflags_dbg = -Zi

!ifeq release 1
cflags = -c -nologo $(extra_c_flags) $(cppflags) $(cflags_rel) -Fo$@
!else
cflags = -c -nologo $(extra_c_flags) $(cppflags) $(cflags_dbg) -Fo$@
!endif

# options for linking via cl
clflags = -nologo -Fe$@
cl_objs = clibext.obj
.c : $(watcom_dir)/c

host_cl = cl
host_cl_opts = -nologo -I"$(watcom_dir)/h" $(inc_dirs) -Fe$^@

# Flags for building DLLs
cflags_shared  =
clflags_shared = -LD
shrlib_ext     = .dll

!endif
!endif
